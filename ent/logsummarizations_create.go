// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/logsummarizations"
)

// LogSummarizationsCreate is the builder for creating a LogSummarizations entity.
type LogSummarizationsCreate struct {
	config
	mutation *LogSummarizationsMutation
	hooks    []Hook
}

// SetContentURL sets the "content_url" field.
func (lsc *LogSummarizationsCreate) SetContentURL(s string) *LogSummarizationsCreate {
	lsc.mutation.SetContentURL(s)
	return lsc
}

// SetNillableContentURL sets the "content_url" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillableContentURL(s *string) *LogSummarizationsCreate {
	if s != nil {
		lsc.SetContentURL(*s)
	}
	return lsc
}

// SetContentTitle sets the "content_title" field.
func (lsc *LogSummarizationsCreate) SetContentTitle(s string) *LogSummarizationsCreate {
	lsc.mutation.SetContentTitle(s)
	return lsc
}

// SetNillableContentTitle sets the "content_title" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillableContentTitle(s *string) *LogSummarizationsCreate {
	if s != nil {
		lsc.SetContentTitle(*s)
	}
	return lsc
}

// SetContentAuthor sets the "content_author" field.
func (lsc *LogSummarizationsCreate) SetContentAuthor(s string) *LogSummarizationsCreate {
	lsc.mutation.SetContentAuthor(s)
	return lsc
}

// SetNillableContentAuthor sets the "content_author" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillableContentAuthor(s *string) *LogSummarizationsCreate {
	if s != nil {
		lsc.SetContentAuthor(*s)
	}
	return lsc
}

// SetContentText sets the "content_text" field.
func (lsc *LogSummarizationsCreate) SetContentText(s string) *LogSummarizationsCreate {
	lsc.mutation.SetContentText(s)
	return lsc
}

// SetNillableContentText sets the "content_text" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillableContentText(s *string) *LogSummarizationsCreate {
	if s != nil {
		lsc.SetContentText(*s)
	}
	return lsc
}

// SetContentSummarizedOutputs sets the "content_summarized_outputs" field.
func (lsc *LogSummarizationsCreate) SetContentSummarizedOutputs(s string) *LogSummarizationsCreate {
	lsc.mutation.SetContentSummarizedOutputs(s)
	return lsc
}

// SetNillableContentSummarizedOutputs sets the "content_summarized_outputs" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillableContentSummarizedOutputs(s *string) *LogSummarizationsCreate {
	if s != nil {
		lsc.SetContentSummarizedOutputs(*s)
	}
	return lsc
}

// SetFromPlatform sets the "from_platform" field.
func (lsc *LogSummarizationsCreate) SetFromPlatform(i int) *LogSummarizationsCreate {
	lsc.mutation.SetFromPlatform(i)
	return lsc
}

// SetNillableFromPlatform sets the "from_platform" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillableFromPlatform(i *int) *LogSummarizationsCreate {
	if i != nil {
		lsc.SetFromPlatform(*i)
	}
	return lsc
}

// SetPromptTokenUsage sets the "prompt_token_usage" field.
func (lsc *LogSummarizationsCreate) SetPromptTokenUsage(i int) *LogSummarizationsCreate {
	lsc.mutation.SetPromptTokenUsage(i)
	return lsc
}

// SetNillablePromptTokenUsage sets the "prompt_token_usage" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillablePromptTokenUsage(i *int) *LogSummarizationsCreate {
	if i != nil {
		lsc.SetPromptTokenUsage(*i)
	}
	return lsc
}

// SetCompletionTokenUsage sets the "completion_token_usage" field.
func (lsc *LogSummarizationsCreate) SetCompletionTokenUsage(i int) *LogSummarizationsCreate {
	lsc.mutation.SetCompletionTokenUsage(i)
	return lsc
}

// SetNillableCompletionTokenUsage sets the "completion_token_usage" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillableCompletionTokenUsage(i *int) *LogSummarizationsCreate {
	if i != nil {
		lsc.SetCompletionTokenUsage(*i)
	}
	return lsc
}

// SetTotalTokenUsage sets the "total_token_usage" field.
func (lsc *LogSummarizationsCreate) SetTotalTokenUsage(i int) *LogSummarizationsCreate {
	lsc.mutation.SetTotalTokenUsage(i)
	return lsc
}

// SetNillableTotalTokenUsage sets the "total_token_usage" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillableTotalTokenUsage(i *int) *LogSummarizationsCreate {
	if i != nil {
		lsc.SetTotalTokenUsage(*i)
	}
	return lsc
}

// SetCreatedAt sets the "created_at" field.
func (lsc *LogSummarizationsCreate) SetCreatedAt(i int64) *LogSummarizationsCreate {
	lsc.mutation.SetCreatedAt(i)
	return lsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillableCreatedAt(i *int64) *LogSummarizationsCreate {
	if i != nil {
		lsc.SetCreatedAt(*i)
	}
	return lsc
}

// SetUpdatedAt sets the "updated_at" field.
func (lsc *LogSummarizationsCreate) SetUpdatedAt(i int64) *LogSummarizationsCreate {
	lsc.mutation.SetUpdatedAt(i)
	return lsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillableUpdatedAt(i *int64) *LogSummarizationsCreate {
	if i != nil {
		lsc.SetUpdatedAt(*i)
	}
	return lsc
}

// SetID sets the "id" field.
func (lsc *LogSummarizationsCreate) SetID(u uuid.UUID) *LogSummarizationsCreate {
	lsc.mutation.SetID(u)
	return lsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lsc *LogSummarizationsCreate) SetNillableID(u *uuid.UUID) *LogSummarizationsCreate {
	if u != nil {
		lsc.SetID(*u)
	}
	return lsc
}

// Mutation returns the LogSummarizationsMutation object of the builder.
func (lsc *LogSummarizationsCreate) Mutation() *LogSummarizationsMutation {
	return lsc.mutation
}

// Save creates the LogSummarizations in the database.
func (lsc *LogSummarizationsCreate) Save(ctx context.Context) (*LogSummarizations, error) {
	lsc.defaults()
	return withHooks(ctx, lsc.sqlSave, lsc.mutation, lsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lsc *LogSummarizationsCreate) SaveX(ctx context.Context) *LogSummarizations {
	v, err := lsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lsc *LogSummarizationsCreate) Exec(ctx context.Context) error {
	_, err := lsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsc *LogSummarizationsCreate) ExecX(ctx context.Context) {
	if err := lsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lsc *LogSummarizationsCreate) defaults() {
	if _, ok := lsc.mutation.ContentURL(); !ok {
		v := logsummarizations.DefaultContentURL
		lsc.mutation.SetContentURL(v)
	}
	if _, ok := lsc.mutation.ContentTitle(); !ok {
		v := logsummarizations.DefaultContentTitle
		lsc.mutation.SetContentTitle(v)
	}
	if _, ok := lsc.mutation.ContentAuthor(); !ok {
		v := logsummarizations.DefaultContentAuthor
		lsc.mutation.SetContentAuthor(v)
	}
	if _, ok := lsc.mutation.ContentText(); !ok {
		v := logsummarizations.DefaultContentText
		lsc.mutation.SetContentText(v)
	}
	if _, ok := lsc.mutation.ContentSummarizedOutputs(); !ok {
		v := logsummarizations.DefaultContentSummarizedOutputs
		lsc.mutation.SetContentSummarizedOutputs(v)
	}
	if _, ok := lsc.mutation.FromPlatform(); !ok {
		v := logsummarizations.DefaultFromPlatform
		lsc.mutation.SetFromPlatform(v)
	}
	if _, ok := lsc.mutation.PromptTokenUsage(); !ok {
		v := logsummarizations.DefaultPromptTokenUsage
		lsc.mutation.SetPromptTokenUsage(v)
	}
	if _, ok := lsc.mutation.CompletionTokenUsage(); !ok {
		v := logsummarizations.DefaultCompletionTokenUsage
		lsc.mutation.SetCompletionTokenUsage(v)
	}
	if _, ok := lsc.mutation.TotalTokenUsage(); !ok {
		v := logsummarizations.DefaultTotalTokenUsage
		lsc.mutation.SetTotalTokenUsage(v)
	}
	if _, ok := lsc.mutation.CreatedAt(); !ok {
		v := logsummarizations.DefaultCreatedAt()
		lsc.mutation.SetCreatedAt(v)
	}
	if _, ok := lsc.mutation.UpdatedAt(); !ok {
		v := logsummarizations.DefaultUpdatedAt()
		lsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lsc.mutation.ID(); !ok {
		v := logsummarizations.DefaultID()
		lsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsc *LogSummarizationsCreate) check() error {
	if _, ok := lsc.mutation.ContentURL(); !ok {
		return &ValidationError{Name: "content_url", err: errors.New(`ent: missing required field "LogSummarizations.content_url"`)}
	}
	if _, ok := lsc.mutation.ContentTitle(); !ok {
		return &ValidationError{Name: "content_title", err: errors.New(`ent: missing required field "LogSummarizations.content_title"`)}
	}
	if _, ok := lsc.mutation.ContentAuthor(); !ok {
		return &ValidationError{Name: "content_author", err: errors.New(`ent: missing required field "LogSummarizations.content_author"`)}
	}
	if _, ok := lsc.mutation.ContentText(); !ok {
		return &ValidationError{Name: "content_text", err: errors.New(`ent: missing required field "LogSummarizations.content_text"`)}
	}
	if _, ok := lsc.mutation.ContentSummarizedOutputs(); !ok {
		return &ValidationError{Name: "content_summarized_outputs", err: errors.New(`ent: missing required field "LogSummarizations.content_summarized_outputs"`)}
	}
	if _, ok := lsc.mutation.FromPlatform(); !ok {
		return &ValidationError{Name: "from_platform", err: errors.New(`ent: missing required field "LogSummarizations.from_platform"`)}
	}
	if _, ok := lsc.mutation.PromptTokenUsage(); !ok {
		return &ValidationError{Name: "prompt_token_usage", err: errors.New(`ent: missing required field "LogSummarizations.prompt_token_usage"`)}
	}
	if _, ok := lsc.mutation.CompletionTokenUsage(); !ok {
		return &ValidationError{Name: "completion_token_usage", err: errors.New(`ent: missing required field "LogSummarizations.completion_token_usage"`)}
	}
	if _, ok := lsc.mutation.TotalTokenUsage(); !ok {
		return &ValidationError{Name: "total_token_usage", err: errors.New(`ent: missing required field "LogSummarizations.total_token_usage"`)}
	}
	if _, ok := lsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LogSummarizations.created_at"`)}
	}
	if _, ok := lsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LogSummarizations.updated_at"`)}
	}
	return nil
}

func (lsc *LogSummarizationsCreate) sqlSave(ctx context.Context) (*LogSummarizations, error) {
	if err := lsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lsc.mutation.id = &_node.ID
	lsc.mutation.done = true
	return _node, nil
}

func (lsc *LogSummarizationsCreate) createSpec() (*LogSummarizations, *sqlgraph.CreateSpec) {
	var (
		_node = &LogSummarizations{config: lsc.config}
		_spec = sqlgraph.NewCreateSpec(logsummarizations.Table, sqlgraph.NewFieldSpec(logsummarizations.FieldID, field.TypeUUID))
	)
	_spec.Schema = lsc.schemaConfig.LogSummarizations
	if id, ok := lsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lsc.mutation.ContentURL(); ok {
		_spec.SetField(logsummarizations.FieldContentURL, field.TypeString, value)
		_node.ContentURL = value
	}
	if value, ok := lsc.mutation.ContentTitle(); ok {
		_spec.SetField(logsummarizations.FieldContentTitle, field.TypeString, value)
		_node.ContentTitle = value
	}
	if value, ok := lsc.mutation.ContentAuthor(); ok {
		_spec.SetField(logsummarizations.FieldContentAuthor, field.TypeString, value)
		_node.ContentAuthor = value
	}
	if value, ok := lsc.mutation.ContentText(); ok {
		_spec.SetField(logsummarizations.FieldContentText, field.TypeString, value)
		_node.ContentText = value
	}
	if value, ok := lsc.mutation.ContentSummarizedOutputs(); ok {
		_spec.SetField(logsummarizations.FieldContentSummarizedOutputs, field.TypeString, value)
		_node.ContentSummarizedOutputs = value
	}
	if value, ok := lsc.mutation.FromPlatform(); ok {
		_spec.SetField(logsummarizations.FieldFromPlatform, field.TypeInt, value)
		_node.FromPlatform = value
	}
	if value, ok := lsc.mutation.PromptTokenUsage(); ok {
		_spec.SetField(logsummarizations.FieldPromptTokenUsage, field.TypeInt, value)
		_node.PromptTokenUsage = value
	}
	if value, ok := lsc.mutation.CompletionTokenUsage(); ok {
		_spec.SetField(logsummarizations.FieldCompletionTokenUsage, field.TypeInt, value)
		_node.CompletionTokenUsage = value
	}
	if value, ok := lsc.mutation.TotalTokenUsage(); ok {
		_spec.SetField(logsummarizations.FieldTotalTokenUsage, field.TypeInt, value)
		_node.TotalTokenUsage = value
	}
	if value, ok := lsc.mutation.CreatedAt(); ok {
		_spec.SetField(logsummarizations.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := lsc.mutation.UpdatedAt(); ok {
		_spec.SetField(logsummarizations.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// LogSummarizationsCreateBulk is the builder for creating many LogSummarizations entities in bulk.
type LogSummarizationsCreateBulk struct {
	config
	builders []*LogSummarizationsCreate
}

// Save creates the LogSummarizations entities in the database.
func (lscb *LogSummarizationsCreateBulk) Save(ctx context.Context) ([]*LogSummarizations, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lscb.builders))
	nodes := make([]*LogSummarizations, len(lscb.builders))
	mutators := make([]Mutator, len(lscb.builders))
	for i := range lscb.builders {
		func(i int, root context.Context) {
			builder := lscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogSummarizationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lscb *LogSummarizationsCreateBulk) SaveX(ctx context.Context) []*LogSummarizations {
	v, err := lscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lscb *LogSummarizationsCreateBulk) Exec(ctx context.Context) error {
	_, err := lscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lscb *LogSummarizationsCreateBulk) ExecX(ctx context.Context) {
	if err := lscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/telegramchathistories"
)

// TelegramChatHistoriesQuery is the builder for querying TelegramChatHistories entities.
type TelegramChatHistoriesQuery struct {
	config
	ctx        *QueryContext
	order      []telegramchathistories.OrderOption
	inters     []Interceptor
	predicates []predicate.TelegramChatHistories
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TelegramChatHistoriesQuery builder.
func (tchq *TelegramChatHistoriesQuery) Where(ps ...predicate.TelegramChatHistories) *TelegramChatHistoriesQuery {
	tchq.predicates = append(tchq.predicates, ps...)
	return tchq
}

// Limit the number of records to be returned by this query.
func (tchq *TelegramChatHistoriesQuery) Limit(limit int) *TelegramChatHistoriesQuery {
	tchq.ctx.Limit = &limit
	return tchq
}

// Offset to start from.
func (tchq *TelegramChatHistoriesQuery) Offset(offset int) *TelegramChatHistoriesQuery {
	tchq.ctx.Offset = &offset
	return tchq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tchq *TelegramChatHistoriesQuery) Unique(unique bool) *TelegramChatHistoriesQuery {
	tchq.ctx.Unique = &unique
	return tchq
}

// Order specifies how the records should be ordered.
func (tchq *TelegramChatHistoriesQuery) Order(o ...telegramchathistories.OrderOption) *TelegramChatHistoriesQuery {
	tchq.order = append(tchq.order, o...)
	return tchq
}

// First returns the first TelegramChatHistories entity from the query.
// Returns a *NotFoundError when no TelegramChatHistories was found.
func (tchq *TelegramChatHistoriesQuery) First(ctx context.Context) (*TelegramChatHistories, error) {
	nodes, err := tchq.Limit(1).All(setContextOp(ctx, tchq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{telegramchathistories.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tchq *TelegramChatHistoriesQuery) FirstX(ctx context.Context) *TelegramChatHistories {
	node, err := tchq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TelegramChatHistories ID from the query.
// Returns a *NotFoundError when no TelegramChatHistories ID was found.
func (tchq *TelegramChatHistoriesQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tchq.Limit(1).IDs(setContextOp(ctx, tchq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{telegramchathistories.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tchq *TelegramChatHistoriesQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := tchq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TelegramChatHistories entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TelegramChatHistories entity is found.
// Returns a *NotFoundError when no TelegramChatHistories entities are found.
func (tchq *TelegramChatHistoriesQuery) Only(ctx context.Context) (*TelegramChatHistories, error) {
	nodes, err := tchq.Limit(2).All(setContextOp(ctx, tchq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{telegramchathistories.Label}
	default:
		return nil, &NotSingularError{telegramchathistories.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tchq *TelegramChatHistoriesQuery) OnlyX(ctx context.Context) *TelegramChatHistories {
	node, err := tchq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TelegramChatHistories ID in the query.
// Returns a *NotSingularError when more than one TelegramChatHistories ID is found.
// Returns a *NotFoundError when no entities are found.
func (tchq *TelegramChatHistoriesQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tchq.Limit(2).IDs(setContextOp(ctx, tchq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{telegramchathistories.Label}
	default:
		err = &NotSingularError{telegramchathistories.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tchq *TelegramChatHistoriesQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := tchq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TelegramChatHistoriesSlice.
func (tchq *TelegramChatHistoriesQuery) All(ctx context.Context) ([]*TelegramChatHistories, error) {
	ctx = setContextOp(ctx, tchq.ctx, "All")
	if err := tchq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TelegramChatHistories, *TelegramChatHistoriesQuery]()
	return withInterceptors[[]*TelegramChatHistories](ctx, tchq, qr, tchq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tchq *TelegramChatHistoriesQuery) AllX(ctx context.Context) []*TelegramChatHistories {
	nodes, err := tchq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TelegramChatHistories IDs.
func (tchq *TelegramChatHistoriesQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if tchq.ctx.Unique == nil && tchq.path != nil {
		tchq.Unique(true)
	}
	ctx = setContextOp(ctx, tchq.ctx, "IDs")
	if err = tchq.Select(telegramchathistories.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tchq *TelegramChatHistoriesQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := tchq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tchq *TelegramChatHistoriesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tchq.ctx, "Count")
	if err := tchq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tchq, querierCount[*TelegramChatHistoriesQuery](), tchq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tchq *TelegramChatHistoriesQuery) CountX(ctx context.Context) int {
	count, err := tchq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tchq *TelegramChatHistoriesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tchq.ctx, "Exist")
	switch _, err := tchq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tchq *TelegramChatHistoriesQuery) ExistX(ctx context.Context) bool {
	exist, err := tchq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TelegramChatHistoriesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tchq *TelegramChatHistoriesQuery) Clone() *TelegramChatHistoriesQuery {
	if tchq == nil {
		return nil
	}
	return &TelegramChatHistoriesQuery{
		config:     tchq.config,
		ctx:        tchq.ctx.Clone(),
		order:      append([]telegramchathistories.OrderOption{}, tchq.order...),
		inters:     append([]Interceptor{}, tchq.inters...),
		predicates: append([]predicate.TelegramChatHistories{}, tchq.predicates...),
		// clone intermediate query.
		sql:  tchq.sql.Clone(),
		path: tchq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ChatID int64 `json:"chat_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TelegramChatHistories.Query().
//		GroupBy(telegramchathistories.FieldChatID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tchq *TelegramChatHistoriesQuery) GroupBy(field string, fields ...string) *TelegramChatHistoriesGroupBy {
	tchq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TelegramChatHistoriesGroupBy{build: tchq}
	grbuild.flds = &tchq.ctx.Fields
	grbuild.label = telegramchathistories.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ChatID int64 `json:"chat_id,omitempty"`
//	}
//
//	client.TelegramChatHistories.Query().
//		Select(telegramchathistories.FieldChatID).
//		Scan(ctx, &v)
func (tchq *TelegramChatHistoriesQuery) Select(fields ...string) *TelegramChatHistoriesSelect {
	tchq.ctx.Fields = append(tchq.ctx.Fields, fields...)
	sbuild := &TelegramChatHistoriesSelect{TelegramChatHistoriesQuery: tchq}
	sbuild.label = telegramchathistories.Label
	sbuild.flds, sbuild.scan = &tchq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TelegramChatHistoriesSelect configured with the given aggregations.
func (tchq *TelegramChatHistoriesQuery) Aggregate(fns ...AggregateFunc) *TelegramChatHistoriesSelect {
	return tchq.Select().Aggregate(fns...)
}

func (tchq *TelegramChatHistoriesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tchq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tchq); err != nil {
				return err
			}
		}
	}
	for _, f := range tchq.ctx.Fields {
		if !telegramchathistories.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tchq.path != nil {
		prev, err := tchq.path(ctx)
		if err != nil {
			return err
		}
		tchq.sql = prev
	}
	return nil
}

func (tchq *TelegramChatHistoriesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TelegramChatHistories, error) {
	var (
		nodes = []*TelegramChatHistories{}
		_spec = tchq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TelegramChatHistories).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TelegramChatHistories{config: tchq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = tchq.schemaConfig.TelegramChatHistories
	ctx = internal.NewSchemaConfigContext(ctx, tchq.schemaConfig)
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tchq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (tchq *TelegramChatHistoriesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tchq.querySpec()
	_spec.Node.Schema = tchq.schemaConfig.TelegramChatHistories
	ctx = internal.NewSchemaConfigContext(ctx, tchq.schemaConfig)
	_spec.Node.Columns = tchq.ctx.Fields
	if len(tchq.ctx.Fields) > 0 {
		_spec.Unique = tchq.ctx.Unique != nil && *tchq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tchq.driver, _spec)
}

func (tchq *TelegramChatHistoriesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(telegramchathistories.Table, telegramchathistories.Columns, sqlgraph.NewFieldSpec(telegramchathistories.FieldID, field.TypeUUID))
	_spec.From = tchq.sql
	if unique := tchq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tchq.path != nil {
		_spec.Unique = true
	}
	if fields := tchq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telegramchathistories.FieldID)
		for i := range fields {
			if fields[i] != telegramchathistories.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tchq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tchq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tchq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tchq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tchq *TelegramChatHistoriesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tchq.driver.Dialect())
	t1 := builder.Table(telegramchathistories.Table)
	columns := tchq.ctx.Fields
	if len(columns) == 0 {
		columns = telegramchathistories.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tchq.sql != nil {
		selector = tchq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tchq.ctx.Unique != nil && *tchq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(tchq.schemaConfig.TelegramChatHistories)
	ctx = internal.NewSchemaConfigContext(ctx, tchq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range tchq.predicates {
		p(selector)
	}
	for _, p := range tchq.order {
		p(selector)
	}
	if offset := tchq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tchq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TelegramChatHistoriesGroupBy is the group-by builder for TelegramChatHistories entities.
type TelegramChatHistoriesGroupBy struct {
	selector
	build *TelegramChatHistoriesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tchgb *TelegramChatHistoriesGroupBy) Aggregate(fns ...AggregateFunc) *TelegramChatHistoriesGroupBy {
	tchgb.fns = append(tchgb.fns, fns...)
	return tchgb
}

// Scan applies the selector query and scans the result into the given value.
func (tchgb *TelegramChatHistoriesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tchgb.build.ctx, "GroupBy")
	if err := tchgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TelegramChatHistoriesQuery, *TelegramChatHistoriesGroupBy](ctx, tchgb.build, tchgb, tchgb.build.inters, v)
}

func (tchgb *TelegramChatHistoriesGroupBy) sqlScan(ctx context.Context, root *TelegramChatHistoriesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tchgb.fns))
	for _, fn := range tchgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tchgb.flds)+len(tchgb.fns))
		for _, f := range *tchgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tchgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tchgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TelegramChatHistoriesSelect is the builder for selecting fields of TelegramChatHistories entities.
type TelegramChatHistoriesSelect struct {
	*TelegramChatHistoriesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tchs *TelegramChatHistoriesSelect) Aggregate(fns ...AggregateFunc) *TelegramChatHistoriesSelect {
	tchs.fns = append(tchs.fns, fns...)
	return tchs
}

// Scan applies the selector query and scans the result into the given value.
func (tchs *TelegramChatHistoriesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tchs.ctx, "Select")
	if err := tchs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TelegramChatHistoriesQuery, *TelegramChatHistoriesSelect](ctx, tchs.TelegramChatHistoriesQuery, tchs, tchs.inters, v)
}

func (tchs *TelegramChatHistoriesSelect) sqlScan(ctx context.Context, root *TelegramChatHistoriesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tchs.fns))
	for _, fn := range tchs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tchs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tchs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

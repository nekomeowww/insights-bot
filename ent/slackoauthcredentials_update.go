// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/slackoauthcredentials"
)

// SlackOAuthCredentialsUpdate is the builder for updating SlackOAuthCredentials entities.
type SlackOAuthCredentialsUpdate struct {
	config
	hooks    []Hook
	mutation *SlackOAuthCredentialsMutation
}

// Where appends a list predicates to the SlackOAuthCredentialsUpdate builder.
func (socu *SlackOAuthCredentialsUpdate) Where(ps ...predicate.SlackOAuthCredentials) *SlackOAuthCredentialsUpdate {
	socu.mutation.Where(ps...)
	return socu
}

// SetAccessToken sets the "access_token" field.
func (socu *SlackOAuthCredentialsUpdate) SetAccessToken(s string) *SlackOAuthCredentialsUpdate {
	socu.mutation.SetAccessToken(s)
	return socu
}

// SetCreatedAt sets the "created_at" field.
func (socu *SlackOAuthCredentialsUpdate) SetCreatedAt(i int64) *SlackOAuthCredentialsUpdate {
	socu.mutation.ResetCreatedAt()
	socu.mutation.SetCreatedAt(i)
	return socu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (socu *SlackOAuthCredentialsUpdate) SetNillableCreatedAt(i *int64) *SlackOAuthCredentialsUpdate {
	if i != nil {
		socu.SetCreatedAt(*i)
	}
	return socu
}

// AddCreatedAt adds i to the "created_at" field.
func (socu *SlackOAuthCredentialsUpdate) AddCreatedAt(i int64) *SlackOAuthCredentialsUpdate {
	socu.mutation.AddCreatedAt(i)
	return socu
}

// SetUpdatedAt sets the "updated_at" field.
func (socu *SlackOAuthCredentialsUpdate) SetUpdatedAt(i int64) *SlackOAuthCredentialsUpdate {
	socu.mutation.ResetUpdatedAt()
	socu.mutation.SetUpdatedAt(i)
	return socu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (socu *SlackOAuthCredentialsUpdate) SetNillableUpdatedAt(i *int64) *SlackOAuthCredentialsUpdate {
	if i != nil {
		socu.SetUpdatedAt(*i)
	}
	return socu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (socu *SlackOAuthCredentialsUpdate) AddUpdatedAt(i int64) *SlackOAuthCredentialsUpdate {
	socu.mutation.AddUpdatedAt(i)
	return socu
}

// Mutation returns the SlackOAuthCredentialsMutation object of the builder.
func (socu *SlackOAuthCredentialsUpdate) Mutation() *SlackOAuthCredentialsMutation {
	return socu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (socu *SlackOAuthCredentialsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SlackOAuthCredentialsMutation](ctx, socu.sqlSave, socu.mutation, socu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (socu *SlackOAuthCredentialsUpdate) SaveX(ctx context.Context) int {
	affected, err := socu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (socu *SlackOAuthCredentialsUpdate) Exec(ctx context.Context) error {
	_, err := socu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (socu *SlackOAuthCredentialsUpdate) ExecX(ctx context.Context) {
	if err := socu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (socu *SlackOAuthCredentialsUpdate) check() error {
	if v, ok := socu.mutation.AccessToken(); ok {
		if err := slackoauthcredentials.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "SlackOAuthCredentials.access_token": %w`, err)}
		}
	}
	return nil
}

func (socu *SlackOAuthCredentialsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := socu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(slackoauthcredentials.Table, slackoauthcredentials.Columns, sqlgraph.NewFieldSpec(slackoauthcredentials.FieldID, field.TypeUUID))
	if ps := socu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := socu.mutation.AccessToken(); ok {
		_spec.SetField(slackoauthcredentials.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := socu.mutation.CreatedAt(); ok {
		_spec.SetField(slackoauthcredentials.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := socu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(slackoauthcredentials.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := socu.mutation.UpdatedAt(); ok {
		_spec.SetField(slackoauthcredentials.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := socu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(slackoauthcredentials.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = socu.schemaConfig.SlackOAuthCredentials
	ctx = internal.NewSchemaConfigContext(ctx, socu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, socu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slackoauthcredentials.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	socu.mutation.done = true
	return n, nil
}

// SlackOAuthCredentialsUpdateOne is the builder for updating a single SlackOAuthCredentials entity.
type SlackOAuthCredentialsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SlackOAuthCredentialsMutation
}

// SetAccessToken sets the "access_token" field.
func (socuo *SlackOAuthCredentialsUpdateOne) SetAccessToken(s string) *SlackOAuthCredentialsUpdateOne {
	socuo.mutation.SetAccessToken(s)
	return socuo
}

// SetCreatedAt sets the "created_at" field.
func (socuo *SlackOAuthCredentialsUpdateOne) SetCreatedAt(i int64) *SlackOAuthCredentialsUpdateOne {
	socuo.mutation.ResetCreatedAt()
	socuo.mutation.SetCreatedAt(i)
	return socuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (socuo *SlackOAuthCredentialsUpdateOne) SetNillableCreatedAt(i *int64) *SlackOAuthCredentialsUpdateOne {
	if i != nil {
		socuo.SetCreatedAt(*i)
	}
	return socuo
}

// AddCreatedAt adds i to the "created_at" field.
func (socuo *SlackOAuthCredentialsUpdateOne) AddCreatedAt(i int64) *SlackOAuthCredentialsUpdateOne {
	socuo.mutation.AddCreatedAt(i)
	return socuo
}

// SetUpdatedAt sets the "updated_at" field.
func (socuo *SlackOAuthCredentialsUpdateOne) SetUpdatedAt(i int64) *SlackOAuthCredentialsUpdateOne {
	socuo.mutation.ResetUpdatedAt()
	socuo.mutation.SetUpdatedAt(i)
	return socuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (socuo *SlackOAuthCredentialsUpdateOne) SetNillableUpdatedAt(i *int64) *SlackOAuthCredentialsUpdateOne {
	if i != nil {
		socuo.SetUpdatedAt(*i)
	}
	return socuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (socuo *SlackOAuthCredentialsUpdateOne) AddUpdatedAt(i int64) *SlackOAuthCredentialsUpdateOne {
	socuo.mutation.AddUpdatedAt(i)
	return socuo
}

// Mutation returns the SlackOAuthCredentialsMutation object of the builder.
func (socuo *SlackOAuthCredentialsUpdateOne) Mutation() *SlackOAuthCredentialsMutation {
	return socuo.mutation
}

// Where appends a list predicates to the SlackOAuthCredentialsUpdate builder.
func (socuo *SlackOAuthCredentialsUpdateOne) Where(ps ...predicate.SlackOAuthCredentials) *SlackOAuthCredentialsUpdateOne {
	socuo.mutation.Where(ps...)
	return socuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (socuo *SlackOAuthCredentialsUpdateOne) Select(field string, fields ...string) *SlackOAuthCredentialsUpdateOne {
	socuo.fields = append([]string{field}, fields...)
	return socuo
}

// Save executes the query and returns the updated SlackOAuthCredentials entity.
func (socuo *SlackOAuthCredentialsUpdateOne) Save(ctx context.Context) (*SlackOAuthCredentials, error) {
	return withHooks[*SlackOAuthCredentials, SlackOAuthCredentialsMutation](ctx, socuo.sqlSave, socuo.mutation, socuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (socuo *SlackOAuthCredentialsUpdateOne) SaveX(ctx context.Context) *SlackOAuthCredentials {
	node, err := socuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (socuo *SlackOAuthCredentialsUpdateOne) Exec(ctx context.Context) error {
	_, err := socuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (socuo *SlackOAuthCredentialsUpdateOne) ExecX(ctx context.Context) {
	if err := socuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (socuo *SlackOAuthCredentialsUpdateOne) check() error {
	if v, ok := socuo.mutation.AccessToken(); ok {
		if err := slackoauthcredentials.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "SlackOAuthCredentials.access_token": %w`, err)}
		}
	}
	return nil
}

func (socuo *SlackOAuthCredentialsUpdateOne) sqlSave(ctx context.Context) (_node *SlackOAuthCredentials, err error) {
	if err := socuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(slackoauthcredentials.Table, slackoauthcredentials.Columns, sqlgraph.NewFieldSpec(slackoauthcredentials.FieldID, field.TypeUUID))
	id, ok := socuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SlackOAuthCredentials.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := socuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, slackoauthcredentials.FieldID)
		for _, f := range fields {
			if !slackoauthcredentials.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != slackoauthcredentials.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := socuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := socuo.mutation.AccessToken(); ok {
		_spec.SetField(slackoauthcredentials.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := socuo.mutation.CreatedAt(); ok {
		_spec.SetField(slackoauthcredentials.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := socuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(slackoauthcredentials.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := socuo.mutation.UpdatedAt(); ok {
		_spec.SetField(slackoauthcredentials.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := socuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(slackoauthcredentials.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = socuo.schemaConfig.SlackOAuthCredentials
	ctx = internal.NewSchemaConfigContext(ctx, socuo.schemaConfig)
	_node = &SlackOAuthCredentials{config: socuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, socuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slackoauthcredentials.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	socuo.mutation.done = true
	return _node, nil
}

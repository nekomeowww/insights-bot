// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/sentmessages"
)

// SentMessages is the model entity for the SentMessages schema.
type SentMessages struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID int64 `json:"chat_id,omitempty"`
	// MessageID holds the value of the "message_id" field.
	MessageID int `json:"message_id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// IsPinned holds the value of the "is_pinned" field.
	IsPinned bool `json:"is_pinned,omitempty"`
	// FromPlatform holds the value of the "from_platform" field.
	FromPlatform int `json:"from_platform,omitempty"`
	// MessageType holds the value of the "message_type" field.
	MessageType int `json:"message_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SentMessages) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sentmessages.FieldIsPinned:
			values[i] = new(sql.NullBool)
		case sentmessages.FieldChatID, sentmessages.FieldMessageID, sentmessages.FieldFromPlatform, sentmessages.FieldMessageType, sentmessages.FieldCreatedAt, sentmessages.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case sentmessages.FieldText:
			values[i] = new(sql.NullString)
		case sentmessages.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SentMessages fields.
func (sm *SentMessages) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sentmessages.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sm.ID = *value
			}
		case sentmessages.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				sm.ChatID = value.Int64
			}
		case sentmessages.FieldMessageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				sm.MessageID = int(value.Int64)
			}
		case sentmessages.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				sm.Text = value.String
			}
		case sentmessages.FieldIsPinned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_pinned", values[i])
			} else if value.Valid {
				sm.IsPinned = value.Bool
			}
		case sentmessages.FieldFromPlatform:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_platform", values[i])
			} else if value.Valid {
				sm.FromPlatform = int(value.Int64)
			}
		case sentmessages.FieldMessageType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field message_type", values[i])
			} else if value.Valid {
				sm.MessageType = int(value.Int64)
			}
		case sentmessages.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sm.CreatedAt = value.Int64
			}
		case sentmessages.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sm.UpdatedAt = value.Int64
			}
		default:
			sm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SentMessages.
// This includes values selected through modifiers, order, etc.
func (sm *SentMessages) Value(name string) (ent.Value, error) {
	return sm.selectValues.Get(name)
}

// Update returns a builder for updating this SentMessages.
// Note that you need to call SentMessages.Unwrap() before calling this method if this SentMessages
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *SentMessages) Update() *SentMessagesUpdateOne {
	return NewSentMessagesClient(sm.config).UpdateOne(sm)
}

// Unwrap unwraps the SentMessages entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *SentMessages) Unwrap() *SentMessages {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: SentMessages is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *SentMessages) String() string {
	var builder strings.Builder
	builder.WriteString("SentMessages(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sm.ID))
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", sm.ChatID))
	builder.WriteString(", ")
	builder.WriteString("message_id=")
	builder.WriteString(fmt.Sprintf("%v", sm.MessageID))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(sm.Text)
	builder.WriteString(", ")
	builder.WriteString("is_pinned=")
	builder.WriteString(fmt.Sprintf("%v", sm.IsPinned))
	builder.WriteString(", ")
	builder.WriteString("from_platform=")
	builder.WriteString(fmt.Sprintf("%v", sm.FromPlatform))
	builder.WriteString(", ")
	builder.WriteString("message_type=")
	builder.WriteString(fmt.Sprintf("%v", sm.MessageType))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sm.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", sm.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// SentMessagesSlice is a parsable slice of SentMessages.
type SentMessagesSlice []*SentMessages

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/slackoauthcredentials"
)

// SlackOAuthCredentials is the model entity for the SlackOAuthCredentials schema.
type SlackOAuthCredentials struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TeamID holds the value of the "team_id" field.
	TeamID string `json:"team_id,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SlackOAuthCredentials) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case slackoauthcredentials.FieldCreatedAt, slackoauthcredentials.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case slackoauthcredentials.FieldTeamID, slackoauthcredentials.FieldAccessToken:
			values[i] = new(sql.NullString)
		case slackoauthcredentials.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SlackOAuthCredentials fields.
func (soc *SlackOAuthCredentials) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case slackoauthcredentials.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				soc.ID = *value
			}
		case slackoauthcredentials.FieldTeamID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value.Valid {
				soc.TeamID = value.String
			}
		case slackoauthcredentials.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				soc.AccessToken = value.String
			}
		case slackoauthcredentials.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				soc.CreatedAt = value.Int64
			}
		case slackoauthcredentials.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				soc.UpdatedAt = value.Int64
			}
		default:
			soc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SlackOAuthCredentials.
// This includes values selected through modifiers, order, etc.
func (soc *SlackOAuthCredentials) Value(name string) (ent.Value, error) {
	return soc.selectValues.Get(name)
}

// Update returns a builder for updating this SlackOAuthCredentials.
// Note that you need to call SlackOAuthCredentials.Unwrap() before calling this method if this SlackOAuthCredentials
// was returned from a transaction, and the transaction was committed or rolled back.
func (soc *SlackOAuthCredentials) Update() *SlackOAuthCredentialsUpdateOne {
	return NewSlackOAuthCredentialsClient(soc.config).UpdateOne(soc)
}

// Unwrap unwraps the SlackOAuthCredentials entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (soc *SlackOAuthCredentials) Unwrap() *SlackOAuthCredentials {
	_tx, ok := soc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SlackOAuthCredentials is not a transactional entity")
	}
	soc.config.driver = _tx.drv
	return soc
}

// String implements the fmt.Stringer.
func (soc *SlackOAuthCredentials) String() string {
	var builder strings.Builder
	builder.WriteString("SlackOAuthCredentials(")
	builder.WriteString(fmt.Sprintf("id=%v, ", soc.ID))
	builder.WriteString("team_id=")
	builder.WriteString(soc.TeamID)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(soc.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", soc.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", soc.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// SlackOAuthCredentialsSlice is a parsable slice of SlackOAuthCredentials.
type SlackOAuthCredentialsSlice []*SlackOAuthCredentials

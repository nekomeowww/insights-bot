# # Timezone shift in seconds used for auto generating recap messages for groups, default is 0.
# # 用于自动生成群组聊天回顾时所参考的时区偏移（以秒为单位），默认值为 0。
# TIMEZONE_SHIFT_SECONDS=0

# # Telegram Bot API token, you can create one and obtain the token through [@BotFather](https://t.me/BotFather)
# # Telegram Bot API 令牌，你可以通过 [@BotFather](https://t.me/BotFather) 创建一个。
# TELEGRAM_BOT_TOKEN=

# # Telegram Bot webhook URL and port, you can use https://ngrok.com/ or Cloudflare tunnel to expose your local server to the internet.
# # 用于由 Telegram 服务器请求并推送消息更新的 Telegram Bot Webhook URL 以及端口（如果有的话），你可以使用 https://ngrok.com/ 或者 Cloudflare tunnel 来讲本地服务暴露到公共互联网。
# TELEGRAM_BOT_WEBHOOK_URL=https://webhook.example.com/telegram_bot

# # Telegram Bot Webhook server port, default is 7071
# # Telegram Bot Webhook 服务器端口，默认值为 7071
# TELEGRAM_BOT_WEBHOOK_PORT=7071

# # Slack app client id, you can create a slack app and get it, see: https://api.slack.com/tutorials/slack-apps-and-postman
# # Slack app client id，你可以创建一个 Slack App 并获取它，参见：https://api.slack.com/tutorials/slack-apps-and-postman
# SLACK_CLIENT_ID=

# # Slack app client secret, you can create a slack app and get it, see: https://api.slack.com/tutorials/slack-apps-and-postman
# # Slack app client secret，你可以创建一个 Slack App 并获取它，参见：https://api.slack.com/tutorials/slack-apps-and-postman
# SLACK_CLIENT_SECRET=

# # Port for Slack Bot/App Webhook server
# # Slack Bot/App Webhook 服务器端口
# SLACK_WEBHOOK_PORT=

# # Discord bot token, you can create a discord app and get it, see: https://discord.com/developers/docs/getting-started
# # Discord bot token，你可以创建一个 Discord App 并获取它，参见：https://discord.com/developers/docs/getting-started
# DISCORD_BOT_TOKEN=

# # Discord app public key, you can create a discord app and get it, see: https://discord.com/developers/docs/getting-started
# # Discord app public key，你可以创建一个 Discord App 并获取它，参见：https://discord.com/developers/docs/getting-started
# DISCORD_BOT_PUBLIC_KEY=

# # Port for Discord Bot Webhook server
# # Discord Bot Webhook 服务器端口
# DISCORD_BOT_WEBHOOK_PORT=

# # OpenAI API Secret Key that looks like `sk-************************************************`,
# # you can obtain one by signing in to OpenAI platform and create one at http://platform.openai.com/account/api-keys.
# # OpenAI API 密钥，看起来像 `sk-************************************************`，你可以登录 OpenAI 平台并在 http://platform.openai.com/account/api-keys 创建一个。
# OPENAI_API_SECRET=

# # OpenAI API Host, you can specify one if you have a relay or reversed proxy configured. Such as `https://openai.example.workers.dev`
# # OpenAI API 主机，如果你有一个中继或反向代理配置的话，你可以指定一个。例如 `https://openai.example.workers.dev`
# OPENAI_API_HOST=

# # OpenAI API Model name, default is `gpt-3.5-turbo` which is the best model available at the moment.
# # OpenAI API 模型名称，默认值为 `gpt-3.5-turbo`，这是目前可用的最好的模型。
# OPENAI_API_MODEL_NAME=

# # OpenAI token limit, used to calculate text split and truncation before calling Chat Completion API, usually set to the max token limit of the model and let insights-bot decide how to handle, default is `4096`
# # OpenAI Token 限制，用于在调用 Chat Completion API 之前计算文本的分割和截断，一般设置为模型的最大令牌限制，然后交由 insights-bot 决定如何处理，默认为 `4096`
# OPENAI_API_TOKEN_LIMIT=4096

# # OpenAI chat histories recap token limit, token length of generated and response chat histories recap message, default is 2000, this will leave OPENAI_API_TOKEN_LIMIT - 2000 tokens for actual chat context
# # OpenAI 聊天历史记录回顾令牌限制，生成的和响应的聊天历史记录回顾消息的令牌长度，默认值为 2000，这将会给实际的聊天上下文留下 OPENAI_API_TOKEN_LIMIT - 2000 个令牌
# OPENAI_API_CHAT_HISTORIES_RECAP_TOKEN_LIMIT=2000

# # PostgreSQL database URL. Such as `postgres://postgres:postgres@localhost:5432/postgres`.
# # You could also suffix with `?search_path=<schema name>` if you want to specify a schema
# # PostgreSQL 数据库 URL。例如 `postgres://postgres:postgres@localhost:5432/postgres`。
# # 你也可以在末尾添加 `?search_path=<schema name>` 来指定一个 schema
# DB_CONNECTION_STR="postgresql://postgres:123456@db_local:5432/postgres?search_path=public&sslmode=disable"

# # Redis host connects to, default is `localhost`
# # Redis 主机，默认值为 `localhost`
# REDIS_HOST=localhost

# # Redis port, default is `6379`
# # Redis 端口，默认值为 `6379`
# REDIS_PORT=6381

# # Redis TLS enabled, default is `false`
# # Redis TLS 启用，默认值为 `false`
# REDIS_TLS_ENABLED=false

# # Redis username, default is `""`
# # Redis 用户名，默认值为 `""`
# REDIS_USERNAME=

# # Redis password, default is `""`
# # Redis 密码，默认值为 `""`
# REDIS_PASSWORD=123456

# # Redis database, default is `0`
# # Redis 数据库，默认值为 `0`
# REDIS_DB=0

# # Redis client cache enabled, default is `false`, read more about client cache at
# # https://redis.io/docs/manual/client-side-caching/ and https://github.com/redis/rueidis#client-side-caching for more details.
# # Redis 客户端缓存启用，默认值为 `false`，更多关于客户端缓存的信息请参见
# # https://redis.io/docs/manual/client-side-caching/ 和 https://github.com/redis/rueidis#client-side-caching
# REDIS_CLIENT_CACHE_ENABLED=false

# Log level, default is `info`, available options are `debug`, `info`, `warn`, `error`
# 日志级别，默认值为 `info`，可用选项为 `debug`、`info`、`warn`、`error`
# LOG_LEVEL=info

// Code generated by ent, DO NOT EDIT.

package chathistories

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldID, id))
}

// ChatID applies equality check predicate on the "chat_id" field. It's identical to ChatIDEQ.
func ChatID(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldChatID, v))
}

// ChatTitle applies equality check predicate on the "chat_title" field. It's identical to ChatTitleEQ.
func ChatTitle(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldChatTitle, v))
}

// MessageID applies equality check predicate on the "message_id" field. It's identical to MessageIDEQ.
func MessageID(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldMessageID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldUserID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldUsername, v))
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldFullName, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldText, v))
}

// RepliedToMessageID applies equality check predicate on the "replied_to_message_id" field. It's identical to RepliedToMessageIDEQ.
func RepliedToMessageID(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldRepliedToMessageID, v))
}

// RepliedToUserID applies equality check predicate on the "replied_to_user_id" field. It's identical to RepliedToUserIDEQ.
func RepliedToUserID(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldRepliedToUserID, v))
}

// RepliedToFullName applies equality check predicate on the "replied_to_full_name" field. It's identical to RepliedToFullNameEQ.
func RepliedToFullName(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldRepliedToFullName, v))
}

// RepliedToUsername applies equality check predicate on the "replied_to_username" field. It's identical to RepliedToUsernameEQ.
func RepliedToUsername(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldRepliedToUsername, v))
}

// RepliedToText applies equality check predicate on the "replied_to_text" field. It's identical to RepliedToTextEQ.
func RepliedToText(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldRepliedToText, v))
}

// ChattedAt applies equality check predicate on the "chatted_at" field. It's identical to ChattedAtEQ.
func ChattedAt(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldChattedAt, v))
}

// Embedded applies equality check predicate on the "embedded" field. It's identical to EmbeddedEQ.
func Embedded(v bool) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldEmbedded, v))
}

// FromPlatform applies equality check predicate on the "from_platform" field. It's identical to FromPlatformEQ.
func FromPlatform(v int) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldFromPlatform, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldUpdatedAt, v))
}

// ChatIDEQ applies the EQ predicate on the "chat_id" field.
func ChatIDEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldChatID, v))
}

// ChatIDNEQ applies the NEQ predicate on the "chat_id" field.
func ChatIDNEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldChatID, v))
}

// ChatIDIn applies the In predicate on the "chat_id" field.
func ChatIDIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldChatID, vs...))
}

// ChatIDNotIn applies the NotIn predicate on the "chat_id" field.
func ChatIDNotIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldChatID, vs...))
}

// ChatIDGT applies the GT predicate on the "chat_id" field.
func ChatIDGT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldChatID, v))
}

// ChatIDGTE applies the GTE predicate on the "chat_id" field.
func ChatIDGTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldChatID, v))
}

// ChatIDLT applies the LT predicate on the "chat_id" field.
func ChatIDLT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldChatID, v))
}

// ChatIDLTE applies the LTE predicate on the "chat_id" field.
func ChatIDLTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldChatID, v))
}

// ChatTitleEQ applies the EQ predicate on the "chat_title" field.
func ChatTitleEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldChatTitle, v))
}

// ChatTitleNEQ applies the NEQ predicate on the "chat_title" field.
func ChatTitleNEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldChatTitle, v))
}

// ChatTitleIn applies the In predicate on the "chat_title" field.
func ChatTitleIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldChatTitle, vs...))
}

// ChatTitleNotIn applies the NotIn predicate on the "chat_title" field.
func ChatTitleNotIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldChatTitle, vs...))
}

// ChatTitleGT applies the GT predicate on the "chat_title" field.
func ChatTitleGT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldChatTitle, v))
}

// ChatTitleGTE applies the GTE predicate on the "chat_title" field.
func ChatTitleGTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldChatTitle, v))
}

// ChatTitleLT applies the LT predicate on the "chat_title" field.
func ChatTitleLT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldChatTitle, v))
}

// ChatTitleLTE applies the LTE predicate on the "chat_title" field.
func ChatTitleLTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldChatTitle, v))
}

// ChatTitleContains applies the Contains predicate on the "chat_title" field.
func ChatTitleContains(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContains(FieldChatTitle, v))
}

// ChatTitleHasPrefix applies the HasPrefix predicate on the "chat_title" field.
func ChatTitleHasPrefix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasPrefix(FieldChatTitle, v))
}

// ChatTitleHasSuffix applies the HasSuffix predicate on the "chat_title" field.
func ChatTitleHasSuffix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasSuffix(FieldChatTitle, v))
}

// ChatTitleEqualFold applies the EqualFold predicate on the "chat_title" field.
func ChatTitleEqualFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEqualFold(FieldChatTitle, v))
}

// ChatTitleContainsFold applies the ContainsFold predicate on the "chat_title" field.
func ChatTitleContainsFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContainsFold(FieldChatTitle, v))
}

// MessageIDEQ applies the EQ predicate on the "message_id" field.
func MessageIDEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldMessageID, v))
}

// MessageIDNEQ applies the NEQ predicate on the "message_id" field.
func MessageIDNEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldMessageID, v))
}

// MessageIDIn applies the In predicate on the "message_id" field.
func MessageIDIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldMessageID, vs...))
}

// MessageIDNotIn applies the NotIn predicate on the "message_id" field.
func MessageIDNotIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldMessageID, vs...))
}

// MessageIDGT applies the GT predicate on the "message_id" field.
func MessageIDGT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldMessageID, v))
}

// MessageIDGTE applies the GTE predicate on the "message_id" field.
func MessageIDGTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldMessageID, v))
}

// MessageIDLT applies the LT predicate on the "message_id" field.
func MessageIDLT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldMessageID, v))
}

// MessageIDLTE applies the LTE predicate on the "message_id" field.
func MessageIDLTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldMessageID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldUserID, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContainsFold(FieldUsername, v))
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldFullName, v))
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldFullName, v))
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldFullName, vs...))
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldFullName, vs...))
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldFullName, v))
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldFullName, v))
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldFullName, v))
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldFullName, v))
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContains(FieldFullName, v))
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasPrefix(FieldFullName, v))
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasSuffix(FieldFullName, v))
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEqualFold(FieldFullName, v))
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContainsFold(FieldFullName, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContainsFold(FieldText, v))
}

// RepliedToMessageIDEQ applies the EQ predicate on the "replied_to_message_id" field.
func RepliedToMessageIDEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldRepliedToMessageID, v))
}

// RepliedToMessageIDNEQ applies the NEQ predicate on the "replied_to_message_id" field.
func RepliedToMessageIDNEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldRepliedToMessageID, v))
}

// RepliedToMessageIDIn applies the In predicate on the "replied_to_message_id" field.
func RepliedToMessageIDIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldRepliedToMessageID, vs...))
}

// RepliedToMessageIDNotIn applies the NotIn predicate on the "replied_to_message_id" field.
func RepliedToMessageIDNotIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldRepliedToMessageID, vs...))
}

// RepliedToMessageIDGT applies the GT predicate on the "replied_to_message_id" field.
func RepliedToMessageIDGT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldRepliedToMessageID, v))
}

// RepliedToMessageIDGTE applies the GTE predicate on the "replied_to_message_id" field.
func RepliedToMessageIDGTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldRepliedToMessageID, v))
}

// RepliedToMessageIDLT applies the LT predicate on the "replied_to_message_id" field.
func RepliedToMessageIDLT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldRepliedToMessageID, v))
}

// RepliedToMessageIDLTE applies the LTE predicate on the "replied_to_message_id" field.
func RepliedToMessageIDLTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldRepliedToMessageID, v))
}

// RepliedToUserIDEQ applies the EQ predicate on the "replied_to_user_id" field.
func RepliedToUserIDEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldRepliedToUserID, v))
}

// RepliedToUserIDNEQ applies the NEQ predicate on the "replied_to_user_id" field.
func RepliedToUserIDNEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldRepliedToUserID, v))
}

// RepliedToUserIDIn applies the In predicate on the "replied_to_user_id" field.
func RepliedToUserIDIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldRepliedToUserID, vs...))
}

// RepliedToUserIDNotIn applies the NotIn predicate on the "replied_to_user_id" field.
func RepliedToUserIDNotIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldRepliedToUserID, vs...))
}

// RepliedToUserIDGT applies the GT predicate on the "replied_to_user_id" field.
func RepliedToUserIDGT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldRepliedToUserID, v))
}

// RepliedToUserIDGTE applies the GTE predicate on the "replied_to_user_id" field.
func RepliedToUserIDGTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldRepliedToUserID, v))
}

// RepliedToUserIDLT applies the LT predicate on the "replied_to_user_id" field.
func RepliedToUserIDLT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldRepliedToUserID, v))
}

// RepliedToUserIDLTE applies the LTE predicate on the "replied_to_user_id" field.
func RepliedToUserIDLTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldRepliedToUserID, v))
}

// RepliedToFullNameEQ applies the EQ predicate on the "replied_to_full_name" field.
func RepliedToFullNameEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldRepliedToFullName, v))
}

// RepliedToFullNameNEQ applies the NEQ predicate on the "replied_to_full_name" field.
func RepliedToFullNameNEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldRepliedToFullName, v))
}

// RepliedToFullNameIn applies the In predicate on the "replied_to_full_name" field.
func RepliedToFullNameIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldRepliedToFullName, vs...))
}

// RepliedToFullNameNotIn applies the NotIn predicate on the "replied_to_full_name" field.
func RepliedToFullNameNotIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldRepliedToFullName, vs...))
}

// RepliedToFullNameGT applies the GT predicate on the "replied_to_full_name" field.
func RepliedToFullNameGT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldRepliedToFullName, v))
}

// RepliedToFullNameGTE applies the GTE predicate on the "replied_to_full_name" field.
func RepliedToFullNameGTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldRepliedToFullName, v))
}

// RepliedToFullNameLT applies the LT predicate on the "replied_to_full_name" field.
func RepliedToFullNameLT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldRepliedToFullName, v))
}

// RepliedToFullNameLTE applies the LTE predicate on the "replied_to_full_name" field.
func RepliedToFullNameLTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldRepliedToFullName, v))
}

// RepliedToFullNameContains applies the Contains predicate on the "replied_to_full_name" field.
func RepliedToFullNameContains(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContains(FieldRepliedToFullName, v))
}

// RepliedToFullNameHasPrefix applies the HasPrefix predicate on the "replied_to_full_name" field.
func RepliedToFullNameHasPrefix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasPrefix(FieldRepliedToFullName, v))
}

// RepliedToFullNameHasSuffix applies the HasSuffix predicate on the "replied_to_full_name" field.
func RepliedToFullNameHasSuffix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasSuffix(FieldRepliedToFullName, v))
}

// RepliedToFullNameEqualFold applies the EqualFold predicate on the "replied_to_full_name" field.
func RepliedToFullNameEqualFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEqualFold(FieldRepliedToFullName, v))
}

// RepliedToFullNameContainsFold applies the ContainsFold predicate on the "replied_to_full_name" field.
func RepliedToFullNameContainsFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContainsFold(FieldRepliedToFullName, v))
}

// RepliedToUsernameEQ applies the EQ predicate on the "replied_to_username" field.
func RepliedToUsernameEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldRepliedToUsername, v))
}

// RepliedToUsernameNEQ applies the NEQ predicate on the "replied_to_username" field.
func RepliedToUsernameNEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldRepliedToUsername, v))
}

// RepliedToUsernameIn applies the In predicate on the "replied_to_username" field.
func RepliedToUsernameIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldRepliedToUsername, vs...))
}

// RepliedToUsernameNotIn applies the NotIn predicate on the "replied_to_username" field.
func RepliedToUsernameNotIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldRepliedToUsername, vs...))
}

// RepliedToUsernameGT applies the GT predicate on the "replied_to_username" field.
func RepliedToUsernameGT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldRepliedToUsername, v))
}

// RepliedToUsernameGTE applies the GTE predicate on the "replied_to_username" field.
func RepliedToUsernameGTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldRepliedToUsername, v))
}

// RepliedToUsernameLT applies the LT predicate on the "replied_to_username" field.
func RepliedToUsernameLT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldRepliedToUsername, v))
}

// RepliedToUsernameLTE applies the LTE predicate on the "replied_to_username" field.
func RepliedToUsernameLTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldRepliedToUsername, v))
}

// RepliedToUsernameContains applies the Contains predicate on the "replied_to_username" field.
func RepliedToUsernameContains(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContains(FieldRepliedToUsername, v))
}

// RepliedToUsernameHasPrefix applies the HasPrefix predicate on the "replied_to_username" field.
func RepliedToUsernameHasPrefix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasPrefix(FieldRepliedToUsername, v))
}

// RepliedToUsernameHasSuffix applies the HasSuffix predicate on the "replied_to_username" field.
func RepliedToUsernameHasSuffix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasSuffix(FieldRepliedToUsername, v))
}

// RepliedToUsernameEqualFold applies the EqualFold predicate on the "replied_to_username" field.
func RepliedToUsernameEqualFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEqualFold(FieldRepliedToUsername, v))
}

// RepliedToUsernameContainsFold applies the ContainsFold predicate on the "replied_to_username" field.
func RepliedToUsernameContainsFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContainsFold(FieldRepliedToUsername, v))
}

// RepliedToTextEQ applies the EQ predicate on the "replied_to_text" field.
func RepliedToTextEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldRepliedToText, v))
}

// RepliedToTextNEQ applies the NEQ predicate on the "replied_to_text" field.
func RepliedToTextNEQ(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldRepliedToText, v))
}

// RepliedToTextIn applies the In predicate on the "replied_to_text" field.
func RepliedToTextIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldRepliedToText, vs...))
}

// RepliedToTextNotIn applies the NotIn predicate on the "replied_to_text" field.
func RepliedToTextNotIn(vs ...string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldRepliedToText, vs...))
}

// RepliedToTextGT applies the GT predicate on the "replied_to_text" field.
func RepliedToTextGT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldRepliedToText, v))
}

// RepliedToTextGTE applies the GTE predicate on the "replied_to_text" field.
func RepliedToTextGTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldRepliedToText, v))
}

// RepliedToTextLT applies the LT predicate on the "replied_to_text" field.
func RepliedToTextLT(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldRepliedToText, v))
}

// RepliedToTextLTE applies the LTE predicate on the "replied_to_text" field.
func RepliedToTextLTE(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldRepliedToText, v))
}

// RepliedToTextContains applies the Contains predicate on the "replied_to_text" field.
func RepliedToTextContains(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContains(FieldRepliedToText, v))
}

// RepliedToTextHasPrefix applies the HasPrefix predicate on the "replied_to_text" field.
func RepliedToTextHasPrefix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasPrefix(FieldRepliedToText, v))
}

// RepliedToTextHasSuffix applies the HasSuffix predicate on the "replied_to_text" field.
func RepliedToTextHasSuffix(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldHasSuffix(FieldRepliedToText, v))
}

// RepliedToTextEqualFold applies the EqualFold predicate on the "replied_to_text" field.
func RepliedToTextEqualFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEqualFold(FieldRepliedToText, v))
}

// RepliedToTextContainsFold applies the ContainsFold predicate on the "replied_to_text" field.
func RepliedToTextContainsFold(v string) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldContainsFold(FieldRepliedToText, v))
}

// ChattedAtEQ applies the EQ predicate on the "chatted_at" field.
func ChattedAtEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldChattedAt, v))
}

// ChattedAtNEQ applies the NEQ predicate on the "chatted_at" field.
func ChattedAtNEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldChattedAt, v))
}

// ChattedAtIn applies the In predicate on the "chatted_at" field.
func ChattedAtIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldChattedAt, vs...))
}

// ChattedAtNotIn applies the NotIn predicate on the "chatted_at" field.
func ChattedAtNotIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldChattedAt, vs...))
}

// ChattedAtGT applies the GT predicate on the "chatted_at" field.
func ChattedAtGT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldChattedAt, v))
}

// ChattedAtGTE applies the GTE predicate on the "chatted_at" field.
func ChattedAtGTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldChattedAt, v))
}

// ChattedAtLT applies the LT predicate on the "chatted_at" field.
func ChattedAtLT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldChattedAt, v))
}

// ChattedAtLTE applies the LTE predicate on the "chatted_at" field.
func ChattedAtLTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldChattedAt, v))
}

// EmbeddedEQ applies the EQ predicate on the "embedded" field.
func EmbeddedEQ(v bool) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldEmbedded, v))
}

// EmbeddedNEQ applies the NEQ predicate on the "embedded" field.
func EmbeddedNEQ(v bool) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldEmbedded, v))
}

// FromPlatformEQ applies the EQ predicate on the "from_platform" field.
func FromPlatformEQ(v int) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldFromPlatform, v))
}

// FromPlatformNEQ applies the NEQ predicate on the "from_platform" field.
func FromPlatformNEQ(v int) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldFromPlatform, v))
}

// FromPlatformIn applies the In predicate on the "from_platform" field.
func FromPlatformIn(vs ...int) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldFromPlatform, vs...))
}

// FromPlatformNotIn applies the NotIn predicate on the "from_platform" field.
func FromPlatformNotIn(vs ...int) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldFromPlatform, vs...))
}

// FromPlatformGT applies the GT predicate on the "from_platform" field.
func FromPlatformGT(v int) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldFromPlatform, v))
}

// FromPlatformGTE applies the GTE predicate on the "from_platform" field.
func FromPlatformGTE(v int) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldFromPlatform, v))
}

// FromPlatformLT applies the LT predicate on the "from_platform" field.
func FromPlatformLT(v int) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldFromPlatform, v))
}

// FromPlatformLTE applies the LTE predicate on the "from_platform" field.
func FromPlatformLTE(v int) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldFromPlatform, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.ChatHistories {
	return predicate.ChatHistories(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChatHistories) predicate.ChatHistories {
	return predicate.ChatHistories(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChatHistories) predicate.ChatHistories {
	return predicate.ChatHistories(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChatHistories) predicate.ChatHistories {
	return predicate.ChatHistories(func(s *sql.Selector) {
		p(s.Not())
	})
}

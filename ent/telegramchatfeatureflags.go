// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/telegramchatfeatureflags"
)

// TelegramChatFeatureFlags is the model entity for the TelegramChatFeatureFlags schema.
type TelegramChatFeatureFlags struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID int64 `json:"chat_id,omitempty"`
	// ChatType holds the value of the "chat_type" field.
	ChatType string `json:"chat_type,omitempty"`
	// FeatureChatHistoriesRecap holds the value of the "feature_chat_histories_recap" field.
	FeatureChatHistoriesRecap bool `json:"feature_chat_histories_recap,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TelegramChatFeatureFlags) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case telegramchatfeatureflags.FieldFeatureChatHistoriesRecap:
			values[i] = new(sql.NullBool)
		case telegramchatfeatureflags.FieldChatID, telegramchatfeatureflags.FieldCreatedAt, telegramchatfeatureflags.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case telegramchatfeatureflags.FieldChatType:
			values[i] = new(sql.NullString)
		case telegramchatfeatureflags.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TelegramChatFeatureFlags fields.
func (tcff *TelegramChatFeatureFlags) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telegramchatfeatureflags.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tcff.ID = *value
			}
		case telegramchatfeatureflags.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				tcff.ChatID = value.Int64
			}
		case telegramchatfeatureflags.FieldChatType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chat_type", values[i])
			} else if value.Valid {
				tcff.ChatType = value.String
			}
		case telegramchatfeatureflags.FieldFeatureChatHistoriesRecap:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field feature_chat_histories_recap", values[i])
			} else if value.Valid {
				tcff.FeatureChatHistoriesRecap = value.Bool
			}
		case telegramchatfeatureflags.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tcff.CreatedAt = value.Int64
			}
		case telegramchatfeatureflags.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tcff.UpdatedAt = value.Int64
			}
		default:
			tcff.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TelegramChatFeatureFlags.
// This includes values selected through modifiers, order, etc.
func (tcff *TelegramChatFeatureFlags) Value(name string) (ent.Value, error) {
	return tcff.selectValues.Get(name)
}

// Update returns a builder for updating this TelegramChatFeatureFlags.
// Note that you need to call TelegramChatFeatureFlags.Unwrap() before calling this method if this TelegramChatFeatureFlags
// was returned from a transaction, and the transaction was committed or rolled back.
func (tcff *TelegramChatFeatureFlags) Update() *TelegramChatFeatureFlagsUpdateOne {
	return NewTelegramChatFeatureFlagsClient(tcff.config).UpdateOne(tcff)
}

// Unwrap unwraps the TelegramChatFeatureFlags entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tcff *TelegramChatFeatureFlags) Unwrap() *TelegramChatFeatureFlags {
	_tx, ok := tcff.config.driver.(*txDriver)
	if !ok {
		panic("ent: TelegramChatFeatureFlags is not a transactional entity")
	}
	tcff.config.driver = _tx.drv
	return tcff
}

// String implements the fmt.Stringer.
func (tcff *TelegramChatFeatureFlags) String() string {
	var builder strings.Builder
	builder.WriteString("TelegramChatFeatureFlags(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tcff.ID))
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", tcff.ChatID))
	builder.WriteString(", ")
	builder.WriteString("chat_type=")
	builder.WriteString(tcff.ChatType)
	builder.WriteString(", ")
	builder.WriteString("feature_chat_histories_recap=")
	builder.WriteString(fmt.Sprintf("%v", tcff.FeatureChatHistoriesRecap))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tcff.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tcff.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// TelegramChatFeatureFlagsSlice is a parsable slice of TelegramChatFeatureFlags.
type TelegramChatFeatureFlagsSlice []*TelegramChatFeatureFlags

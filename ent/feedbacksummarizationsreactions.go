// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/feedbacksummarizationsreactions"
)

// FeedbackSummarizationsReactions is the model entity for the FeedbackSummarizationsReactions schema.
type FeedbackSummarizationsReactions struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID int64 `json:"chat_id,omitempty"`
	// LogID holds the value of the "log_id" field.
	LogID uuid.UUID `json:"log_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// Type holds the value of the "type" field.
	Type feedbacksummarizationsreactions.Type `json:"type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeedbackSummarizationsReactions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feedbacksummarizationsreactions.FieldChatID, feedbacksummarizationsreactions.FieldUserID, feedbacksummarizationsreactions.FieldCreatedAt, feedbacksummarizationsreactions.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case feedbacksummarizationsreactions.FieldType:
			values[i] = new(sql.NullString)
		case feedbacksummarizationsreactions.FieldID, feedbacksummarizationsreactions.FieldLogID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeedbackSummarizationsReactions fields.
func (fsr *FeedbackSummarizationsReactions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feedbacksummarizationsreactions.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fsr.ID = *value
			}
		case feedbacksummarizationsreactions.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				fsr.ChatID = value.Int64
			}
		case feedbacksummarizationsreactions.FieldLogID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field log_id", values[i])
			} else if value != nil {
				fsr.LogID = *value
			}
		case feedbacksummarizationsreactions.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				fsr.UserID = value.Int64
			}
		case feedbacksummarizationsreactions.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				fsr.Type = feedbacksummarizationsreactions.Type(value.String)
			}
		case feedbacksummarizationsreactions.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fsr.CreatedAt = value.Int64
			}
		case feedbacksummarizationsreactions.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fsr.UpdatedAt = value.Int64
			}
		default:
			fsr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FeedbackSummarizationsReactions.
// This includes values selected through modifiers, order, etc.
func (fsr *FeedbackSummarizationsReactions) Value(name string) (ent.Value, error) {
	return fsr.selectValues.Get(name)
}

// Update returns a builder for updating this FeedbackSummarizationsReactions.
// Note that you need to call FeedbackSummarizationsReactions.Unwrap() before calling this method if this FeedbackSummarizationsReactions
// was returned from a transaction, and the transaction was committed or rolled back.
func (fsr *FeedbackSummarizationsReactions) Update() *FeedbackSummarizationsReactionsUpdateOne {
	return NewFeedbackSummarizationsReactionsClient(fsr.config).UpdateOne(fsr)
}

// Unwrap unwraps the FeedbackSummarizationsReactions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fsr *FeedbackSummarizationsReactions) Unwrap() *FeedbackSummarizationsReactions {
	_tx, ok := fsr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeedbackSummarizationsReactions is not a transactional entity")
	}
	fsr.config.driver = _tx.drv
	return fsr
}

// String implements the fmt.Stringer.
func (fsr *FeedbackSummarizationsReactions) String() string {
	var builder strings.Builder
	builder.WriteString("FeedbackSummarizationsReactions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fsr.ID))
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", fsr.ChatID))
	builder.WriteString(", ")
	builder.WriteString("log_id=")
	builder.WriteString(fmt.Sprintf("%v", fsr.LogID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", fsr.UserID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", fsr.Type))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", fsr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", fsr.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// FeedbackSummarizationsReactionsSlice is a parsable slice of FeedbackSummarizationsReactions.
type FeedbackSummarizationsReactionsSlice []*FeedbackSummarizationsReactions

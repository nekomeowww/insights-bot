// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/telegramchatfeatureflags"
)

// TelegramChatFeatureFlagsDelete is the builder for deleting a TelegramChatFeatureFlags entity.
type TelegramChatFeatureFlagsDelete struct {
	config
	hooks    []Hook
	mutation *TelegramChatFeatureFlagsMutation
}

// Where appends a list predicates to the TelegramChatFeatureFlagsDelete builder.
func (tcffd *TelegramChatFeatureFlagsDelete) Where(ps ...predicate.TelegramChatFeatureFlags) *TelegramChatFeatureFlagsDelete {
	tcffd.mutation.Where(ps...)
	return tcffd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tcffd *TelegramChatFeatureFlagsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tcffd.sqlExec, tcffd.mutation, tcffd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tcffd *TelegramChatFeatureFlagsDelete) ExecX(ctx context.Context) int {
	n, err := tcffd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tcffd *TelegramChatFeatureFlagsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(telegramchatfeatureflags.Table, sqlgraph.NewFieldSpec(telegramchatfeatureflags.FieldID, field.TypeUUID))
	_spec.Node.Schema = tcffd.schemaConfig.TelegramChatFeatureFlags
	ctx = internal.NewSchemaConfigContext(ctx, tcffd.schemaConfig)
	if ps := tcffd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tcffd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tcffd.mutation.done = true
	return affected, err
}

// TelegramChatFeatureFlagsDeleteOne is the builder for deleting a single TelegramChatFeatureFlags entity.
type TelegramChatFeatureFlagsDeleteOne struct {
	tcffd *TelegramChatFeatureFlagsDelete
}

// Where appends a list predicates to the TelegramChatFeatureFlagsDelete builder.
func (tcffdo *TelegramChatFeatureFlagsDeleteOne) Where(ps ...predicate.TelegramChatFeatureFlags) *TelegramChatFeatureFlagsDeleteOne {
	tcffdo.tcffd.mutation.Where(ps...)
	return tcffdo
}

// Exec executes the deletion query.
func (tcffdo *TelegramChatFeatureFlagsDeleteOne) Exec(ctx context.Context) error {
	n, err := tcffdo.tcffd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{telegramchatfeatureflags.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tcffdo *TelegramChatFeatureFlagsDeleteOne) ExecX(ctx context.Context) {
	if err := tcffdo.Exec(ctx); err != nil {
		panic(err)
	}
}

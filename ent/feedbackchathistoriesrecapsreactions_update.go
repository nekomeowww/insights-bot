// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/feedbackchathistoriesrecapsreactions"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
)

// FeedbackChatHistoriesRecapsReactionsUpdate is the builder for updating FeedbackChatHistoriesRecapsReactions entities.
type FeedbackChatHistoriesRecapsReactionsUpdate struct {
	config
	hooks    []Hook
	mutation *FeedbackChatHistoriesRecapsReactionsMutation
}

// Where appends a list predicates to the FeedbackChatHistoriesRecapsReactionsUpdate builder.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) Where(ps ...predicate.FeedbackChatHistoriesRecapsReactions) *FeedbackChatHistoriesRecapsReactionsUpdate {
	fchrru.mutation.Where(ps...)
	return fchrru
}

// SetChatID sets the "chat_id" field.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) SetChatID(i int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	fchrru.mutation.ResetChatID()
	fchrru.mutation.SetChatID(i)
	return fchrru
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) SetNillableChatID(i *int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	if i != nil {
		fchrru.SetChatID(*i)
	}
	return fchrru
}

// AddChatID adds i to the "chat_id" field.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) AddChatID(i int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	fchrru.mutation.AddChatID(i)
	return fchrru
}

// SetUserID sets the "user_id" field.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) SetUserID(i int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	fchrru.mutation.ResetUserID()
	fchrru.mutation.SetUserID(i)
	return fchrru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) SetNillableUserID(i *int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	if i != nil {
		fchrru.SetUserID(*i)
	}
	return fchrru
}

// AddUserID adds i to the "user_id" field.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) AddUserID(i int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	fchrru.mutation.AddUserID(i)
	return fchrru
}

// SetType sets the "type" field.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) SetType(f feedbackchathistoriesrecapsreactions.Type) *FeedbackChatHistoriesRecapsReactionsUpdate {
	fchrru.mutation.SetType(f)
	return fchrru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) SetNillableType(f *feedbackchathistoriesrecapsreactions.Type) *FeedbackChatHistoriesRecapsReactionsUpdate {
	if f != nil {
		fchrru.SetType(*f)
	}
	return fchrru
}

// SetCreatedAt sets the "created_at" field.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) SetCreatedAt(i int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	fchrru.mutation.ResetCreatedAt()
	fchrru.mutation.SetCreatedAt(i)
	return fchrru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) SetNillableCreatedAt(i *int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	if i != nil {
		fchrru.SetCreatedAt(*i)
	}
	return fchrru
}

// AddCreatedAt adds i to the "created_at" field.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) AddCreatedAt(i int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	fchrru.mutation.AddCreatedAt(i)
	return fchrru
}

// SetUpdatedAt sets the "updated_at" field.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) SetUpdatedAt(i int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	fchrru.mutation.ResetUpdatedAt()
	fchrru.mutation.SetUpdatedAt(i)
	return fchrru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) SetNillableUpdatedAt(i *int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	if i != nil {
		fchrru.SetUpdatedAt(*i)
	}
	return fchrru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) AddUpdatedAt(i int64) *FeedbackChatHistoriesRecapsReactionsUpdate {
	fchrru.mutation.AddUpdatedAt(i)
	return fchrru
}

// Mutation returns the FeedbackChatHistoriesRecapsReactionsMutation object of the builder.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) Mutation() *FeedbackChatHistoriesRecapsReactionsMutation {
	return fchrru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fchrru.sqlSave, fchrru.mutation, fchrru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) SaveX(ctx context.Context) int {
	affected, err := fchrru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) Exec(ctx context.Context) error {
	_, err := fchrru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) ExecX(ctx context.Context) {
	if err := fchrru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) check() error {
	if v, ok := fchrru.mutation.GetType(); ok {
		if err := feedbackchathistoriesrecapsreactions.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "FeedbackChatHistoriesRecapsReactions.type": %w`, err)}
		}
	}
	return nil
}

func (fchrru *FeedbackChatHistoriesRecapsReactionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fchrru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedbackchathistoriesrecapsreactions.Table, feedbackchathistoriesrecapsreactions.Columns, sqlgraph.NewFieldSpec(feedbackchathistoriesrecapsreactions.FieldID, field.TypeUUID))
	if ps := fchrru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fchrru.mutation.ChatID(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := fchrru.mutation.AddedChatID(); ok {
		_spec.AddField(feedbackchathistoriesrecapsreactions.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := fchrru.mutation.UserID(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := fchrru.mutation.AddedUserID(); ok {
		_spec.AddField(feedbackchathistoriesrecapsreactions.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := fchrru.mutation.GetType(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldType, field.TypeEnum, value)
	}
	if value, ok := fchrru.mutation.CreatedAt(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := fchrru.mutation.AddedCreatedAt(); ok {
		_spec.AddField(feedbackchathistoriesrecapsreactions.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := fchrru.mutation.UpdatedAt(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := fchrru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(feedbackchathistoriesrecapsreactions.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = fchrru.schemaConfig.FeedbackChatHistoriesRecapsReactions
	ctx = internal.NewSchemaConfigContext(ctx, fchrru.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, fchrru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedbackchathistoriesrecapsreactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fchrru.mutation.done = true
	return n, nil
}

// FeedbackChatHistoriesRecapsReactionsUpdateOne is the builder for updating a single FeedbackChatHistoriesRecapsReactions entity.
type FeedbackChatHistoriesRecapsReactionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedbackChatHistoriesRecapsReactionsMutation
}

// SetChatID sets the "chat_id" field.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) SetChatID(i int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	fchrruo.mutation.ResetChatID()
	fchrruo.mutation.SetChatID(i)
	return fchrruo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) SetNillableChatID(i *int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	if i != nil {
		fchrruo.SetChatID(*i)
	}
	return fchrruo
}

// AddChatID adds i to the "chat_id" field.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) AddChatID(i int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	fchrruo.mutation.AddChatID(i)
	return fchrruo
}

// SetUserID sets the "user_id" field.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) SetUserID(i int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	fchrruo.mutation.ResetUserID()
	fchrruo.mutation.SetUserID(i)
	return fchrruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) SetNillableUserID(i *int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	if i != nil {
		fchrruo.SetUserID(*i)
	}
	return fchrruo
}

// AddUserID adds i to the "user_id" field.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) AddUserID(i int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	fchrruo.mutation.AddUserID(i)
	return fchrruo
}

// SetType sets the "type" field.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) SetType(f feedbackchathistoriesrecapsreactions.Type) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	fchrruo.mutation.SetType(f)
	return fchrruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) SetNillableType(f *feedbackchathistoriesrecapsreactions.Type) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	if f != nil {
		fchrruo.SetType(*f)
	}
	return fchrruo
}

// SetCreatedAt sets the "created_at" field.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) SetCreatedAt(i int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	fchrruo.mutation.ResetCreatedAt()
	fchrruo.mutation.SetCreatedAt(i)
	return fchrruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) SetNillableCreatedAt(i *int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	if i != nil {
		fchrruo.SetCreatedAt(*i)
	}
	return fchrruo
}

// AddCreatedAt adds i to the "created_at" field.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) AddCreatedAt(i int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	fchrruo.mutation.AddCreatedAt(i)
	return fchrruo
}

// SetUpdatedAt sets the "updated_at" field.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) SetUpdatedAt(i int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	fchrruo.mutation.ResetUpdatedAt()
	fchrruo.mutation.SetUpdatedAt(i)
	return fchrruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) SetNillableUpdatedAt(i *int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	if i != nil {
		fchrruo.SetUpdatedAt(*i)
	}
	return fchrruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) AddUpdatedAt(i int64) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	fchrruo.mutation.AddUpdatedAt(i)
	return fchrruo
}

// Mutation returns the FeedbackChatHistoriesRecapsReactionsMutation object of the builder.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) Mutation() *FeedbackChatHistoriesRecapsReactionsMutation {
	return fchrruo.mutation
}

// Where appends a list predicates to the FeedbackChatHistoriesRecapsReactionsUpdate builder.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) Where(ps ...predicate.FeedbackChatHistoriesRecapsReactions) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	fchrruo.mutation.Where(ps...)
	return fchrruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) Select(field string, fields ...string) *FeedbackChatHistoriesRecapsReactionsUpdateOne {
	fchrruo.fields = append([]string{field}, fields...)
	return fchrruo
}

// Save executes the query and returns the updated FeedbackChatHistoriesRecapsReactions entity.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) Save(ctx context.Context) (*FeedbackChatHistoriesRecapsReactions, error) {
	return withHooks(ctx, fchrruo.sqlSave, fchrruo.mutation, fchrruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) SaveX(ctx context.Context) *FeedbackChatHistoriesRecapsReactions {
	node, err := fchrruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) Exec(ctx context.Context) error {
	_, err := fchrruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) ExecX(ctx context.Context) {
	if err := fchrruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) check() error {
	if v, ok := fchrruo.mutation.GetType(); ok {
		if err := feedbackchathistoriesrecapsreactions.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "FeedbackChatHistoriesRecapsReactions.type": %w`, err)}
		}
	}
	return nil
}

func (fchrruo *FeedbackChatHistoriesRecapsReactionsUpdateOne) sqlSave(ctx context.Context) (_node *FeedbackChatHistoriesRecapsReactions, err error) {
	if err := fchrruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedbackchathistoriesrecapsreactions.Table, feedbackchathistoriesrecapsreactions.Columns, sqlgraph.NewFieldSpec(feedbackchathistoriesrecapsreactions.FieldID, field.TypeUUID))
	id, ok := fchrruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeedbackChatHistoriesRecapsReactions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fchrruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedbackchathistoriesrecapsreactions.FieldID)
		for _, f := range fields {
			if !feedbackchathistoriesrecapsreactions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feedbackchathistoriesrecapsreactions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fchrruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fchrruo.mutation.ChatID(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := fchrruo.mutation.AddedChatID(); ok {
		_spec.AddField(feedbackchathistoriesrecapsreactions.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := fchrruo.mutation.UserID(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := fchrruo.mutation.AddedUserID(); ok {
		_spec.AddField(feedbackchathistoriesrecapsreactions.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := fchrruo.mutation.GetType(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldType, field.TypeEnum, value)
	}
	if value, ok := fchrruo.mutation.CreatedAt(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := fchrruo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(feedbackchathistoriesrecapsreactions.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := fchrruo.mutation.UpdatedAt(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := fchrruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(feedbackchathistoriesrecapsreactions.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = fchrruo.schemaConfig.FeedbackChatHistoriesRecapsReactions
	ctx = internal.NewSchemaConfigContext(ctx, fchrruo.schemaConfig)
	_node = &FeedbackChatHistoriesRecapsReactions{config: fchrruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fchrruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedbackchathistoriesrecapsreactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fchrruo.mutation.done = true
	return _node, nil
}

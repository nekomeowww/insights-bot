// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/sentmessages"
)

// SentMessagesUpdate is the builder for updating SentMessages entities.
type SentMessagesUpdate struct {
	config
	hooks    []Hook
	mutation *SentMessagesMutation
}

// Where appends a list predicates to the SentMessagesUpdate builder.
func (smu *SentMessagesUpdate) Where(ps ...predicate.SentMessages) *SentMessagesUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetChatID sets the "chat_id" field.
func (smu *SentMessagesUpdate) SetChatID(i int64) *SentMessagesUpdate {
	smu.mutation.ResetChatID()
	smu.mutation.SetChatID(i)
	return smu
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (smu *SentMessagesUpdate) SetNillableChatID(i *int64) *SentMessagesUpdate {
	if i != nil {
		smu.SetChatID(*i)
	}
	return smu
}

// AddChatID adds i to the "chat_id" field.
func (smu *SentMessagesUpdate) AddChatID(i int64) *SentMessagesUpdate {
	smu.mutation.AddChatID(i)
	return smu
}

// SetMessageID sets the "message_id" field.
func (smu *SentMessagesUpdate) SetMessageID(i int) *SentMessagesUpdate {
	smu.mutation.ResetMessageID()
	smu.mutation.SetMessageID(i)
	return smu
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (smu *SentMessagesUpdate) SetNillableMessageID(i *int) *SentMessagesUpdate {
	if i != nil {
		smu.SetMessageID(*i)
	}
	return smu
}

// AddMessageID adds i to the "message_id" field.
func (smu *SentMessagesUpdate) AddMessageID(i int) *SentMessagesUpdate {
	smu.mutation.AddMessageID(i)
	return smu
}

// SetText sets the "text" field.
func (smu *SentMessagesUpdate) SetText(s string) *SentMessagesUpdate {
	smu.mutation.SetText(s)
	return smu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (smu *SentMessagesUpdate) SetNillableText(s *string) *SentMessagesUpdate {
	if s != nil {
		smu.SetText(*s)
	}
	return smu
}

// SetIsPinned sets the "is_pinned" field.
func (smu *SentMessagesUpdate) SetIsPinned(b bool) *SentMessagesUpdate {
	smu.mutation.SetIsPinned(b)
	return smu
}

// SetNillableIsPinned sets the "is_pinned" field if the given value is not nil.
func (smu *SentMessagesUpdate) SetNillableIsPinned(b *bool) *SentMessagesUpdate {
	if b != nil {
		smu.SetIsPinned(*b)
	}
	return smu
}

// SetFromPlatform sets the "from_platform" field.
func (smu *SentMessagesUpdate) SetFromPlatform(i int) *SentMessagesUpdate {
	smu.mutation.ResetFromPlatform()
	smu.mutation.SetFromPlatform(i)
	return smu
}

// SetNillableFromPlatform sets the "from_platform" field if the given value is not nil.
func (smu *SentMessagesUpdate) SetNillableFromPlatform(i *int) *SentMessagesUpdate {
	if i != nil {
		smu.SetFromPlatform(*i)
	}
	return smu
}

// AddFromPlatform adds i to the "from_platform" field.
func (smu *SentMessagesUpdate) AddFromPlatform(i int) *SentMessagesUpdate {
	smu.mutation.AddFromPlatform(i)
	return smu
}

// SetMessageType sets the "message_type" field.
func (smu *SentMessagesUpdate) SetMessageType(i int) *SentMessagesUpdate {
	smu.mutation.ResetMessageType()
	smu.mutation.SetMessageType(i)
	return smu
}

// SetNillableMessageType sets the "message_type" field if the given value is not nil.
func (smu *SentMessagesUpdate) SetNillableMessageType(i *int) *SentMessagesUpdate {
	if i != nil {
		smu.SetMessageType(*i)
	}
	return smu
}

// AddMessageType adds i to the "message_type" field.
func (smu *SentMessagesUpdate) AddMessageType(i int) *SentMessagesUpdate {
	smu.mutation.AddMessageType(i)
	return smu
}

// SetCreatedAt sets the "created_at" field.
func (smu *SentMessagesUpdate) SetCreatedAt(i int64) *SentMessagesUpdate {
	smu.mutation.ResetCreatedAt()
	smu.mutation.SetCreatedAt(i)
	return smu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smu *SentMessagesUpdate) SetNillableCreatedAt(i *int64) *SentMessagesUpdate {
	if i != nil {
		smu.SetCreatedAt(*i)
	}
	return smu
}

// AddCreatedAt adds i to the "created_at" field.
func (smu *SentMessagesUpdate) AddCreatedAt(i int64) *SentMessagesUpdate {
	smu.mutation.AddCreatedAt(i)
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *SentMessagesUpdate) SetUpdatedAt(i int64) *SentMessagesUpdate {
	smu.mutation.ResetUpdatedAt()
	smu.mutation.SetUpdatedAt(i)
	return smu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smu *SentMessagesUpdate) SetNillableUpdatedAt(i *int64) *SentMessagesUpdate {
	if i != nil {
		smu.SetUpdatedAt(*i)
	}
	return smu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (smu *SentMessagesUpdate) AddUpdatedAt(i int64) *SentMessagesUpdate {
	smu.mutation.AddUpdatedAt(i)
	return smu
}

// Mutation returns the SentMessagesMutation object of the builder.
func (smu *SentMessagesUpdate) Mutation() *SentMessagesMutation {
	return smu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SentMessagesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SentMessagesUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SentMessagesUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SentMessagesUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (smu *SentMessagesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sentmessages.Table, sentmessages.Columns, sqlgraph.NewFieldSpec(sentmessages.FieldID, field.TypeUUID))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.ChatID(); ok {
		_spec.SetField(sentmessages.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedChatID(); ok {
		_spec.AddField(sentmessages.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.MessageID(); ok {
		_spec.SetField(sentmessages.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := smu.mutation.AddedMessageID(); ok {
		_spec.AddField(sentmessages.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := smu.mutation.Text(); ok {
		_spec.SetField(sentmessages.FieldText, field.TypeString, value)
	}
	if value, ok := smu.mutation.IsPinned(); ok {
		_spec.SetField(sentmessages.FieldIsPinned, field.TypeBool, value)
	}
	if value, ok := smu.mutation.FromPlatform(); ok {
		_spec.SetField(sentmessages.FieldFromPlatform, field.TypeInt, value)
	}
	if value, ok := smu.mutation.AddedFromPlatform(); ok {
		_spec.AddField(sentmessages.FieldFromPlatform, field.TypeInt, value)
	}
	if value, ok := smu.mutation.MessageType(); ok {
		_spec.SetField(sentmessages.FieldMessageType, field.TypeInt, value)
	}
	if value, ok := smu.mutation.AddedMessageType(); ok {
		_spec.AddField(sentmessages.FieldMessageType, field.TypeInt, value)
	}
	if value, ok := smu.mutation.CreatedAt(); ok {
		_spec.SetField(sentmessages.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(sentmessages.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(sentmessages.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(sentmessages.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = smu.schemaConfig.SentMessages
	ctx = internal.NewSchemaConfigContext(ctx, smu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentmessages.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// SentMessagesUpdateOne is the builder for updating a single SentMessages entity.
type SentMessagesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SentMessagesMutation
}

// SetChatID sets the "chat_id" field.
func (smuo *SentMessagesUpdateOne) SetChatID(i int64) *SentMessagesUpdateOne {
	smuo.mutation.ResetChatID()
	smuo.mutation.SetChatID(i)
	return smuo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (smuo *SentMessagesUpdateOne) SetNillableChatID(i *int64) *SentMessagesUpdateOne {
	if i != nil {
		smuo.SetChatID(*i)
	}
	return smuo
}

// AddChatID adds i to the "chat_id" field.
func (smuo *SentMessagesUpdateOne) AddChatID(i int64) *SentMessagesUpdateOne {
	smuo.mutation.AddChatID(i)
	return smuo
}

// SetMessageID sets the "message_id" field.
func (smuo *SentMessagesUpdateOne) SetMessageID(i int) *SentMessagesUpdateOne {
	smuo.mutation.ResetMessageID()
	smuo.mutation.SetMessageID(i)
	return smuo
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (smuo *SentMessagesUpdateOne) SetNillableMessageID(i *int) *SentMessagesUpdateOne {
	if i != nil {
		smuo.SetMessageID(*i)
	}
	return smuo
}

// AddMessageID adds i to the "message_id" field.
func (smuo *SentMessagesUpdateOne) AddMessageID(i int) *SentMessagesUpdateOne {
	smuo.mutation.AddMessageID(i)
	return smuo
}

// SetText sets the "text" field.
func (smuo *SentMessagesUpdateOne) SetText(s string) *SentMessagesUpdateOne {
	smuo.mutation.SetText(s)
	return smuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (smuo *SentMessagesUpdateOne) SetNillableText(s *string) *SentMessagesUpdateOne {
	if s != nil {
		smuo.SetText(*s)
	}
	return smuo
}

// SetIsPinned sets the "is_pinned" field.
func (smuo *SentMessagesUpdateOne) SetIsPinned(b bool) *SentMessagesUpdateOne {
	smuo.mutation.SetIsPinned(b)
	return smuo
}

// SetNillableIsPinned sets the "is_pinned" field if the given value is not nil.
func (smuo *SentMessagesUpdateOne) SetNillableIsPinned(b *bool) *SentMessagesUpdateOne {
	if b != nil {
		smuo.SetIsPinned(*b)
	}
	return smuo
}

// SetFromPlatform sets the "from_platform" field.
func (smuo *SentMessagesUpdateOne) SetFromPlatform(i int) *SentMessagesUpdateOne {
	smuo.mutation.ResetFromPlatform()
	smuo.mutation.SetFromPlatform(i)
	return smuo
}

// SetNillableFromPlatform sets the "from_platform" field if the given value is not nil.
func (smuo *SentMessagesUpdateOne) SetNillableFromPlatform(i *int) *SentMessagesUpdateOne {
	if i != nil {
		smuo.SetFromPlatform(*i)
	}
	return smuo
}

// AddFromPlatform adds i to the "from_platform" field.
func (smuo *SentMessagesUpdateOne) AddFromPlatform(i int) *SentMessagesUpdateOne {
	smuo.mutation.AddFromPlatform(i)
	return smuo
}

// SetMessageType sets the "message_type" field.
func (smuo *SentMessagesUpdateOne) SetMessageType(i int) *SentMessagesUpdateOne {
	smuo.mutation.ResetMessageType()
	smuo.mutation.SetMessageType(i)
	return smuo
}

// SetNillableMessageType sets the "message_type" field if the given value is not nil.
func (smuo *SentMessagesUpdateOne) SetNillableMessageType(i *int) *SentMessagesUpdateOne {
	if i != nil {
		smuo.SetMessageType(*i)
	}
	return smuo
}

// AddMessageType adds i to the "message_type" field.
func (smuo *SentMessagesUpdateOne) AddMessageType(i int) *SentMessagesUpdateOne {
	smuo.mutation.AddMessageType(i)
	return smuo
}

// SetCreatedAt sets the "created_at" field.
func (smuo *SentMessagesUpdateOne) SetCreatedAt(i int64) *SentMessagesUpdateOne {
	smuo.mutation.ResetCreatedAt()
	smuo.mutation.SetCreatedAt(i)
	return smuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smuo *SentMessagesUpdateOne) SetNillableCreatedAt(i *int64) *SentMessagesUpdateOne {
	if i != nil {
		smuo.SetCreatedAt(*i)
	}
	return smuo
}

// AddCreatedAt adds i to the "created_at" field.
func (smuo *SentMessagesUpdateOne) AddCreatedAt(i int64) *SentMessagesUpdateOne {
	smuo.mutation.AddCreatedAt(i)
	return smuo
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *SentMessagesUpdateOne) SetUpdatedAt(i int64) *SentMessagesUpdateOne {
	smuo.mutation.ResetUpdatedAt()
	smuo.mutation.SetUpdatedAt(i)
	return smuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smuo *SentMessagesUpdateOne) SetNillableUpdatedAt(i *int64) *SentMessagesUpdateOne {
	if i != nil {
		smuo.SetUpdatedAt(*i)
	}
	return smuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (smuo *SentMessagesUpdateOne) AddUpdatedAt(i int64) *SentMessagesUpdateOne {
	smuo.mutation.AddUpdatedAt(i)
	return smuo
}

// Mutation returns the SentMessagesMutation object of the builder.
func (smuo *SentMessagesUpdateOne) Mutation() *SentMessagesMutation {
	return smuo.mutation
}

// Where appends a list predicates to the SentMessagesUpdate builder.
func (smuo *SentMessagesUpdateOne) Where(ps ...predicate.SentMessages) *SentMessagesUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SentMessagesUpdateOne) Select(field string, fields ...string) *SentMessagesUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SentMessages entity.
func (smuo *SentMessagesUpdateOne) Save(ctx context.Context) (*SentMessages, error) {
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SentMessagesUpdateOne) SaveX(ctx context.Context) *SentMessages {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SentMessagesUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SentMessagesUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (smuo *SentMessagesUpdateOne) sqlSave(ctx context.Context) (_node *SentMessages, err error) {
	_spec := sqlgraph.NewUpdateSpec(sentmessages.Table, sentmessages.Columns, sqlgraph.NewFieldSpec(sentmessages.FieldID, field.TypeUUID))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SentMessages.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sentmessages.FieldID)
		for _, f := range fields {
			if !sentmessages.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sentmessages.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.ChatID(); ok {
		_spec.SetField(sentmessages.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedChatID(); ok {
		_spec.AddField(sentmessages.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.MessageID(); ok {
		_spec.SetField(sentmessages.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.AddedMessageID(); ok {
		_spec.AddField(sentmessages.FieldMessageID, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.Text(); ok {
		_spec.SetField(sentmessages.FieldText, field.TypeString, value)
	}
	if value, ok := smuo.mutation.IsPinned(); ok {
		_spec.SetField(sentmessages.FieldIsPinned, field.TypeBool, value)
	}
	if value, ok := smuo.mutation.FromPlatform(); ok {
		_spec.SetField(sentmessages.FieldFromPlatform, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.AddedFromPlatform(); ok {
		_spec.AddField(sentmessages.FieldFromPlatform, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.MessageType(); ok {
		_spec.SetField(sentmessages.FieldMessageType, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.AddedMessageType(); ok {
		_spec.AddField(sentmessages.FieldMessageType, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.CreatedAt(); ok {
		_spec.SetField(sentmessages.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(sentmessages.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sentmessages.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(sentmessages.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = smuo.schemaConfig.SentMessages
	ctx = internal.NewSchemaConfigContext(ctx, smuo.schemaConfig)
	_node = &SentMessages{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentmessages.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/metricopenaichatcompletiontokenusage"
)

// MetricOpenAIChatCompletionTokenUsage is the model entity for the MetricOpenAIChatCompletionTokenUsage schema.
type MetricOpenAIChatCompletionTokenUsage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PromptOperation holds the value of the "prompt_operation" field.
	PromptOperation string `json:"prompt_operation,omitempty"`
	// PromptCharacterLength holds the value of the "prompt_character_length" field.
	PromptCharacterLength int `json:"prompt_character_length,omitempty"`
	// PromptTokenUsage holds the value of the "prompt_token_usage" field.
	PromptTokenUsage int `json:"prompt_token_usage,omitempty"`
	// CompletionCharacterLength holds the value of the "completion_character_length" field.
	CompletionCharacterLength int `json:"completion_character_length,omitempty"`
	// CompletionTokenUsage holds the value of the "completion_token_usage" field.
	CompletionTokenUsage int `json:"completion_token_usage,omitempty"`
	// TotalTokenUsage holds the value of the "total_token_usage" field.
	TotalTokenUsage int `json:"total_token_usage,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    int64 `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MetricOpenAIChatCompletionTokenUsage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case metricopenaichatcompletiontokenusage.FieldPromptCharacterLength, metricopenaichatcompletiontokenusage.FieldPromptTokenUsage, metricopenaichatcompletiontokenusage.FieldCompletionCharacterLength, metricopenaichatcompletiontokenusage.FieldCompletionTokenUsage, metricopenaichatcompletiontokenusage.FieldTotalTokenUsage, metricopenaichatcompletiontokenusage.FieldCreatedAt:
			values[i] = new(sql.NullInt64)
		case metricopenaichatcompletiontokenusage.FieldPromptOperation:
			values[i] = new(sql.NullString)
		case metricopenaichatcompletiontokenusage.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MetricOpenAIChatCompletionTokenUsage fields.
func (moacctu *MetricOpenAIChatCompletionTokenUsage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metricopenaichatcompletiontokenusage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				moacctu.ID = *value
			}
		case metricopenaichatcompletiontokenusage.FieldPromptOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_operation", values[i])
			} else if value.Valid {
				moacctu.PromptOperation = value.String
			}
		case metricopenaichatcompletiontokenusage.FieldPromptCharacterLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_character_length", values[i])
			} else if value.Valid {
				moacctu.PromptCharacterLength = int(value.Int64)
			}
		case metricopenaichatcompletiontokenusage.FieldPromptTokenUsage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_token_usage", values[i])
			} else if value.Valid {
				moacctu.PromptTokenUsage = int(value.Int64)
			}
		case metricopenaichatcompletiontokenusage.FieldCompletionCharacterLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completion_character_length", values[i])
			} else if value.Valid {
				moacctu.CompletionCharacterLength = int(value.Int64)
			}
		case metricopenaichatcompletiontokenusage.FieldCompletionTokenUsage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completion_token_usage", values[i])
			} else if value.Valid {
				moacctu.CompletionTokenUsage = int(value.Int64)
			}
		case metricopenaichatcompletiontokenusage.FieldTotalTokenUsage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_token_usage", values[i])
			} else if value.Valid {
				moacctu.TotalTokenUsage = int(value.Int64)
			}
		case metricopenaichatcompletiontokenusage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				moacctu.CreatedAt = value.Int64
			}
		default:
			moacctu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MetricOpenAIChatCompletionTokenUsage.
// This includes values selected through modifiers, order, etc.
func (moacctu *MetricOpenAIChatCompletionTokenUsage) Value(name string) (ent.Value, error) {
	return moacctu.selectValues.Get(name)
}

// Update returns a builder for updating this MetricOpenAIChatCompletionTokenUsage.
// Note that you need to call MetricOpenAIChatCompletionTokenUsage.Unwrap() before calling this method if this MetricOpenAIChatCompletionTokenUsage
// was returned from a transaction, and the transaction was committed or rolled back.
func (moacctu *MetricOpenAIChatCompletionTokenUsage) Update() *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	return NewMetricOpenAIChatCompletionTokenUsageClient(moacctu.config).UpdateOne(moacctu)
}

// Unwrap unwraps the MetricOpenAIChatCompletionTokenUsage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (moacctu *MetricOpenAIChatCompletionTokenUsage) Unwrap() *MetricOpenAIChatCompletionTokenUsage {
	_tx, ok := moacctu.config.driver.(*txDriver)
	if !ok {
		panic("ent: MetricOpenAIChatCompletionTokenUsage is not a transactional entity")
	}
	moacctu.config.driver = _tx.drv
	return moacctu
}

// String implements the fmt.Stringer.
func (moacctu *MetricOpenAIChatCompletionTokenUsage) String() string {
	var builder strings.Builder
	builder.WriteString("MetricOpenAIChatCompletionTokenUsage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", moacctu.ID))
	builder.WriteString("prompt_operation=")
	builder.WriteString(moacctu.PromptOperation)
	builder.WriteString(", ")
	builder.WriteString("prompt_character_length=")
	builder.WriteString(fmt.Sprintf("%v", moacctu.PromptCharacterLength))
	builder.WriteString(", ")
	builder.WriteString("prompt_token_usage=")
	builder.WriteString(fmt.Sprintf("%v", moacctu.PromptTokenUsage))
	builder.WriteString(", ")
	builder.WriteString("completion_character_length=")
	builder.WriteString(fmt.Sprintf("%v", moacctu.CompletionCharacterLength))
	builder.WriteString(", ")
	builder.WriteString("completion_token_usage=")
	builder.WriteString(fmt.Sprintf("%v", moacctu.CompletionTokenUsage))
	builder.WriteString(", ")
	builder.WriteString("total_token_usage=")
	builder.WriteString(fmt.Sprintf("%v", moacctu.TotalTokenUsage))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", moacctu.CreatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// MetricOpenAIChatCompletionTokenUsages is a parsable slice of MetricOpenAIChatCompletionTokenUsage.
type MetricOpenAIChatCompletionTokenUsages []*MetricOpenAIChatCompletionTokenUsage

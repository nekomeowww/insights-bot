// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/chathistories"
)

// ChatHistoriesCreate is the builder for creating a ChatHistories entity.
type ChatHistoriesCreate struct {
	config
	mutation *ChatHistoriesMutation
	hooks    []Hook
}

// SetChatID sets the "chat_id" field.
func (chc *ChatHistoriesCreate) SetChatID(i int64) *ChatHistoriesCreate {
	chc.mutation.SetChatID(i)
	return chc
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableChatID(i *int64) *ChatHistoriesCreate {
	if i != nil {
		chc.SetChatID(*i)
	}
	return chc
}

// SetChatTitle sets the "chat_title" field.
func (chc *ChatHistoriesCreate) SetChatTitle(s string) *ChatHistoriesCreate {
	chc.mutation.SetChatTitle(s)
	return chc
}

// SetNillableChatTitle sets the "chat_title" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableChatTitle(s *string) *ChatHistoriesCreate {
	if s != nil {
		chc.SetChatTitle(*s)
	}
	return chc
}

// SetChatType sets the "chat_type" field.
func (chc *ChatHistoriesCreate) SetChatType(s string) *ChatHistoriesCreate {
	chc.mutation.SetChatType(s)
	return chc
}

// SetNillableChatType sets the "chat_type" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableChatType(s *string) *ChatHistoriesCreate {
	if s != nil {
		chc.SetChatType(*s)
	}
	return chc
}

// SetMessageID sets the "message_id" field.
func (chc *ChatHistoriesCreate) SetMessageID(i int64) *ChatHistoriesCreate {
	chc.mutation.SetMessageID(i)
	return chc
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableMessageID(i *int64) *ChatHistoriesCreate {
	if i != nil {
		chc.SetMessageID(*i)
	}
	return chc
}

// SetUserID sets the "user_id" field.
func (chc *ChatHistoriesCreate) SetUserID(i int64) *ChatHistoriesCreate {
	chc.mutation.SetUserID(i)
	return chc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableUserID(i *int64) *ChatHistoriesCreate {
	if i != nil {
		chc.SetUserID(*i)
	}
	return chc
}

// SetUsername sets the "username" field.
func (chc *ChatHistoriesCreate) SetUsername(s string) *ChatHistoriesCreate {
	chc.mutation.SetUsername(s)
	return chc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableUsername(s *string) *ChatHistoriesCreate {
	if s != nil {
		chc.SetUsername(*s)
	}
	return chc
}

// SetFullName sets the "full_name" field.
func (chc *ChatHistoriesCreate) SetFullName(s string) *ChatHistoriesCreate {
	chc.mutation.SetFullName(s)
	return chc
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableFullName(s *string) *ChatHistoriesCreate {
	if s != nil {
		chc.SetFullName(*s)
	}
	return chc
}

// SetText sets the "text" field.
func (chc *ChatHistoriesCreate) SetText(s string) *ChatHistoriesCreate {
	chc.mutation.SetText(s)
	return chc
}

// SetNillableText sets the "text" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableText(s *string) *ChatHistoriesCreate {
	if s != nil {
		chc.SetText(*s)
	}
	return chc
}

// SetRepliedToMessageID sets the "replied_to_message_id" field.
func (chc *ChatHistoriesCreate) SetRepliedToMessageID(i int64) *ChatHistoriesCreate {
	chc.mutation.SetRepliedToMessageID(i)
	return chc
}

// SetNillableRepliedToMessageID sets the "replied_to_message_id" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableRepliedToMessageID(i *int64) *ChatHistoriesCreate {
	if i != nil {
		chc.SetRepliedToMessageID(*i)
	}
	return chc
}

// SetRepliedToUserID sets the "replied_to_user_id" field.
func (chc *ChatHistoriesCreate) SetRepliedToUserID(i int64) *ChatHistoriesCreate {
	chc.mutation.SetRepliedToUserID(i)
	return chc
}

// SetNillableRepliedToUserID sets the "replied_to_user_id" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableRepliedToUserID(i *int64) *ChatHistoriesCreate {
	if i != nil {
		chc.SetRepliedToUserID(*i)
	}
	return chc
}

// SetRepliedToFullName sets the "replied_to_full_name" field.
func (chc *ChatHistoriesCreate) SetRepliedToFullName(s string) *ChatHistoriesCreate {
	chc.mutation.SetRepliedToFullName(s)
	return chc
}

// SetNillableRepliedToFullName sets the "replied_to_full_name" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableRepliedToFullName(s *string) *ChatHistoriesCreate {
	if s != nil {
		chc.SetRepliedToFullName(*s)
	}
	return chc
}

// SetRepliedToUsername sets the "replied_to_username" field.
func (chc *ChatHistoriesCreate) SetRepliedToUsername(s string) *ChatHistoriesCreate {
	chc.mutation.SetRepliedToUsername(s)
	return chc
}

// SetNillableRepliedToUsername sets the "replied_to_username" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableRepliedToUsername(s *string) *ChatHistoriesCreate {
	if s != nil {
		chc.SetRepliedToUsername(*s)
	}
	return chc
}

// SetRepliedToText sets the "replied_to_text" field.
func (chc *ChatHistoriesCreate) SetRepliedToText(s string) *ChatHistoriesCreate {
	chc.mutation.SetRepliedToText(s)
	return chc
}

// SetNillableRepliedToText sets the "replied_to_text" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableRepliedToText(s *string) *ChatHistoriesCreate {
	if s != nil {
		chc.SetRepliedToText(*s)
	}
	return chc
}

// SetRepliedToChatType sets the "replied_to_chat_type" field.
func (chc *ChatHistoriesCreate) SetRepliedToChatType(s string) *ChatHistoriesCreate {
	chc.mutation.SetRepliedToChatType(s)
	return chc
}

// SetNillableRepliedToChatType sets the "replied_to_chat_type" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableRepliedToChatType(s *string) *ChatHistoriesCreate {
	if s != nil {
		chc.SetRepliedToChatType(*s)
	}
	return chc
}

// SetChattedAt sets the "chatted_at" field.
func (chc *ChatHistoriesCreate) SetChattedAt(i int64) *ChatHistoriesCreate {
	chc.mutation.SetChattedAt(i)
	return chc
}

// SetNillableChattedAt sets the "chatted_at" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableChattedAt(i *int64) *ChatHistoriesCreate {
	if i != nil {
		chc.SetChattedAt(*i)
	}
	return chc
}

// SetEmbedded sets the "embedded" field.
func (chc *ChatHistoriesCreate) SetEmbedded(b bool) *ChatHistoriesCreate {
	chc.mutation.SetEmbedded(b)
	return chc
}

// SetNillableEmbedded sets the "embedded" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableEmbedded(b *bool) *ChatHistoriesCreate {
	if b != nil {
		chc.SetEmbedded(*b)
	}
	return chc
}

// SetFromPlatform sets the "from_platform" field.
func (chc *ChatHistoriesCreate) SetFromPlatform(i int) *ChatHistoriesCreate {
	chc.mutation.SetFromPlatform(i)
	return chc
}

// SetNillableFromPlatform sets the "from_platform" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableFromPlatform(i *int) *ChatHistoriesCreate {
	if i != nil {
		chc.SetFromPlatform(*i)
	}
	return chc
}

// SetCreatedAt sets the "created_at" field.
func (chc *ChatHistoriesCreate) SetCreatedAt(i int64) *ChatHistoriesCreate {
	chc.mutation.SetCreatedAt(i)
	return chc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableCreatedAt(i *int64) *ChatHistoriesCreate {
	if i != nil {
		chc.SetCreatedAt(*i)
	}
	return chc
}

// SetUpdatedAt sets the "updated_at" field.
func (chc *ChatHistoriesCreate) SetUpdatedAt(i int64) *ChatHistoriesCreate {
	chc.mutation.SetUpdatedAt(i)
	return chc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableUpdatedAt(i *int64) *ChatHistoriesCreate {
	if i != nil {
		chc.SetUpdatedAt(*i)
	}
	return chc
}

// SetID sets the "id" field.
func (chc *ChatHistoriesCreate) SetID(u uuid.UUID) *ChatHistoriesCreate {
	chc.mutation.SetID(u)
	return chc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (chc *ChatHistoriesCreate) SetNillableID(u *uuid.UUID) *ChatHistoriesCreate {
	if u != nil {
		chc.SetID(*u)
	}
	return chc
}

// Mutation returns the ChatHistoriesMutation object of the builder.
func (chc *ChatHistoriesCreate) Mutation() *ChatHistoriesMutation {
	return chc.mutation
}

// Save creates the ChatHistories in the database.
func (chc *ChatHistoriesCreate) Save(ctx context.Context) (*ChatHistories, error) {
	chc.defaults()
	return withHooks(ctx, chc.sqlSave, chc.mutation, chc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (chc *ChatHistoriesCreate) SaveX(ctx context.Context) *ChatHistories {
	v, err := chc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chc *ChatHistoriesCreate) Exec(ctx context.Context) error {
	_, err := chc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chc *ChatHistoriesCreate) ExecX(ctx context.Context) {
	if err := chc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chc *ChatHistoriesCreate) defaults() {
	if _, ok := chc.mutation.ChatID(); !ok {
		v := chathistories.DefaultChatID
		chc.mutation.SetChatID(v)
	}
	if _, ok := chc.mutation.ChatTitle(); !ok {
		v := chathistories.DefaultChatTitle
		chc.mutation.SetChatTitle(v)
	}
	if _, ok := chc.mutation.ChatType(); !ok {
		v := chathistories.DefaultChatType
		chc.mutation.SetChatType(v)
	}
	if _, ok := chc.mutation.MessageID(); !ok {
		v := chathistories.DefaultMessageID
		chc.mutation.SetMessageID(v)
	}
	if _, ok := chc.mutation.UserID(); !ok {
		v := chathistories.DefaultUserID
		chc.mutation.SetUserID(v)
	}
	if _, ok := chc.mutation.Username(); !ok {
		v := chathistories.DefaultUsername
		chc.mutation.SetUsername(v)
	}
	if _, ok := chc.mutation.FullName(); !ok {
		v := chathistories.DefaultFullName
		chc.mutation.SetFullName(v)
	}
	if _, ok := chc.mutation.Text(); !ok {
		v := chathistories.DefaultText
		chc.mutation.SetText(v)
	}
	if _, ok := chc.mutation.RepliedToMessageID(); !ok {
		v := chathistories.DefaultRepliedToMessageID
		chc.mutation.SetRepliedToMessageID(v)
	}
	if _, ok := chc.mutation.RepliedToUserID(); !ok {
		v := chathistories.DefaultRepliedToUserID
		chc.mutation.SetRepliedToUserID(v)
	}
	if _, ok := chc.mutation.RepliedToFullName(); !ok {
		v := chathistories.DefaultRepliedToFullName
		chc.mutation.SetRepliedToFullName(v)
	}
	if _, ok := chc.mutation.RepliedToUsername(); !ok {
		v := chathistories.DefaultRepliedToUsername
		chc.mutation.SetRepliedToUsername(v)
	}
	if _, ok := chc.mutation.RepliedToText(); !ok {
		v := chathistories.DefaultRepliedToText
		chc.mutation.SetRepliedToText(v)
	}
	if _, ok := chc.mutation.RepliedToChatType(); !ok {
		v := chathistories.DefaultRepliedToChatType
		chc.mutation.SetRepliedToChatType(v)
	}
	if _, ok := chc.mutation.ChattedAt(); !ok {
		v := chathistories.DefaultChattedAt()
		chc.mutation.SetChattedAt(v)
	}
	if _, ok := chc.mutation.Embedded(); !ok {
		v := chathistories.DefaultEmbedded
		chc.mutation.SetEmbedded(v)
	}
	if _, ok := chc.mutation.FromPlatform(); !ok {
		v := chathistories.DefaultFromPlatform
		chc.mutation.SetFromPlatform(v)
	}
	if _, ok := chc.mutation.CreatedAt(); !ok {
		v := chathistories.DefaultCreatedAt()
		chc.mutation.SetCreatedAt(v)
	}
	if _, ok := chc.mutation.UpdatedAt(); !ok {
		v := chathistories.DefaultUpdatedAt()
		chc.mutation.SetUpdatedAt(v)
	}
	if _, ok := chc.mutation.ID(); !ok {
		v := chathistories.DefaultID()
		chc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chc *ChatHistoriesCreate) check() error {
	if _, ok := chc.mutation.ChatID(); !ok {
		return &ValidationError{Name: "chat_id", err: errors.New(`ent: missing required field "ChatHistories.chat_id"`)}
	}
	if _, ok := chc.mutation.ChatTitle(); !ok {
		return &ValidationError{Name: "chat_title", err: errors.New(`ent: missing required field "ChatHistories.chat_title"`)}
	}
	if _, ok := chc.mutation.ChatType(); !ok {
		return &ValidationError{Name: "chat_type", err: errors.New(`ent: missing required field "ChatHistories.chat_type"`)}
	}
	if _, ok := chc.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`ent: missing required field "ChatHistories.message_id"`)}
	}
	if _, ok := chc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ChatHistories.user_id"`)}
	}
	if _, ok := chc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "ChatHistories.username"`)}
	}
	if _, ok := chc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "ChatHistories.full_name"`)}
	}
	if _, ok := chc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "ChatHistories.text"`)}
	}
	if _, ok := chc.mutation.RepliedToMessageID(); !ok {
		return &ValidationError{Name: "replied_to_message_id", err: errors.New(`ent: missing required field "ChatHistories.replied_to_message_id"`)}
	}
	if _, ok := chc.mutation.RepliedToUserID(); !ok {
		return &ValidationError{Name: "replied_to_user_id", err: errors.New(`ent: missing required field "ChatHistories.replied_to_user_id"`)}
	}
	if _, ok := chc.mutation.RepliedToFullName(); !ok {
		return &ValidationError{Name: "replied_to_full_name", err: errors.New(`ent: missing required field "ChatHistories.replied_to_full_name"`)}
	}
	if _, ok := chc.mutation.RepliedToUsername(); !ok {
		return &ValidationError{Name: "replied_to_username", err: errors.New(`ent: missing required field "ChatHistories.replied_to_username"`)}
	}
	if _, ok := chc.mutation.RepliedToText(); !ok {
		return &ValidationError{Name: "replied_to_text", err: errors.New(`ent: missing required field "ChatHistories.replied_to_text"`)}
	}
	if _, ok := chc.mutation.RepliedToChatType(); !ok {
		return &ValidationError{Name: "replied_to_chat_type", err: errors.New(`ent: missing required field "ChatHistories.replied_to_chat_type"`)}
	}
	if _, ok := chc.mutation.ChattedAt(); !ok {
		return &ValidationError{Name: "chatted_at", err: errors.New(`ent: missing required field "ChatHistories.chatted_at"`)}
	}
	if _, ok := chc.mutation.Embedded(); !ok {
		return &ValidationError{Name: "embedded", err: errors.New(`ent: missing required field "ChatHistories.embedded"`)}
	}
	if _, ok := chc.mutation.FromPlatform(); !ok {
		return &ValidationError{Name: "from_platform", err: errors.New(`ent: missing required field "ChatHistories.from_platform"`)}
	}
	if _, ok := chc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ChatHistories.created_at"`)}
	}
	if _, ok := chc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ChatHistories.updated_at"`)}
	}
	return nil
}

func (chc *ChatHistoriesCreate) sqlSave(ctx context.Context) (*ChatHistories, error) {
	if err := chc.check(); err != nil {
		return nil, err
	}
	_node, _spec := chc.createSpec()
	if err := sqlgraph.CreateNode(ctx, chc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	chc.mutation.id = &_node.ID
	chc.mutation.done = true
	return _node, nil
}

func (chc *ChatHistoriesCreate) createSpec() (*ChatHistories, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatHistories{config: chc.config}
		_spec = sqlgraph.NewCreateSpec(chathistories.Table, sqlgraph.NewFieldSpec(chathistories.FieldID, field.TypeUUID))
	)
	_spec.Schema = chc.schemaConfig.ChatHistories
	if id, ok := chc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := chc.mutation.ChatID(); ok {
		_spec.SetField(chathistories.FieldChatID, field.TypeInt64, value)
		_node.ChatID = value
	}
	if value, ok := chc.mutation.ChatTitle(); ok {
		_spec.SetField(chathistories.FieldChatTitle, field.TypeString, value)
		_node.ChatTitle = value
	}
	if value, ok := chc.mutation.ChatType(); ok {
		_spec.SetField(chathistories.FieldChatType, field.TypeString, value)
		_node.ChatType = value
	}
	if value, ok := chc.mutation.MessageID(); ok {
		_spec.SetField(chathistories.FieldMessageID, field.TypeInt64, value)
		_node.MessageID = value
	}
	if value, ok := chc.mutation.UserID(); ok {
		_spec.SetField(chathistories.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := chc.mutation.Username(); ok {
		_spec.SetField(chathistories.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := chc.mutation.FullName(); ok {
		_spec.SetField(chathistories.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := chc.mutation.Text(); ok {
		_spec.SetField(chathistories.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := chc.mutation.RepliedToMessageID(); ok {
		_spec.SetField(chathistories.FieldRepliedToMessageID, field.TypeInt64, value)
		_node.RepliedToMessageID = value
	}
	if value, ok := chc.mutation.RepliedToUserID(); ok {
		_spec.SetField(chathistories.FieldRepliedToUserID, field.TypeInt64, value)
		_node.RepliedToUserID = value
	}
	if value, ok := chc.mutation.RepliedToFullName(); ok {
		_spec.SetField(chathistories.FieldRepliedToFullName, field.TypeString, value)
		_node.RepliedToFullName = value
	}
	if value, ok := chc.mutation.RepliedToUsername(); ok {
		_spec.SetField(chathistories.FieldRepliedToUsername, field.TypeString, value)
		_node.RepliedToUsername = value
	}
	if value, ok := chc.mutation.RepliedToText(); ok {
		_spec.SetField(chathistories.FieldRepliedToText, field.TypeString, value)
		_node.RepliedToText = value
	}
	if value, ok := chc.mutation.RepliedToChatType(); ok {
		_spec.SetField(chathistories.FieldRepliedToChatType, field.TypeString, value)
		_node.RepliedToChatType = value
	}
	if value, ok := chc.mutation.ChattedAt(); ok {
		_spec.SetField(chathistories.FieldChattedAt, field.TypeInt64, value)
		_node.ChattedAt = value
	}
	if value, ok := chc.mutation.Embedded(); ok {
		_spec.SetField(chathistories.FieldEmbedded, field.TypeBool, value)
		_node.Embedded = value
	}
	if value, ok := chc.mutation.FromPlatform(); ok {
		_spec.SetField(chathistories.FieldFromPlatform, field.TypeInt, value)
		_node.FromPlatform = value
	}
	if value, ok := chc.mutation.CreatedAt(); ok {
		_spec.SetField(chathistories.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := chc.mutation.UpdatedAt(); ok {
		_spec.SetField(chathistories.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ChatHistoriesCreateBulk is the builder for creating many ChatHistories entities in bulk.
type ChatHistoriesCreateBulk struct {
	config
	err      error
	builders []*ChatHistoriesCreate
}

// Save creates the ChatHistories entities in the database.
func (chcb *ChatHistoriesCreateBulk) Save(ctx context.Context) ([]*ChatHistories, error) {
	if chcb.err != nil {
		return nil, chcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(chcb.builders))
	nodes := make([]*ChatHistories, len(chcb.builders))
	mutators := make([]Mutator, len(chcb.builders))
	for i := range chcb.builders {
		func(i int, root context.Context) {
			builder := chcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatHistoriesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, chcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, chcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, chcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (chcb *ChatHistoriesCreateBulk) SaveX(ctx context.Context) []*ChatHistories {
	v, err := chcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chcb *ChatHistoriesCreateBulk) Exec(ctx context.Context) error {
	_, err := chcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcb *ChatHistoriesCreateBulk) ExecX(ctx context.Context) {
	if err := chcb.Exec(ctx); err != nil {
		panic(err)
	}
}

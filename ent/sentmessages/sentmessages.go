// Code generated by ent, DO NOT EDIT.

package sentmessages

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the sentmessages type in the database.
	Label = "sent_messages"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChatID holds the string denoting the chat_id field in the database.
	FieldChatID = "chat_id"
	// FieldMessageID holds the string denoting the message_id field in the database.
	FieldMessageID = "message_id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldIsPinned holds the string denoting the is_pinned field in the database.
	FieldIsPinned = "is_pinned"
	// FieldFromPlatform holds the string denoting the from_platform field in the database.
	FieldFromPlatform = "from_platform"
	// FieldMessageType holds the string denoting the message_type field in the database.
	FieldMessageType = "message_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the sentmessages in the database.
	Table = "sent_messages"
)

// Columns holds all SQL columns for sentmessages fields.
var Columns = []string{
	FieldID,
	FieldChatID,
	FieldMessageID,
	FieldText,
	FieldIsPinned,
	FieldFromPlatform,
	FieldMessageType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultChatID holds the default value on creation for the "chat_id" field.
	DefaultChatID int64
	// DefaultMessageID holds the default value on creation for the "message_id" field.
	DefaultMessageID int
	// DefaultText holds the default value on creation for the "text" field.
	DefaultText string
	// DefaultIsPinned holds the default value on creation for the "is_pinned" field.
	DefaultIsPinned bool
	// DefaultFromPlatform holds the default value on creation for the "from_platform" field.
	DefaultFromPlatform int
	// DefaultMessageType holds the default value on creation for the "message_type" field.
	DefaultMessageType int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SentMessages queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChatID orders the results by the chat_id field.
func ByChatID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChatID, opts...).ToFunc()
}

// ByMessageID orders the results by the message_id field.
func ByMessageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByIsPinned orders the results by the is_pinned field.
func ByIsPinned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPinned, opts...).ToFunc()
}

// ByFromPlatform orders the results by the from_platform field.
func ByFromPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromPlatform, opts...).ToFunc()
}

// ByMessageType orders the results by the message_type field.
func ByMessageType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/slackoauthcredentials"
)

// SlackOAuthCredentialsDelete is the builder for deleting a SlackOAuthCredentials entity.
type SlackOAuthCredentialsDelete struct {
	config
	hooks    []Hook
	mutation *SlackOAuthCredentialsMutation
}

// Where appends a list predicates to the SlackOAuthCredentialsDelete builder.
func (socd *SlackOAuthCredentialsDelete) Where(ps ...predicate.SlackOAuthCredentials) *SlackOAuthCredentialsDelete {
	socd.mutation.Where(ps...)
	return socd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (socd *SlackOAuthCredentialsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, socd.sqlExec, socd.mutation, socd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (socd *SlackOAuthCredentialsDelete) ExecX(ctx context.Context) int {
	n, err := socd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (socd *SlackOAuthCredentialsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(slackoauthcredentials.Table, sqlgraph.NewFieldSpec(slackoauthcredentials.FieldID, field.TypeUUID))
	_spec.Node.Schema = socd.schemaConfig.SlackOAuthCredentials
	ctx = internal.NewSchemaConfigContext(ctx, socd.schemaConfig)
	if ps := socd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, socd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	socd.mutation.done = true
	return affected, err
}

// SlackOAuthCredentialsDeleteOne is the builder for deleting a single SlackOAuthCredentials entity.
type SlackOAuthCredentialsDeleteOne struct {
	socd *SlackOAuthCredentialsDelete
}

// Where appends a list predicates to the SlackOAuthCredentialsDelete builder.
func (socdo *SlackOAuthCredentialsDeleteOne) Where(ps ...predicate.SlackOAuthCredentials) *SlackOAuthCredentialsDeleteOne {
	socdo.socd.mutation.Where(ps...)
	return socdo
}

// Exec executes the deletion query.
func (socdo *SlackOAuthCredentialsDeleteOne) Exec(ctx context.Context) error {
	n, err := socdo.socd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{slackoauthcredentials.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (socdo *SlackOAuthCredentialsDeleteOne) ExecX(ctx context.Context) {
	if err := socdo.Exec(ctx); err != nil {
		panic(err)
	}
}

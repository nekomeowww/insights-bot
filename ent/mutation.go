// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/chathistories"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/slackoauthcredentials"
	"github.com/nekomeowww/insights-bot/ent/telegramchatfeatureflags"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChatHistories            = "ChatHistories"
	TypeSlackOAuthCredentials    = "SlackOAuthCredentials"
	TypeTelegramChatFeatureFlags = "TelegramChatFeatureFlags"
)

// ChatHistoriesMutation represents an operation that mutates the ChatHistories nodes in the graph.
type ChatHistoriesMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	chat_id                  *int64
	addchat_id               *int64
	chat_title               *string
	message_id               *int64
	addmessage_id            *int64
	user_id                  *int64
	adduser_id               *int64
	username                 *string
	full_name                *string
	text                     *string
	replied_to_message_id    *int64
	addreplied_to_message_id *int64
	replied_to_user_id       *int64
	addreplied_to_user_id    *int64
	replied_to_full_name     *string
	replied_to_username      *string
	replied_to_text          *string
	chatted_at               *int64
	addchatted_at            *int64
	embedded                 *bool
	created_at               *int64
	addcreated_at            *int64
	updated_at               *int64
	addupdated_at            *int64
	clearedFields            map[string]struct{}
	done                     bool
	oldValue                 func(context.Context) (*ChatHistories, error)
	predicates               []predicate.ChatHistories
}

var _ ent.Mutation = (*ChatHistoriesMutation)(nil)

// chathistoriesOption allows management of the mutation configuration using functional options.
type chathistoriesOption func(*ChatHistoriesMutation)

// newChatHistoriesMutation creates new mutation for the ChatHistories entity.
func newChatHistoriesMutation(c config, op Op, opts ...chathistoriesOption) *ChatHistoriesMutation {
	m := &ChatHistoriesMutation{
		config:        c,
		op:            op,
		typ:           TypeChatHistories,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatHistoriesID sets the ID field of the mutation.
func withChatHistoriesID(id uuid.UUID) chathistoriesOption {
	return func(m *ChatHistoriesMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatHistories
		)
		m.oldValue = func(ctx context.Context) (*ChatHistories, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatHistories.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatHistories sets the old ChatHistories of the mutation.
func withChatHistories(node *ChatHistories) chathistoriesOption {
	return func(m *ChatHistoriesMutation) {
		m.oldValue = func(context.Context) (*ChatHistories, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatHistoriesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatHistoriesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ChatHistories entities.
func (m *ChatHistoriesMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatHistoriesMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatHistoriesMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatHistories.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChatID sets the "chat_id" field.
func (m *ChatHistoriesMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *ChatHistoriesMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// AddChatID adds i to the "chat_id" field.
func (m *ChatHistoriesMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the "chat_id" field in this mutation.
func (m *ChatHistoriesMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *ChatHistoriesMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// SetChatTitle sets the "chat_title" field.
func (m *ChatHistoriesMutation) SetChatTitle(s string) {
	m.chat_title = &s
}

// ChatTitle returns the value of the "chat_title" field in the mutation.
func (m *ChatHistoriesMutation) ChatTitle() (r string, exists bool) {
	v := m.chat_title
	if v == nil {
		return
	}
	return *v, true
}

// OldChatTitle returns the old "chat_title" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldChatTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatTitle: %w", err)
	}
	return oldValue.ChatTitle, nil
}

// ResetChatTitle resets all changes to the "chat_title" field.
func (m *ChatHistoriesMutation) ResetChatTitle() {
	m.chat_title = nil
}

// SetMessageID sets the "message_id" field.
func (m *ChatHistoriesMutation) SetMessageID(i int64) {
	m.message_id = &i
	m.addmessage_id = nil
}

// MessageID returns the value of the "message_id" field in the mutation.
func (m *ChatHistoriesMutation) MessageID() (r int64, exists bool) {
	v := m.message_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMessageID returns the old "message_id" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldMessageID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessageID: %w", err)
	}
	return oldValue.MessageID, nil
}

// AddMessageID adds i to the "message_id" field.
func (m *ChatHistoriesMutation) AddMessageID(i int64) {
	if m.addmessage_id != nil {
		*m.addmessage_id += i
	} else {
		m.addmessage_id = &i
	}
}

// AddedMessageID returns the value that was added to the "message_id" field in this mutation.
func (m *ChatHistoriesMutation) AddedMessageID() (r int64, exists bool) {
	v := m.addmessage_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMessageID resets all changes to the "message_id" field.
func (m *ChatHistoriesMutation) ResetMessageID() {
	m.message_id = nil
	m.addmessage_id = nil
}

// SetUserID sets the "user_id" field.
func (m *ChatHistoriesMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ChatHistoriesMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *ChatHistoriesMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *ChatHistoriesMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ChatHistoriesMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetUsername sets the "username" field.
func (m *ChatHistoriesMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *ChatHistoriesMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *ChatHistoriesMutation) ResetUsername() {
	m.username = nil
}

// SetFullName sets the "full_name" field.
func (m *ChatHistoriesMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *ChatHistoriesMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *ChatHistoriesMutation) ResetFullName() {
	m.full_name = nil
}

// SetText sets the "text" field.
func (m *ChatHistoriesMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *ChatHistoriesMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *ChatHistoriesMutation) ResetText() {
	m.text = nil
}

// SetRepliedToMessageID sets the "replied_to_message_id" field.
func (m *ChatHistoriesMutation) SetRepliedToMessageID(i int64) {
	m.replied_to_message_id = &i
	m.addreplied_to_message_id = nil
}

// RepliedToMessageID returns the value of the "replied_to_message_id" field in the mutation.
func (m *ChatHistoriesMutation) RepliedToMessageID() (r int64, exists bool) {
	v := m.replied_to_message_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRepliedToMessageID returns the old "replied_to_message_id" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldRepliedToMessageID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepliedToMessageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepliedToMessageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepliedToMessageID: %w", err)
	}
	return oldValue.RepliedToMessageID, nil
}

// AddRepliedToMessageID adds i to the "replied_to_message_id" field.
func (m *ChatHistoriesMutation) AddRepliedToMessageID(i int64) {
	if m.addreplied_to_message_id != nil {
		*m.addreplied_to_message_id += i
	} else {
		m.addreplied_to_message_id = &i
	}
}

// AddedRepliedToMessageID returns the value that was added to the "replied_to_message_id" field in this mutation.
func (m *ChatHistoriesMutation) AddedRepliedToMessageID() (r int64, exists bool) {
	v := m.addreplied_to_message_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRepliedToMessageID resets all changes to the "replied_to_message_id" field.
func (m *ChatHistoriesMutation) ResetRepliedToMessageID() {
	m.replied_to_message_id = nil
	m.addreplied_to_message_id = nil
}

// SetRepliedToUserID sets the "replied_to_user_id" field.
func (m *ChatHistoriesMutation) SetRepliedToUserID(i int64) {
	m.replied_to_user_id = &i
	m.addreplied_to_user_id = nil
}

// RepliedToUserID returns the value of the "replied_to_user_id" field in the mutation.
func (m *ChatHistoriesMutation) RepliedToUserID() (r int64, exists bool) {
	v := m.replied_to_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRepliedToUserID returns the old "replied_to_user_id" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldRepliedToUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepliedToUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepliedToUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepliedToUserID: %w", err)
	}
	return oldValue.RepliedToUserID, nil
}

// AddRepliedToUserID adds i to the "replied_to_user_id" field.
func (m *ChatHistoriesMutation) AddRepliedToUserID(i int64) {
	if m.addreplied_to_user_id != nil {
		*m.addreplied_to_user_id += i
	} else {
		m.addreplied_to_user_id = &i
	}
}

// AddedRepliedToUserID returns the value that was added to the "replied_to_user_id" field in this mutation.
func (m *ChatHistoriesMutation) AddedRepliedToUserID() (r int64, exists bool) {
	v := m.addreplied_to_user_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRepliedToUserID resets all changes to the "replied_to_user_id" field.
func (m *ChatHistoriesMutation) ResetRepliedToUserID() {
	m.replied_to_user_id = nil
	m.addreplied_to_user_id = nil
}

// SetRepliedToFullName sets the "replied_to_full_name" field.
func (m *ChatHistoriesMutation) SetRepliedToFullName(s string) {
	m.replied_to_full_name = &s
}

// RepliedToFullName returns the value of the "replied_to_full_name" field in the mutation.
func (m *ChatHistoriesMutation) RepliedToFullName() (r string, exists bool) {
	v := m.replied_to_full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldRepliedToFullName returns the old "replied_to_full_name" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldRepliedToFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepliedToFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepliedToFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepliedToFullName: %w", err)
	}
	return oldValue.RepliedToFullName, nil
}

// ResetRepliedToFullName resets all changes to the "replied_to_full_name" field.
func (m *ChatHistoriesMutation) ResetRepliedToFullName() {
	m.replied_to_full_name = nil
}

// SetRepliedToUsername sets the "replied_to_username" field.
func (m *ChatHistoriesMutation) SetRepliedToUsername(s string) {
	m.replied_to_username = &s
}

// RepliedToUsername returns the value of the "replied_to_username" field in the mutation.
func (m *ChatHistoriesMutation) RepliedToUsername() (r string, exists bool) {
	v := m.replied_to_username
	if v == nil {
		return
	}
	return *v, true
}

// OldRepliedToUsername returns the old "replied_to_username" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldRepliedToUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepliedToUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepliedToUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepliedToUsername: %w", err)
	}
	return oldValue.RepliedToUsername, nil
}

// ResetRepliedToUsername resets all changes to the "replied_to_username" field.
func (m *ChatHistoriesMutation) ResetRepliedToUsername() {
	m.replied_to_username = nil
}

// SetRepliedToText sets the "replied_to_text" field.
func (m *ChatHistoriesMutation) SetRepliedToText(s string) {
	m.replied_to_text = &s
}

// RepliedToText returns the value of the "replied_to_text" field in the mutation.
func (m *ChatHistoriesMutation) RepliedToText() (r string, exists bool) {
	v := m.replied_to_text
	if v == nil {
		return
	}
	return *v, true
}

// OldRepliedToText returns the old "replied_to_text" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldRepliedToText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepliedToText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepliedToText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepliedToText: %w", err)
	}
	return oldValue.RepliedToText, nil
}

// ResetRepliedToText resets all changes to the "replied_to_text" field.
func (m *ChatHistoriesMutation) ResetRepliedToText() {
	m.replied_to_text = nil
}

// SetChattedAt sets the "chatted_at" field.
func (m *ChatHistoriesMutation) SetChattedAt(i int64) {
	m.chatted_at = &i
	m.addchatted_at = nil
}

// ChattedAt returns the value of the "chatted_at" field in the mutation.
func (m *ChatHistoriesMutation) ChattedAt() (r int64, exists bool) {
	v := m.chatted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldChattedAt returns the old "chatted_at" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldChattedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChattedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChattedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChattedAt: %w", err)
	}
	return oldValue.ChattedAt, nil
}

// AddChattedAt adds i to the "chatted_at" field.
func (m *ChatHistoriesMutation) AddChattedAt(i int64) {
	if m.addchatted_at != nil {
		*m.addchatted_at += i
	} else {
		m.addchatted_at = &i
	}
}

// AddedChattedAt returns the value that was added to the "chatted_at" field in this mutation.
func (m *ChatHistoriesMutation) AddedChattedAt() (r int64, exists bool) {
	v := m.addchatted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetChattedAt resets all changes to the "chatted_at" field.
func (m *ChatHistoriesMutation) ResetChattedAt() {
	m.chatted_at = nil
	m.addchatted_at = nil
}

// SetEmbedded sets the "embedded" field.
func (m *ChatHistoriesMutation) SetEmbedded(b bool) {
	m.embedded = &b
}

// Embedded returns the value of the "embedded" field in the mutation.
func (m *ChatHistoriesMutation) Embedded() (r bool, exists bool) {
	v := m.embedded
	if v == nil {
		return
	}
	return *v, true
}

// OldEmbedded returns the old "embedded" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldEmbedded(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmbedded is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmbedded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmbedded: %w", err)
	}
	return oldValue.Embedded, nil
}

// ResetEmbedded resets all changes to the "embedded" field.
func (m *ChatHistoriesMutation) ResetEmbedded() {
	m.embedded = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ChatHistoriesMutation) SetCreatedAt(i int64) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ChatHistoriesMutation) CreatedAt() (r int64, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *ChatHistoriesMutation) AddCreatedAt(i int64) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ChatHistoriesMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ChatHistoriesMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ChatHistoriesMutation) SetUpdatedAt(i int64) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ChatHistoriesMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ChatHistories entity.
// If the ChatHistories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoriesMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *ChatHistoriesMutation) AddUpdatedAt(i int64) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ChatHistoriesMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ChatHistoriesMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// Where appends a list predicates to the ChatHistoriesMutation builder.
func (m *ChatHistoriesMutation) Where(ps ...predicate.ChatHistories) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatHistoriesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatHistoriesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChatHistories, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatHistoriesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatHistoriesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChatHistories).
func (m *ChatHistoriesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatHistoriesMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.chat_id != nil {
		fields = append(fields, chathistories.FieldChatID)
	}
	if m.chat_title != nil {
		fields = append(fields, chathistories.FieldChatTitle)
	}
	if m.message_id != nil {
		fields = append(fields, chathistories.FieldMessageID)
	}
	if m.user_id != nil {
		fields = append(fields, chathistories.FieldUserID)
	}
	if m.username != nil {
		fields = append(fields, chathistories.FieldUsername)
	}
	if m.full_name != nil {
		fields = append(fields, chathistories.FieldFullName)
	}
	if m.text != nil {
		fields = append(fields, chathistories.FieldText)
	}
	if m.replied_to_message_id != nil {
		fields = append(fields, chathistories.FieldRepliedToMessageID)
	}
	if m.replied_to_user_id != nil {
		fields = append(fields, chathistories.FieldRepliedToUserID)
	}
	if m.replied_to_full_name != nil {
		fields = append(fields, chathistories.FieldRepliedToFullName)
	}
	if m.replied_to_username != nil {
		fields = append(fields, chathistories.FieldRepliedToUsername)
	}
	if m.replied_to_text != nil {
		fields = append(fields, chathistories.FieldRepliedToText)
	}
	if m.chatted_at != nil {
		fields = append(fields, chathistories.FieldChattedAt)
	}
	if m.embedded != nil {
		fields = append(fields, chathistories.FieldEmbedded)
	}
	if m.created_at != nil {
		fields = append(fields, chathistories.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, chathistories.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatHistoriesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chathistories.FieldChatID:
		return m.ChatID()
	case chathistories.FieldChatTitle:
		return m.ChatTitle()
	case chathistories.FieldMessageID:
		return m.MessageID()
	case chathistories.FieldUserID:
		return m.UserID()
	case chathistories.FieldUsername:
		return m.Username()
	case chathistories.FieldFullName:
		return m.FullName()
	case chathistories.FieldText:
		return m.Text()
	case chathistories.FieldRepliedToMessageID:
		return m.RepliedToMessageID()
	case chathistories.FieldRepliedToUserID:
		return m.RepliedToUserID()
	case chathistories.FieldRepliedToFullName:
		return m.RepliedToFullName()
	case chathistories.FieldRepliedToUsername:
		return m.RepliedToUsername()
	case chathistories.FieldRepliedToText:
		return m.RepliedToText()
	case chathistories.FieldChattedAt:
		return m.ChattedAt()
	case chathistories.FieldEmbedded:
		return m.Embedded()
	case chathistories.FieldCreatedAt:
		return m.CreatedAt()
	case chathistories.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatHistoriesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chathistories.FieldChatID:
		return m.OldChatID(ctx)
	case chathistories.FieldChatTitle:
		return m.OldChatTitle(ctx)
	case chathistories.FieldMessageID:
		return m.OldMessageID(ctx)
	case chathistories.FieldUserID:
		return m.OldUserID(ctx)
	case chathistories.FieldUsername:
		return m.OldUsername(ctx)
	case chathistories.FieldFullName:
		return m.OldFullName(ctx)
	case chathistories.FieldText:
		return m.OldText(ctx)
	case chathistories.FieldRepliedToMessageID:
		return m.OldRepliedToMessageID(ctx)
	case chathistories.FieldRepliedToUserID:
		return m.OldRepliedToUserID(ctx)
	case chathistories.FieldRepliedToFullName:
		return m.OldRepliedToFullName(ctx)
	case chathistories.FieldRepliedToUsername:
		return m.OldRepliedToUsername(ctx)
	case chathistories.FieldRepliedToText:
		return m.OldRepliedToText(ctx)
	case chathistories.FieldChattedAt:
		return m.OldChattedAt(ctx)
	case chathistories.FieldEmbedded:
		return m.OldEmbedded(ctx)
	case chathistories.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case chathistories.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ChatHistories field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatHistoriesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chathistories.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case chathistories.FieldChatTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatTitle(v)
		return nil
	case chathistories.FieldMessageID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessageID(v)
		return nil
	case chathistories.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case chathistories.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case chathistories.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case chathistories.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case chathistories.FieldRepliedToMessageID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepliedToMessageID(v)
		return nil
	case chathistories.FieldRepliedToUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepliedToUserID(v)
		return nil
	case chathistories.FieldRepliedToFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepliedToFullName(v)
		return nil
	case chathistories.FieldRepliedToUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepliedToUsername(v)
		return nil
	case chathistories.FieldRepliedToText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepliedToText(v)
		return nil
	case chathistories.FieldChattedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChattedAt(v)
		return nil
	case chathistories.FieldEmbedded:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmbedded(v)
		return nil
	case chathistories.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case chathistories.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ChatHistories field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatHistoriesMutation) AddedFields() []string {
	var fields []string
	if m.addchat_id != nil {
		fields = append(fields, chathistories.FieldChatID)
	}
	if m.addmessage_id != nil {
		fields = append(fields, chathistories.FieldMessageID)
	}
	if m.adduser_id != nil {
		fields = append(fields, chathistories.FieldUserID)
	}
	if m.addreplied_to_message_id != nil {
		fields = append(fields, chathistories.FieldRepliedToMessageID)
	}
	if m.addreplied_to_user_id != nil {
		fields = append(fields, chathistories.FieldRepliedToUserID)
	}
	if m.addchatted_at != nil {
		fields = append(fields, chathistories.FieldChattedAt)
	}
	if m.addcreated_at != nil {
		fields = append(fields, chathistories.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, chathistories.FieldUpdatedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatHistoriesMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chathistories.FieldChatID:
		return m.AddedChatID()
	case chathistories.FieldMessageID:
		return m.AddedMessageID()
	case chathistories.FieldUserID:
		return m.AddedUserID()
	case chathistories.FieldRepliedToMessageID:
		return m.AddedRepliedToMessageID()
	case chathistories.FieldRepliedToUserID:
		return m.AddedRepliedToUserID()
	case chathistories.FieldChattedAt:
		return m.AddedChattedAt()
	case chathistories.FieldCreatedAt:
		return m.AddedCreatedAt()
	case chathistories.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatHistoriesMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chathistories.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChatID(v)
		return nil
	case chathistories.FieldMessageID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMessageID(v)
		return nil
	case chathistories.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case chathistories.FieldRepliedToMessageID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRepliedToMessageID(v)
		return nil
	case chathistories.FieldRepliedToUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRepliedToUserID(v)
		return nil
	case chathistories.FieldChattedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChattedAt(v)
		return nil
	case chathistories.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case chathistories.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ChatHistories numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatHistoriesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatHistoriesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatHistoriesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChatHistories nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatHistoriesMutation) ResetField(name string) error {
	switch name {
	case chathistories.FieldChatID:
		m.ResetChatID()
		return nil
	case chathistories.FieldChatTitle:
		m.ResetChatTitle()
		return nil
	case chathistories.FieldMessageID:
		m.ResetMessageID()
		return nil
	case chathistories.FieldUserID:
		m.ResetUserID()
		return nil
	case chathistories.FieldUsername:
		m.ResetUsername()
		return nil
	case chathistories.FieldFullName:
		m.ResetFullName()
		return nil
	case chathistories.FieldText:
		m.ResetText()
		return nil
	case chathistories.FieldRepliedToMessageID:
		m.ResetRepliedToMessageID()
		return nil
	case chathistories.FieldRepliedToUserID:
		m.ResetRepliedToUserID()
		return nil
	case chathistories.FieldRepliedToFullName:
		m.ResetRepliedToFullName()
		return nil
	case chathistories.FieldRepliedToUsername:
		m.ResetRepliedToUsername()
		return nil
	case chathistories.FieldRepliedToText:
		m.ResetRepliedToText()
		return nil
	case chathistories.FieldChattedAt:
		m.ResetChattedAt()
		return nil
	case chathistories.FieldEmbedded:
		m.ResetEmbedded()
		return nil
	case chathistories.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case chathistories.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ChatHistories field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatHistoriesMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatHistoriesMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatHistoriesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatHistoriesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatHistoriesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatHistoriesMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatHistoriesMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ChatHistories unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatHistoriesMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ChatHistories edge %s", name)
}

// SlackOAuthCredentialsMutation represents an operation that mutates the SlackOAuthCredentials nodes in the graph.
type SlackOAuthCredentialsMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	team_id       *string
	refresh_token *string
	access_token  *string
	created_at    *int64
	addcreated_at *int64
	updated_at    *int64
	addupdated_at *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SlackOAuthCredentials, error)
	predicates    []predicate.SlackOAuthCredentials
}

var _ ent.Mutation = (*SlackOAuthCredentialsMutation)(nil)

// slackoauthcredentialsOption allows management of the mutation configuration using functional options.
type slackoauthcredentialsOption func(*SlackOAuthCredentialsMutation)

// newSlackOAuthCredentialsMutation creates new mutation for the SlackOAuthCredentials entity.
func newSlackOAuthCredentialsMutation(c config, op Op, opts ...slackoauthcredentialsOption) *SlackOAuthCredentialsMutation {
	m := &SlackOAuthCredentialsMutation{
		config:        c,
		op:            op,
		typ:           TypeSlackOAuthCredentials,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSlackOAuthCredentialsID sets the ID field of the mutation.
func withSlackOAuthCredentialsID(id uuid.UUID) slackoauthcredentialsOption {
	return func(m *SlackOAuthCredentialsMutation) {
		var (
			err   error
			once  sync.Once
			value *SlackOAuthCredentials
		)
		m.oldValue = func(ctx context.Context) (*SlackOAuthCredentials, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SlackOAuthCredentials.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSlackOAuthCredentials sets the old SlackOAuthCredentials of the mutation.
func withSlackOAuthCredentials(node *SlackOAuthCredentials) slackoauthcredentialsOption {
	return func(m *SlackOAuthCredentialsMutation) {
		m.oldValue = func(context.Context) (*SlackOAuthCredentials, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SlackOAuthCredentialsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SlackOAuthCredentialsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SlackOAuthCredentials entities.
func (m *SlackOAuthCredentialsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SlackOAuthCredentialsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SlackOAuthCredentialsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SlackOAuthCredentials.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTeamID sets the "team_id" field.
func (m *SlackOAuthCredentialsMutation) SetTeamID(s string) {
	m.team_id = &s
}

// TeamID returns the value of the "team_id" field in the mutation.
func (m *SlackOAuthCredentialsMutation) TeamID() (r string, exists bool) {
	v := m.team_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTeamID returns the old "team_id" field's value of the SlackOAuthCredentials entity.
// If the SlackOAuthCredentials object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackOAuthCredentialsMutation) OldTeamID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTeamID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTeamID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeamID: %w", err)
	}
	return oldValue.TeamID, nil
}

// ResetTeamID resets all changes to the "team_id" field.
func (m *SlackOAuthCredentialsMutation) ResetTeamID() {
	m.team_id = nil
}

// SetRefreshToken sets the "refresh_token" field.
func (m *SlackOAuthCredentialsMutation) SetRefreshToken(s string) {
	m.refresh_token = &s
}

// RefreshToken returns the value of the "refresh_token" field in the mutation.
func (m *SlackOAuthCredentialsMutation) RefreshToken() (r string, exists bool) {
	v := m.refresh_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshToken returns the old "refresh_token" field's value of the SlackOAuthCredentials entity.
// If the SlackOAuthCredentials object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackOAuthCredentialsMutation) OldRefreshToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshToken: %w", err)
	}
	return oldValue.RefreshToken, nil
}

// ResetRefreshToken resets all changes to the "refresh_token" field.
func (m *SlackOAuthCredentialsMutation) ResetRefreshToken() {
	m.refresh_token = nil
}

// SetAccessToken sets the "access_token" field.
func (m *SlackOAuthCredentialsMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *SlackOAuthCredentialsMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the SlackOAuthCredentials entity.
// If the SlackOAuthCredentials object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackOAuthCredentialsMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *SlackOAuthCredentialsMutation) ResetAccessToken() {
	m.access_token = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SlackOAuthCredentialsMutation) SetCreatedAt(i int64) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SlackOAuthCredentialsMutation) CreatedAt() (r int64, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SlackOAuthCredentials entity.
// If the SlackOAuthCredentials object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackOAuthCredentialsMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *SlackOAuthCredentialsMutation) AddCreatedAt(i int64) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *SlackOAuthCredentialsMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SlackOAuthCredentialsMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SlackOAuthCredentialsMutation) SetUpdatedAt(i int64) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SlackOAuthCredentialsMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SlackOAuthCredentials entity.
// If the SlackOAuthCredentials object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackOAuthCredentialsMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *SlackOAuthCredentialsMutation) AddUpdatedAt(i int64) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *SlackOAuthCredentialsMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SlackOAuthCredentialsMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// Where appends a list predicates to the SlackOAuthCredentialsMutation builder.
func (m *SlackOAuthCredentialsMutation) Where(ps ...predicate.SlackOAuthCredentials) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SlackOAuthCredentialsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SlackOAuthCredentialsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SlackOAuthCredentials, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SlackOAuthCredentialsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SlackOAuthCredentialsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SlackOAuthCredentials).
func (m *SlackOAuthCredentialsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SlackOAuthCredentialsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.team_id != nil {
		fields = append(fields, slackoauthcredentials.FieldTeamID)
	}
	if m.refresh_token != nil {
		fields = append(fields, slackoauthcredentials.FieldRefreshToken)
	}
	if m.access_token != nil {
		fields = append(fields, slackoauthcredentials.FieldAccessToken)
	}
	if m.created_at != nil {
		fields = append(fields, slackoauthcredentials.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, slackoauthcredentials.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SlackOAuthCredentialsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case slackoauthcredentials.FieldTeamID:
		return m.TeamID()
	case slackoauthcredentials.FieldRefreshToken:
		return m.RefreshToken()
	case slackoauthcredentials.FieldAccessToken:
		return m.AccessToken()
	case slackoauthcredentials.FieldCreatedAt:
		return m.CreatedAt()
	case slackoauthcredentials.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SlackOAuthCredentialsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case slackoauthcredentials.FieldTeamID:
		return m.OldTeamID(ctx)
	case slackoauthcredentials.FieldRefreshToken:
		return m.OldRefreshToken(ctx)
	case slackoauthcredentials.FieldAccessToken:
		return m.OldAccessToken(ctx)
	case slackoauthcredentials.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case slackoauthcredentials.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SlackOAuthCredentials field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SlackOAuthCredentialsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case slackoauthcredentials.FieldTeamID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeamID(v)
		return nil
	case slackoauthcredentials.FieldRefreshToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshToken(v)
		return nil
	case slackoauthcredentials.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	case slackoauthcredentials.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case slackoauthcredentials.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SlackOAuthCredentials field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SlackOAuthCredentialsMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, slackoauthcredentials.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, slackoauthcredentials.FieldUpdatedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SlackOAuthCredentialsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case slackoauthcredentials.FieldCreatedAt:
		return m.AddedCreatedAt()
	case slackoauthcredentials.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SlackOAuthCredentialsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case slackoauthcredentials.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case slackoauthcredentials.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SlackOAuthCredentials numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SlackOAuthCredentialsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SlackOAuthCredentialsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SlackOAuthCredentialsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SlackOAuthCredentials nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SlackOAuthCredentialsMutation) ResetField(name string) error {
	switch name {
	case slackoauthcredentials.FieldTeamID:
		m.ResetTeamID()
		return nil
	case slackoauthcredentials.FieldRefreshToken:
		m.ResetRefreshToken()
		return nil
	case slackoauthcredentials.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	case slackoauthcredentials.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case slackoauthcredentials.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown SlackOAuthCredentials field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SlackOAuthCredentialsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SlackOAuthCredentialsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SlackOAuthCredentialsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SlackOAuthCredentialsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SlackOAuthCredentialsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SlackOAuthCredentialsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SlackOAuthCredentialsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SlackOAuthCredentials unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SlackOAuthCredentialsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SlackOAuthCredentials edge %s", name)
}

// TelegramChatFeatureFlagsMutation represents an operation that mutates the TelegramChatFeatureFlags nodes in the graph.
type TelegramChatFeatureFlagsMutation struct {
	config
	op                           Op
	typ                          string
	id                           *uuid.UUID
	chat_id                      *int64
	addchat_id                   *int64
	chat_type                    *string
	chat_title                   *string
	feature_chat_histories_recap *bool
	created_at                   *int64
	addcreated_at                *int64
	updated_at                   *int64
	addupdated_at                *int64
	clearedFields                map[string]struct{}
	done                         bool
	oldValue                     func(context.Context) (*TelegramChatFeatureFlags, error)
	predicates                   []predicate.TelegramChatFeatureFlags
}

var _ ent.Mutation = (*TelegramChatFeatureFlagsMutation)(nil)

// telegramchatfeatureflagsOption allows management of the mutation configuration using functional options.
type telegramchatfeatureflagsOption func(*TelegramChatFeatureFlagsMutation)

// newTelegramChatFeatureFlagsMutation creates new mutation for the TelegramChatFeatureFlags entity.
func newTelegramChatFeatureFlagsMutation(c config, op Op, opts ...telegramchatfeatureflagsOption) *TelegramChatFeatureFlagsMutation {
	m := &TelegramChatFeatureFlagsMutation{
		config:        c,
		op:            op,
		typ:           TypeTelegramChatFeatureFlags,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTelegramChatFeatureFlagsID sets the ID field of the mutation.
func withTelegramChatFeatureFlagsID(id uuid.UUID) telegramchatfeatureflagsOption {
	return func(m *TelegramChatFeatureFlagsMutation) {
		var (
			err   error
			once  sync.Once
			value *TelegramChatFeatureFlags
		)
		m.oldValue = func(ctx context.Context) (*TelegramChatFeatureFlags, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TelegramChatFeatureFlags.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTelegramChatFeatureFlags sets the old TelegramChatFeatureFlags of the mutation.
func withTelegramChatFeatureFlags(node *TelegramChatFeatureFlags) telegramchatfeatureflagsOption {
	return func(m *TelegramChatFeatureFlagsMutation) {
		m.oldValue = func(context.Context) (*TelegramChatFeatureFlags, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TelegramChatFeatureFlagsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TelegramChatFeatureFlagsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TelegramChatFeatureFlags entities.
func (m *TelegramChatFeatureFlagsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TelegramChatFeatureFlagsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TelegramChatFeatureFlagsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TelegramChatFeatureFlags.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChatID sets the "chat_id" field.
func (m *TelegramChatFeatureFlagsMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *TelegramChatFeatureFlagsMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the TelegramChatFeatureFlags entity.
// If the TelegramChatFeatureFlags object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatFeatureFlagsMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// AddChatID adds i to the "chat_id" field.
func (m *TelegramChatFeatureFlagsMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the "chat_id" field in this mutation.
func (m *TelegramChatFeatureFlagsMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *TelegramChatFeatureFlagsMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// SetChatType sets the "chat_type" field.
func (m *TelegramChatFeatureFlagsMutation) SetChatType(s string) {
	m.chat_type = &s
}

// ChatType returns the value of the "chat_type" field in the mutation.
func (m *TelegramChatFeatureFlagsMutation) ChatType() (r string, exists bool) {
	v := m.chat_type
	if v == nil {
		return
	}
	return *v, true
}

// OldChatType returns the old "chat_type" field's value of the TelegramChatFeatureFlags entity.
// If the TelegramChatFeatureFlags object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatFeatureFlagsMutation) OldChatType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatType: %w", err)
	}
	return oldValue.ChatType, nil
}

// ResetChatType resets all changes to the "chat_type" field.
func (m *TelegramChatFeatureFlagsMutation) ResetChatType() {
	m.chat_type = nil
}

// SetChatTitle sets the "chat_title" field.
func (m *TelegramChatFeatureFlagsMutation) SetChatTitle(s string) {
	m.chat_title = &s
}

// ChatTitle returns the value of the "chat_title" field in the mutation.
func (m *TelegramChatFeatureFlagsMutation) ChatTitle() (r string, exists bool) {
	v := m.chat_title
	if v == nil {
		return
	}
	return *v, true
}

// OldChatTitle returns the old "chat_title" field's value of the TelegramChatFeatureFlags entity.
// If the TelegramChatFeatureFlags object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatFeatureFlagsMutation) OldChatTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatTitle: %w", err)
	}
	return oldValue.ChatTitle, nil
}

// ResetChatTitle resets all changes to the "chat_title" field.
func (m *TelegramChatFeatureFlagsMutation) ResetChatTitle() {
	m.chat_title = nil
}

// SetFeatureChatHistoriesRecap sets the "feature_chat_histories_recap" field.
func (m *TelegramChatFeatureFlagsMutation) SetFeatureChatHistoriesRecap(b bool) {
	m.feature_chat_histories_recap = &b
}

// FeatureChatHistoriesRecap returns the value of the "feature_chat_histories_recap" field in the mutation.
func (m *TelegramChatFeatureFlagsMutation) FeatureChatHistoriesRecap() (r bool, exists bool) {
	v := m.feature_chat_histories_recap
	if v == nil {
		return
	}
	return *v, true
}

// OldFeatureChatHistoriesRecap returns the old "feature_chat_histories_recap" field's value of the TelegramChatFeatureFlags entity.
// If the TelegramChatFeatureFlags object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatFeatureFlagsMutation) OldFeatureChatHistoriesRecap(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeatureChatHistoriesRecap is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeatureChatHistoriesRecap requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeatureChatHistoriesRecap: %w", err)
	}
	return oldValue.FeatureChatHistoriesRecap, nil
}

// ResetFeatureChatHistoriesRecap resets all changes to the "feature_chat_histories_recap" field.
func (m *TelegramChatFeatureFlagsMutation) ResetFeatureChatHistoriesRecap() {
	m.feature_chat_histories_recap = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TelegramChatFeatureFlagsMutation) SetCreatedAt(i int64) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TelegramChatFeatureFlagsMutation) CreatedAt() (r int64, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TelegramChatFeatureFlags entity.
// If the TelegramChatFeatureFlags object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatFeatureFlagsMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *TelegramChatFeatureFlagsMutation) AddCreatedAt(i int64) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TelegramChatFeatureFlagsMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TelegramChatFeatureFlagsMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TelegramChatFeatureFlagsMutation) SetUpdatedAt(i int64) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TelegramChatFeatureFlagsMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TelegramChatFeatureFlags entity.
// If the TelegramChatFeatureFlags object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatFeatureFlagsMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *TelegramChatFeatureFlagsMutation) AddUpdatedAt(i int64) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TelegramChatFeatureFlagsMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TelegramChatFeatureFlagsMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// Where appends a list predicates to the TelegramChatFeatureFlagsMutation builder.
func (m *TelegramChatFeatureFlagsMutation) Where(ps ...predicate.TelegramChatFeatureFlags) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TelegramChatFeatureFlagsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TelegramChatFeatureFlagsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TelegramChatFeatureFlags, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TelegramChatFeatureFlagsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TelegramChatFeatureFlagsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TelegramChatFeatureFlags).
func (m *TelegramChatFeatureFlagsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TelegramChatFeatureFlagsMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.chat_id != nil {
		fields = append(fields, telegramchatfeatureflags.FieldChatID)
	}
	if m.chat_type != nil {
		fields = append(fields, telegramchatfeatureflags.FieldChatType)
	}
	if m.chat_title != nil {
		fields = append(fields, telegramchatfeatureflags.FieldChatTitle)
	}
	if m.feature_chat_histories_recap != nil {
		fields = append(fields, telegramchatfeatureflags.FieldFeatureChatHistoriesRecap)
	}
	if m.created_at != nil {
		fields = append(fields, telegramchatfeatureflags.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, telegramchatfeatureflags.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TelegramChatFeatureFlagsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case telegramchatfeatureflags.FieldChatID:
		return m.ChatID()
	case telegramchatfeatureflags.FieldChatType:
		return m.ChatType()
	case telegramchatfeatureflags.FieldChatTitle:
		return m.ChatTitle()
	case telegramchatfeatureflags.FieldFeatureChatHistoriesRecap:
		return m.FeatureChatHistoriesRecap()
	case telegramchatfeatureflags.FieldCreatedAt:
		return m.CreatedAt()
	case telegramchatfeatureflags.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TelegramChatFeatureFlagsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case telegramchatfeatureflags.FieldChatID:
		return m.OldChatID(ctx)
	case telegramchatfeatureflags.FieldChatType:
		return m.OldChatType(ctx)
	case telegramchatfeatureflags.FieldChatTitle:
		return m.OldChatTitle(ctx)
	case telegramchatfeatureflags.FieldFeatureChatHistoriesRecap:
		return m.OldFeatureChatHistoriesRecap(ctx)
	case telegramchatfeatureflags.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case telegramchatfeatureflags.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TelegramChatFeatureFlags field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramChatFeatureFlagsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case telegramchatfeatureflags.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case telegramchatfeatureflags.FieldChatType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatType(v)
		return nil
	case telegramchatfeatureflags.FieldChatTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatTitle(v)
		return nil
	case telegramchatfeatureflags.FieldFeatureChatHistoriesRecap:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeatureChatHistoriesRecap(v)
		return nil
	case telegramchatfeatureflags.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case telegramchatfeatureflags.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TelegramChatFeatureFlags field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TelegramChatFeatureFlagsMutation) AddedFields() []string {
	var fields []string
	if m.addchat_id != nil {
		fields = append(fields, telegramchatfeatureflags.FieldChatID)
	}
	if m.addcreated_at != nil {
		fields = append(fields, telegramchatfeatureflags.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, telegramchatfeatureflags.FieldUpdatedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TelegramChatFeatureFlagsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case telegramchatfeatureflags.FieldChatID:
		return m.AddedChatID()
	case telegramchatfeatureflags.FieldCreatedAt:
		return m.AddedCreatedAt()
	case telegramchatfeatureflags.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramChatFeatureFlagsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case telegramchatfeatureflags.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChatID(v)
		return nil
	case telegramchatfeatureflags.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case telegramchatfeatureflags.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TelegramChatFeatureFlags numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TelegramChatFeatureFlagsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TelegramChatFeatureFlagsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TelegramChatFeatureFlagsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TelegramChatFeatureFlags nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TelegramChatFeatureFlagsMutation) ResetField(name string) error {
	switch name {
	case telegramchatfeatureflags.FieldChatID:
		m.ResetChatID()
		return nil
	case telegramchatfeatureflags.FieldChatType:
		m.ResetChatType()
		return nil
	case telegramchatfeatureflags.FieldChatTitle:
		m.ResetChatTitle()
		return nil
	case telegramchatfeatureflags.FieldFeatureChatHistoriesRecap:
		m.ResetFeatureChatHistoriesRecap()
		return nil
	case telegramchatfeatureflags.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case telegramchatfeatureflags.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TelegramChatFeatureFlags field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TelegramChatFeatureFlagsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TelegramChatFeatureFlagsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TelegramChatFeatureFlagsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TelegramChatFeatureFlagsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TelegramChatFeatureFlagsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TelegramChatFeatureFlagsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TelegramChatFeatureFlagsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TelegramChatFeatureFlags unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TelegramChatFeatureFlagsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TelegramChatFeatureFlags edge %s", name)
}

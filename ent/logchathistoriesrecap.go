// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/logchathistoriesrecap"
)

// LogChatHistoriesRecap is the model entity for the LogChatHistoriesRecap schema.
type LogChatHistoriesRecap struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID int64 `json:"chat_id,omitempty"`
	// RecapInputs holds the value of the "recap_inputs" field.
	RecapInputs string `json:"recap_inputs,omitempty"`
	// RecapOutputs holds the value of the "recap_outputs" field.
	RecapOutputs string `json:"recap_outputs,omitempty"`
	// FromPlatform holds the value of the "from_platform" field.
	FromPlatform int `json:"from_platform,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LogChatHistoriesRecap) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case logchathistoriesrecap.FieldChatID, logchathistoriesrecap.FieldFromPlatform, logchathistoriesrecap.FieldCreatedAt, logchathistoriesrecap.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case logchathistoriesrecap.FieldRecapInputs, logchathistoriesrecap.FieldRecapOutputs:
			values[i] = new(sql.NullString)
		case logchathistoriesrecap.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LogChatHistoriesRecap fields.
func (lchr *LogChatHistoriesRecap) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logchathistoriesrecap.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				lchr.ID = *value
			}
		case logchathistoriesrecap.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				lchr.ChatID = value.Int64
			}
		case logchathistoriesrecap.FieldRecapInputs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recap_inputs", values[i])
			} else if value.Valid {
				lchr.RecapInputs = value.String
			}
		case logchathistoriesrecap.FieldRecapOutputs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recap_outputs", values[i])
			} else if value.Valid {
				lchr.RecapOutputs = value.String
			}
		case logchathistoriesrecap.FieldFromPlatform:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_platform", values[i])
			} else if value.Valid {
				lchr.FromPlatform = int(value.Int64)
			}
		case logchathistoriesrecap.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lchr.CreatedAt = value.Int64
			}
		case logchathistoriesrecap.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lchr.UpdatedAt = value.Int64
			}
		default:
			lchr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LogChatHistoriesRecap.
// This includes values selected through modifiers, order, etc.
func (lchr *LogChatHistoriesRecap) Value(name string) (ent.Value, error) {
	return lchr.selectValues.Get(name)
}

// Update returns a builder for updating this LogChatHistoriesRecap.
// Note that you need to call LogChatHistoriesRecap.Unwrap() before calling this method if this LogChatHistoriesRecap
// was returned from a transaction, and the transaction was committed or rolled back.
func (lchr *LogChatHistoriesRecap) Update() *LogChatHistoriesRecapUpdateOne {
	return NewLogChatHistoriesRecapClient(lchr.config).UpdateOne(lchr)
}

// Unwrap unwraps the LogChatHistoriesRecap entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lchr *LogChatHistoriesRecap) Unwrap() *LogChatHistoriesRecap {
	_tx, ok := lchr.config.driver.(*txDriver)
	if !ok {
		panic("ent: LogChatHistoriesRecap is not a transactional entity")
	}
	lchr.config.driver = _tx.drv
	return lchr
}

// String implements the fmt.Stringer.
func (lchr *LogChatHistoriesRecap) String() string {
	var builder strings.Builder
	builder.WriteString("LogChatHistoriesRecap(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lchr.ID))
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", lchr.ChatID))
	builder.WriteString(", ")
	builder.WriteString("recap_inputs=")
	builder.WriteString(lchr.RecapInputs)
	builder.WriteString(", ")
	builder.WriteString("recap_outputs=")
	builder.WriteString(lchr.RecapOutputs)
	builder.WriteString(", ")
	builder.WriteString("from_platform=")
	builder.WriteString(fmt.Sprintf("%v", lchr.FromPlatform))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", lchr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", lchr.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// LogChatHistoriesRecaps is a parsable slice of LogChatHistoriesRecap.
type LogChatHistoriesRecaps []*LogChatHistoriesRecap

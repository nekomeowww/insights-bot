// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/feedbacksummarizationsreactions"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
)

// FeedbackSummarizationsReactionsUpdate is the builder for updating FeedbackSummarizationsReactions entities.
type FeedbackSummarizationsReactionsUpdate struct {
	config
	hooks    []Hook
	mutation *FeedbackSummarizationsReactionsMutation
}

// Where appends a list predicates to the FeedbackSummarizationsReactionsUpdate builder.
func (fsru *FeedbackSummarizationsReactionsUpdate) Where(ps ...predicate.FeedbackSummarizationsReactions) *FeedbackSummarizationsReactionsUpdate {
	fsru.mutation.Where(ps...)
	return fsru
}

// SetChatID sets the "chat_id" field.
func (fsru *FeedbackSummarizationsReactionsUpdate) SetChatID(i int64) *FeedbackSummarizationsReactionsUpdate {
	fsru.mutation.ResetChatID()
	fsru.mutation.SetChatID(i)
	return fsru
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (fsru *FeedbackSummarizationsReactionsUpdate) SetNillableChatID(i *int64) *FeedbackSummarizationsReactionsUpdate {
	if i != nil {
		fsru.SetChatID(*i)
	}
	return fsru
}

// AddChatID adds i to the "chat_id" field.
func (fsru *FeedbackSummarizationsReactionsUpdate) AddChatID(i int64) *FeedbackSummarizationsReactionsUpdate {
	fsru.mutation.AddChatID(i)
	return fsru
}

// SetUserID sets the "user_id" field.
func (fsru *FeedbackSummarizationsReactionsUpdate) SetUserID(i int64) *FeedbackSummarizationsReactionsUpdate {
	fsru.mutation.ResetUserID()
	fsru.mutation.SetUserID(i)
	return fsru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fsru *FeedbackSummarizationsReactionsUpdate) SetNillableUserID(i *int64) *FeedbackSummarizationsReactionsUpdate {
	if i != nil {
		fsru.SetUserID(*i)
	}
	return fsru
}

// AddUserID adds i to the "user_id" field.
func (fsru *FeedbackSummarizationsReactionsUpdate) AddUserID(i int64) *FeedbackSummarizationsReactionsUpdate {
	fsru.mutation.AddUserID(i)
	return fsru
}

// SetType sets the "type" field.
func (fsru *FeedbackSummarizationsReactionsUpdate) SetType(f feedbacksummarizationsreactions.Type) *FeedbackSummarizationsReactionsUpdate {
	fsru.mutation.SetType(f)
	return fsru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fsru *FeedbackSummarizationsReactionsUpdate) SetNillableType(f *feedbacksummarizationsreactions.Type) *FeedbackSummarizationsReactionsUpdate {
	if f != nil {
		fsru.SetType(*f)
	}
	return fsru
}

// SetCreatedAt sets the "created_at" field.
func (fsru *FeedbackSummarizationsReactionsUpdate) SetCreatedAt(i int64) *FeedbackSummarizationsReactionsUpdate {
	fsru.mutation.ResetCreatedAt()
	fsru.mutation.SetCreatedAt(i)
	return fsru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fsru *FeedbackSummarizationsReactionsUpdate) SetNillableCreatedAt(i *int64) *FeedbackSummarizationsReactionsUpdate {
	if i != nil {
		fsru.SetCreatedAt(*i)
	}
	return fsru
}

// AddCreatedAt adds i to the "created_at" field.
func (fsru *FeedbackSummarizationsReactionsUpdate) AddCreatedAt(i int64) *FeedbackSummarizationsReactionsUpdate {
	fsru.mutation.AddCreatedAt(i)
	return fsru
}

// SetUpdatedAt sets the "updated_at" field.
func (fsru *FeedbackSummarizationsReactionsUpdate) SetUpdatedAt(i int64) *FeedbackSummarizationsReactionsUpdate {
	fsru.mutation.ResetUpdatedAt()
	fsru.mutation.SetUpdatedAt(i)
	return fsru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fsru *FeedbackSummarizationsReactionsUpdate) SetNillableUpdatedAt(i *int64) *FeedbackSummarizationsReactionsUpdate {
	if i != nil {
		fsru.SetUpdatedAt(*i)
	}
	return fsru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fsru *FeedbackSummarizationsReactionsUpdate) AddUpdatedAt(i int64) *FeedbackSummarizationsReactionsUpdate {
	fsru.mutation.AddUpdatedAt(i)
	return fsru
}

// Mutation returns the FeedbackSummarizationsReactionsMutation object of the builder.
func (fsru *FeedbackSummarizationsReactionsUpdate) Mutation() *FeedbackSummarizationsReactionsMutation {
	return fsru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fsru *FeedbackSummarizationsReactionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fsru.sqlSave, fsru.mutation, fsru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsru *FeedbackSummarizationsReactionsUpdate) SaveX(ctx context.Context) int {
	affected, err := fsru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fsru *FeedbackSummarizationsReactionsUpdate) Exec(ctx context.Context) error {
	_, err := fsru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsru *FeedbackSummarizationsReactionsUpdate) ExecX(ctx context.Context) {
	if err := fsru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsru *FeedbackSummarizationsReactionsUpdate) check() error {
	if v, ok := fsru.mutation.GetType(); ok {
		if err := feedbacksummarizationsreactions.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "FeedbackSummarizationsReactions.type": %w`, err)}
		}
	}
	return nil
}

func (fsru *FeedbackSummarizationsReactionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fsru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedbacksummarizationsreactions.Table, feedbacksummarizationsreactions.Columns, sqlgraph.NewFieldSpec(feedbacksummarizationsreactions.FieldID, field.TypeUUID))
	if ps := fsru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsru.mutation.ChatID(); ok {
		_spec.SetField(feedbacksummarizationsreactions.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := fsru.mutation.AddedChatID(); ok {
		_spec.AddField(feedbacksummarizationsreactions.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := fsru.mutation.UserID(); ok {
		_spec.SetField(feedbacksummarizationsreactions.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := fsru.mutation.AddedUserID(); ok {
		_spec.AddField(feedbacksummarizationsreactions.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := fsru.mutation.GetType(); ok {
		_spec.SetField(feedbacksummarizationsreactions.FieldType, field.TypeEnum, value)
	}
	if value, ok := fsru.mutation.CreatedAt(); ok {
		_spec.SetField(feedbacksummarizationsreactions.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := fsru.mutation.AddedCreatedAt(); ok {
		_spec.AddField(feedbacksummarizationsreactions.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := fsru.mutation.UpdatedAt(); ok {
		_spec.SetField(feedbacksummarizationsreactions.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := fsru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(feedbacksummarizationsreactions.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = fsru.schemaConfig.FeedbackSummarizationsReactions
	ctx = internal.NewSchemaConfigContext(ctx, fsru.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, fsru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedbacksummarizationsreactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fsru.mutation.done = true
	return n, nil
}

// FeedbackSummarizationsReactionsUpdateOne is the builder for updating a single FeedbackSummarizationsReactions entity.
type FeedbackSummarizationsReactionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedbackSummarizationsReactionsMutation
}

// SetChatID sets the "chat_id" field.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) SetChatID(i int64) *FeedbackSummarizationsReactionsUpdateOne {
	fsruo.mutation.ResetChatID()
	fsruo.mutation.SetChatID(i)
	return fsruo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) SetNillableChatID(i *int64) *FeedbackSummarizationsReactionsUpdateOne {
	if i != nil {
		fsruo.SetChatID(*i)
	}
	return fsruo
}

// AddChatID adds i to the "chat_id" field.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) AddChatID(i int64) *FeedbackSummarizationsReactionsUpdateOne {
	fsruo.mutation.AddChatID(i)
	return fsruo
}

// SetUserID sets the "user_id" field.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) SetUserID(i int64) *FeedbackSummarizationsReactionsUpdateOne {
	fsruo.mutation.ResetUserID()
	fsruo.mutation.SetUserID(i)
	return fsruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) SetNillableUserID(i *int64) *FeedbackSummarizationsReactionsUpdateOne {
	if i != nil {
		fsruo.SetUserID(*i)
	}
	return fsruo
}

// AddUserID adds i to the "user_id" field.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) AddUserID(i int64) *FeedbackSummarizationsReactionsUpdateOne {
	fsruo.mutation.AddUserID(i)
	return fsruo
}

// SetType sets the "type" field.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) SetType(f feedbacksummarizationsreactions.Type) *FeedbackSummarizationsReactionsUpdateOne {
	fsruo.mutation.SetType(f)
	return fsruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) SetNillableType(f *feedbacksummarizationsreactions.Type) *FeedbackSummarizationsReactionsUpdateOne {
	if f != nil {
		fsruo.SetType(*f)
	}
	return fsruo
}

// SetCreatedAt sets the "created_at" field.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) SetCreatedAt(i int64) *FeedbackSummarizationsReactionsUpdateOne {
	fsruo.mutation.ResetCreatedAt()
	fsruo.mutation.SetCreatedAt(i)
	return fsruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) SetNillableCreatedAt(i *int64) *FeedbackSummarizationsReactionsUpdateOne {
	if i != nil {
		fsruo.SetCreatedAt(*i)
	}
	return fsruo
}

// AddCreatedAt adds i to the "created_at" field.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) AddCreatedAt(i int64) *FeedbackSummarizationsReactionsUpdateOne {
	fsruo.mutation.AddCreatedAt(i)
	return fsruo
}

// SetUpdatedAt sets the "updated_at" field.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) SetUpdatedAt(i int64) *FeedbackSummarizationsReactionsUpdateOne {
	fsruo.mutation.ResetUpdatedAt()
	fsruo.mutation.SetUpdatedAt(i)
	return fsruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) SetNillableUpdatedAt(i *int64) *FeedbackSummarizationsReactionsUpdateOne {
	if i != nil {
		fsruo.SetUpdatedAt(*i)
	}
	return fsruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) AddUpdatedAt(i int64) *FeedbackSummarizationsReactionsUpdateOne {
	fsruo.mutation.AddUpdatedAt(i)
	return fsruo
}

// Mutation returns the FeedbackSummarizationsReactionsMutation object of the builder.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) Mutation() *FeedbackSummarizationsReactionsMutation {
	return fsruo.mutation
}

// Where appends a list predicates to the FeedbackSummarizationsReactionsUpdate builder.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) Where(ps ...predicate.FeedbackSummarizationsReactions) *FeedbackSummarizationsReactionsUpdateOne {
	fsruo.mutation.Where(ps...)
	return fsruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) Select(field string, fields ...string) *FeedbackSummarizationsReactionsUpdateOne {
	fsruo.fields = append([]string{field}, fields...)
	return fsruo
}

// Save executes the query and returns the updated FeedbackSummarizationsReactions entity.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) Save(ctx context.Context) (*FeedbackSummarizationsReactions, error) {
	return withHooks(ctx, fsruo.sqlSave, fsruo.mutation, fsruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) SaveX(ctx context.Context) *FeedbackSummarizationsReactions {
	node, err := fsruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) Exec(ctx context.Context) error {
	_, err := fsruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) ExecX(ctx context.Context) {
	if err := fsruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsruo *FeedbackSummarizationsReactionsUpdateOne) check() error {
	if v, ok := fsruo.mutation.GetType(); ok {
		if err := feedbacksummarizationsreactions.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "FeedbackSummarizationsReactions.type": %w`, err)}
		}
	}
	return nil
}

func (fsruo *FeedbackSummarizationsReactionsUpdateOne) sqlSave(ctx context.Context) (_node *FeedbackSummarizationsReactions, err error) {
	if err := fsruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedbacksummarizationsreactions.Table, feedbacksummarizationsreactions.Columns, sqlgraph.NewFieldSpec(feedbacksummarizationsreactions.FieldID, field.TypeUUID))
	id, ok := fsruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeedbackSummarizationsReactions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fsruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedbacksummarizationsreactions.FieldID)
		for _, f := range fields {
			if !feedbacksummarizationsreactions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feedbacksummarizationsreactions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fsruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsruo.mutation.ChatID(); ok {
		_spec.SetField(feedbacksummarizationsreactions.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := fsruo.mutation.AddedChatID(); ok {
		_spec.AddField(feedbacksummarizationsreactions.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := fsruo.mutation.UserID(); ok {
		_spec.SetField(feedbacksummarizationsreactions.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := fsruo.mutation.AddedUserID(); ok {
		_spec.AddField(feedbacksummarizationsreactions.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := fsruo.mutation.GetType(); ok {
		_spec.SetField(feedbacksummarizationsreactions.FieldType, field.TypeEnum, value)
	}
	if value, ok := fsruo.mutation.CreatedAt(); ok {
		_spec.SetField(feedbacksummarizationsreactions.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := fsruo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(feedbacksummarizationsreactions.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := fsruo.mutation.UpdatedAt(); ok {
		_spec.SetField(feedbacksummarizationsreactions.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := fsruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(feedbacksummarizationsreactions.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = fsruo.schemaConfig.FeedbackSummarizationsReactions
	ctx = internal.NewSchemaConfigContext(ctx, fsruo.schemaConfig)
	_node = &FeedbackSummarizationsReactions{config: fsruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fsruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedbacksummarizationsreactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fsruo.mutation.done = true
	return _node, nil
}

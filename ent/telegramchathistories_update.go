// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/telegramchathistories"
)

// TelegramChatHistoriesUpdate is the builder for updating TelegramChatHistories entities.
type TelegramChatHistoriesUpdate struct {
	config
	hooks    []Hook
	mutation *TelegramChatHistoriesMutation
}

// Where appends a list predicates to the TelegramChatHistoriesUpdate builder.
func (tchu *TelegramChatHistoriesUpdate) Where(ps ...predicate.TelegramChatHistories) *TelegramChatHistoriesUpdate {
	tchu.mutation.Where(ps...)
	return tchu
}

// SetChatID sets the "chat_id" field.
func (tchu *TelegramChatHistoriesUpdate) SetChatID(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.ResetChatID()
	tchu.mutation.SetChatID(i)
	return tchu
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableChatID(i *int64) *TelegramChatHistoriesUpdate {
	if i != nil {
		tchu.SetChatID(*i)
	}
	return tchu
}

// AddChatID adds i to the "chat_id" field.
func (tchu *TelegramChatHistoriesUpdate) AddChatID(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.AddChatID(i)
	return tchu
}

// SetMessageID sets the "message_id" field.
func (tchu *TelegramChatHistoriesUpdate) SetMessageID(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.ResetMessageID()
	tchu.mutation.SetMessageID(i)
	return tchu
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableMessageID(i *int64) *TelegramChatHistoriesUpdate {
	if i != nil {
		tchu.SetMessageID(*i)
	}
	return tchu
}

// AddMessageID adds i to the "message_id" field.
func (tchu *TelegramChatHistoriesUpdate) AddMessageID(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.AddMessageID(i)
	return tchu
}

// SetUserID sets the "user_id" field.
func (tchu *TelegramChatHistoriesUpdate) SetUserID(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.ResetUserID()
	tchu.mutation.SetUserID(i)
	return tchu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableUserID(i *int64) *TelegramChatHistoriesUpdate {
	if i != nil {
		tchu.SetUserID(*i)
	}
	return tchu
}

// AddUserID adds i to the "user_id" field.
func (tchu *TelegramChatHistoriesUpdate) AddUserID(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.AddUserID(i)
	return tchu
}

// SetUsername sets the "username" field.
func (tchu *TelegramChatHistoriesUpdate) SetUsername(s string) *TelegramChatHistoriesUpdate {
	tchu.mutation.SetUsername(s)
	return tchu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableUsername(s *string) *TelegramChatHistoriesUpdate {
	if s != nil {
		tchu.SetUsername(*s)
	}
	return tchu
}

// SetFullName sets the "full_name" field.
func (tchu *TelegramChatHistoriesUpdate) SetFullName(s string) *TelegramChatHistoriesUpdate {
	tchu.mutation.SetFullName(s)
	return tchu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableFullName(s *string) *TelegramChatHistoriesUpdate {
	if s != nil {
		tchu.SetFullName(*s)
	}
	return tchu
}

// SetText sets the "text" field.
func (tchu *TelegramChatHistoriesUpdate) SetText(s string) *TelegramChatHistoriesUpdate {
	tchu.mutation.SetText(s)
	return tchu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableText(s *string) *TelegramChatHistoriesUpdate {
	if s != nil {
		tchu.SetText(*s)
	}
	return tchu
}

// SetRepliedToMessageID sets the "replied_to_message_id" field.
func (tchu *TelegramChatHistoriesUpdate) SetRepliedToMessageID(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.ResetRepliedToMessageID()
	tchu.mutation.SetRepliedToMessageID(i)
	return tchu
}

// SetNillableRepliedToMessageID sets the "replied_to_message_id" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableRepliedToMessageID(i *int64) *TelegramChatHistoriesUpdate {
	if i != nil {
		tchu.SetRepliedToMessageID(*i)
	}
	return tchu
}

// AddRepliedToMessageID adds i to the "replied_to_message_id" field.
func (tchu *TelegramChatHistoriesUpdate) AddRepliedToMessageID(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.AddRepliedToMessageID(i)
	return tchu
}

// SetRepliedToUserID sets the "replied_to_user_id" field.
func (tchu *TelegramChatHistoriesUpdate) SetRepliedToUserID(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.ResetRepliedToUserID()
	tchu.mutation.SetRepliedToUserID(i)
	return tchu
}

// SetNillableRepliedToUserID sets the "replied_to_user_id" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableRepliedToUserID(i *int64) *TelegramChatHistoriesUpdate {
	if i != nil {
		tchu.SetRepliedToUserID(*i)
	}
	return tchu
}

// AddRepliedToUserID adds i to the "replied_to_user_id" field.
func (tchu *TelegramChatHistoriesUpdate) AddRepliedToUserID(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.AddRepliedToUserID(i)
	return tchu
}

// SetRepliedToFullName sets the "replied_to_full_name" field.
func (tchu *TelegramChatHistoriesUpdate) SetRepliedToFullName(s string) *TelegramChatHistoriesUpdate {
	tchu.mutation.SetRepliedToFullName(s)
	return tchu
}

// SetNillableRepliedToFullName sets the "replied_to_full_name" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableRepliedToFullName(s *string) *TelegramChatHistoriesUpdate {
	if s != nil {
		tchu.SetRepliedToFullName(*s)
	}
	return tchu
}

// SetRepliedToUsername sets the "replied_to_username" field.
func (tchu *TelegramChatHistoriesUpdate) SetRepliedToUsername(s string) *TelegramChatHistoriesUpdate {
	tchu.mutation.SetRepliedToUsername(s)
	return tchu
}

// SetNillableRepliedToUsername sets the "replied_to_username" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableRepliedToUsername(s *string) *TelegramChatHistoriesUpdate {
	if s != nil {
		tchu.SetRepliedToUsername(*s)
	}
	return tchu
}

// SetRepliedToText sets the "replied_to_text" field.
func (tchu *TelegramChatHistoriesUpdate) SetRepliedToText(s string) *TelegramChatHistoriesUpdate {
	tchu.mutation.SetRepliedToText(s)
	return tchu
}

// SetNillableRepliedToText sets the "replied_to_text" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableRepliedToText(s *string) *TelegramChatHistoriesUpdate {
	if s != nil {
		tchu.SetRepliedToText(*s)
	}
	return tchu
}

// SetChattedAt sets the "chatted_at" field.
func (tchu *TelegramChatHistoriesUpdate) SetChattedAt(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.ResetChattedAt()
	tchu.mutation.SetChattedAt(i)
	return tchu
}

// SetNillableChattedAt sets the "chatted_at" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableChattedAt(i *int64) *TelegramChatHistoriesUpdate {
	if i != nil {
		tchu.SetChattedAt(*i)
	}
	return tchu
}

// AddChattedAt adds i to the "chatted_at" field.
func (tchu *TelegramChatHistoriesUpdate) AddChattedAt(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.AddChattedAt(i)
	return tchu
}

// SetEmbedded sets the "embedded" field.
func (tchu *TelegramChatHistoriesUpdate) SetEmbedded(b bool) *TelegramChatHistoriesUpdate {
	tchu.mutation.SetEmbedded(b)
	return tchu
}

// SetNillableEmbedded sets the "embedded" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableEmbedded(b *bool) *TelegramChatHistoriesUpdate {
	if b != nil {
		tchu.SetEmbedded(*b)
	}
	return tchu
}

// SetCreatedAt sets the "created_at" field.
func (tchu *TelegramChatHistoriesUpdate) SetCreatedAt(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.ResetCreatedAt()
	tchu.mutation.SetCreatedAt(i)
	return tchu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableCreatedAt(i *int64) *TelegramChatHistoriesUpdate {
	if i != nil {
		tchu.SetCreatedAt(*i)
	}
	return tchu
}

// AddCreatedAt adds i to the "created_at" field.
func (tchu *TelegramChatHistoriesUpdate) AddCreatedAt(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.AddCreatedAt(i)
	return tchu
}

// SetUpdatedAt sets the "updated_at" field.
func (tchu *TelegramChatHistoriesUpdate) SetUpdatedAt(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.ResetUpdatedAt()
	tchu.mutation.SetUpdatedAt(i)
	return tchu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tchu *TelegramChatHistoriesUpdate) SetNillableUpdatedAt(i *int64) *TelegramChatHistoriesUpdate {
	if i != nil {
		tchu.SetUpdatedAt(*i)
	}
	return tchu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tchu *TelegramChatHistoriesUpdate) AddUpdatedAt(i int64) *TelegramChatHistoriesUpdate {
	tchu.mutation.AddUpdatedAt(i)
	return tchu
}

// Mutation returns the TelegramChatHistoriesMutation object of the builder.
func (tchu *TelegramChatHistoriesUpdate) Mutation() *TelegramChatHistoriesMutation {
	return tchu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tchu *TelegramChatHistoriesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TelegramChatHistoriesMutation](ctx, tchu.sqlSave, tchu.mutation, tchu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tchu *TelegramChatHistoriesUpdate) SaveX(ctx context.Context) int {
	affected, err := tchu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tchu *TelegramChatHistoriesUpdate) Exec(ctx context.Context) error {
	_, err := tchu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tchu *TelegramChatHistoriesUpdate) ExecX(ctx context.Context) {
	if err := tchu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tchu *TelegramChatHistoriesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramchathistories.Table, telegramchathistories.Columns, sqlgraph.NewFieldSpec(telegramchathistories.FieldID, field.TypeUUID))
	if ps := tchu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tchu.mutation.ChatID(); ok {
		_spec.SetField(telegramchathistories.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.AddedChatID(); ok {
		_spec.AddField(telegramchathistories.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.MessageID(); ok {
		_spec.SetField(telegramchathistories.FieldMessageID, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.AddedMessageID(); ok {
		_spec.AddField(telegramchathistories.FieldMessageID, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.UserID(); ok {
		_spec.SetField(telegramchathistories.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.AddedUserID(); ok {
		_spec.AddField(telegramchathistories.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.Username(); ok {
		_spec.SetField(telegramchathistories.FieldUsername, field.TypeString, value)
	}
	if value, ok := tchu.mutation.FullName(); ok {
		_spec.SetField(telegramchathistories.FieldFullName, field.TypeString, value)
	}
	if value, ok := tchu.mutation.Text(); ok {
		_spec.SetField(telegramchathistories.FieldText, field.TypeString, value)
	}
	if value, ok := tchu.mutation.RepliedToMessageID(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToMessageID, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.AddedRepliedToMessageID(); ok {
		_spec.AddField(telegramchathistories.FieldRepliedToMessageID, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.RepliedToUserID(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToUserID, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.AddedRepliedToUserID(); ok {
		_spec.AddField(telegramchathistories.FieldRepliedToUserID, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.RepliedToFullName(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToFullName, field.TypeString, value)
	}
	if value, ok := tchu.mutation.RepliedToUsername(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToUsername, field.TypeString, value)
	}
	if value, ok := tchu.mutation.RepliedToText(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToText, field.TypeString, value)
	}
	if value, ok := tchu.mutation.ChattedAt(); ok {
		_spec.SetField(telegramchathistories.FieldChattedAt, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.AddedChattedAt(); ok {
		_spec.AddField(telegramchathistories.FieldChattedAt, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.Embedded(); ok {
		_spec.SetField(telegramchathistories.FieldEmbedded, field.TypeBool, value)
	}
	if value, ok := tchu.mutation.CreatedAt(); ok {
		_spec.SetField(telegramchathistories.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(telegramchathistories.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.UpdatedAt(); ok {
		_spec.SetField(telegramchathistories.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tchu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(telegramchathistories.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = tchu.schemaConfig.TelegramChatHistories
	ctx = internal.NewSchemaConfigContext(ctx, tchu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, tchu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramchathistories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tchu.mutation.done = true
	return n, nil
}

// TelegramChatHistoriesUpdateOne is the builder for updating a single TelegramChatHistories entity.
type TelegramChatHistoriesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelegramChatHistoriesMutation
}

// SetChatID sets the "chat_id" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetChatID(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.ResetChatID()
	tchuo.mutation.SetChatID(i)
	return tchuo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableChatID(i *int64) *TelegramChatHistoriesUpdateOne {
	if i != nil {
		tchuo.SetChatID(*i)
	}
	return tchuo
}

// AddChatID adds i to the "chat_id" field.
func (tchuo *TelegramChatHistoriesUpdateOne) AddChatID(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.AddChatID(i)
	return tchuo
}

// SetMessageID sets the "message_id" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetMessageID(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.ResetMessageID()
	tchuo.mutation.SetMessageID(i)
	return tchuo
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableMessageID(i *int64) *TelegramChatHistoriesUpdateOne {
	if i != nil {
		tchuo.SetMessageID(*i)
	}
	return tchuo
}

// AddMessageID adds i to the "message_id" field.
func (tchuo *TelegramChatHistoriesUpdateOne) AddMessageID(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.AddMessageID(i)
	return tchuo
}

// SetUserID sets the "user_id" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetUserID(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.ResetUserID()
	tchuo.mutation.SetUserID(i)
	return tchuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableUserID(i *int64) *TelegramChatHistoriesUpdateOne {
	if i != nil {
		tchuo.SetUserID(*i)
	}
	return tchuo
}

// AddUserID adds i to the "user_id" field.
func (tchuo *TelegramChatHistoriesUpdateOne) AddUserID(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.AddUserID(i)
	return tchuo
}

// SetUsername sets the "username" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetUsername(s string) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.SetUsername(s)
	return tchuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableUsername(s *string) *TelegramChatHistoriesUpdateOne {
	if s != nil {
		tchuo.SetUsername(*s)
	}
	return tchuo
}

// SetFullName sets the "full_name" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetFullName(s string) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.SetFullName(s)
	return tchuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableFullName(s *string) *TelegramChatHistoriesUpdateOne {
	if s != nil {
		tchuo.SetFullName(*s)
	}
	return tchuo
}

// SetText sets the "text" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetText(s string) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.SetText(s)
	return tchuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableText(s *string) *TelegramChatHistoriesUpdateOne {
	if s != nil {
		tchuo.SetText(*s)
	}
	return tchuo
}

// SetRepliedToMessageID sets the "replied_to_message_id" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetRepliedToMessageID(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.ResetRepliedToMessageID()
	tchuo.mutation.SetRepliedToMessageID(i)
	return tchuo
}

// SetNillableRepliedToMessageID sets the "replied_to_message_id" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableRepliedToMessageID(i *int64) *TelegramChatHistoriesUpdateOne {
	if i != nil {
		tchuo.SetRepliedToMessageID(*i)
	}
	return tchuo
}

// AddRepliedToMessageID adds i to the "replied_to_message_id" field.
func (tchuo *TelegramChatHistoriesUpdateOne) AddRepliedToMessageID(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.AddRepliedToMessageID(i)
	return tchuo
}

// SetRepliedToUserID sets the "replied_to_user_id" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetRepliedToUserID(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.ResetRepliedToUserID()
	tchuo.mutation.SetRepliedToUserID(i)
	return tchuo
}

// SetNillableRepliedToUserID sets the "replied_to_user_id" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableRepliedToUserID(i *int64) *TelegramChatHistoriesUpdateOne {
	if i != nil {
		tchuo.SetRepliedToUserID(*i)
	}
	return tchuo
}

// AddRepliedToUserID adds i to the "replied_to_user_id" field.
func (tchuo *TelegramChatHistoriesUpdateOne) AddRepliedToUserID(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.AddRepliedToUserID(i)
	return tchuo
}

// SetRepliedToFullName sets the "replied_to_full_name" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetRepliedToFullName(s string) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.SetRepliedToFullName(s)
	return tchuo
}

// SetNillableRepliedToFullName sets the "replied_to_full_name" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableRepliedToFullName(s *string) *TelegramChatHistoriesUpdateOne {
	if s != nil {
		tchuo.SetRepliedToFullName(*s)
	}
	return tchuo
}

// SetRepliedToUsername sets the "replied_to_username" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetRepliedToUsername(s string) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.SetRepliedToUsername(s)
	return tchuo
}

// SetNillableRepliedToUsername sets the "replied_to_username" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableRepliedToUsername(s *string) *TelegramChatHistoriesUpdateOne {
	if s != nil {
		tchuo.SetRepliedToUsername(*s)
	}
	return tchuo
}

// SetRepliedToText sets the "replied_to_text" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetRepliedToText(s string) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.SetRepliedToText(s)
	return tchuo
}

// SetNillableRepliedToText sets the "replied_to_text" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableRepliedToText(s *string) *TelegramChatHistoriesUpdateOne {
	if s != nil {
		tchuo.SetRepliedToText(*s)
	}
	return tchuo
}

// SetChattedAt sets the "chatted_at" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetChattedAt(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.ResetChattedAt()
	tchuo.mutation.SetChattedAt(i)
	return tchuo
}

// SetNillableChattedAt sets the "chatted_at" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableChattedAt(i *int64) *TelegramChatHistoriesUpdateOne {
	if i != nil {
		tchuo.SetChattedAt(*i)
	}
	return tchuo
}

// AddChattedAt adds i to the "chatted_at" field.
func (tchuo *TelegramChatHistoriesUpdateOne) AddChattedAt(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.AddChattedAt(i)
	return tchuo
}

// SetEmbedded sets the "embedded" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetEmbedded(b bool) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.SetEmbedded(b)
	return tchuo
}

// SetNillableEmbedded sets the "embedded" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableEmbedded(b *bool) *TelegramChatHistoriesUpdateOne {
	if b != nil {
		tchuo.SetEmbedded(*b)
	}
	return tchuo
}

// SetCreatedAt sets the "created_at" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetCreatedAt(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.ResetCreatedAt()
	tchuo.mutation.SetCreatedAt(i)
	return tchuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableCreatedAt(i *int64) *TelegramChatHistoriesUpdateOne {
	if i != nil {
		tchuo.SetCreatedAt(*i)
	}
	return tchuo
}

// AddCreatedAt adds i to the "created_at" field.
func (tchuo *TelegramChatHistoriesUpdateOne) AddCreatedAt(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.AddCreatedAt(i)
	return tchuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tchuo *TelegramChatHistoriesUpdateOne) SetUpdatedAt(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.ResetUpdatedAt()
	tchuo.mutation.SetUpdatedAt(i)
	return tchuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tchuo *TelegramChatHistoriesUpdateOne) SetNillableUpdatedAt(i *int64) *TelegramChatHistoriesUpdateOne {
	if i != nil {
		tchuo.SetUpdatedAt(*i)
	}
	return tchuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tchuo *TelegramChatHistoriesUpdateOne) AddUpdatedAt(i int64) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.AddUpdatedAt(i)
	return tchuo
}

// Mutation returns the TelegramChatHistoriesMutation object of the builder.
func (tchuo *TelegramChatHistoriesUpdateOne) Mutation() *TelegramChatHistoriesMutation {
	return tchuo.mutation
}

// Where appends a list predicates to the TelegramChatHistoriesUpdate builder.
func (tchuo *TelegramChatHistoriesUpdateOne) Where(ps ...predicate.TelegramChatHistories) *TelegramChatHistoriesUpdateOne {
	tchuo.mutation.Where(ps...)
	return tchuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tchuo *TelegramChatHistoriesUpdateOne) Select(field string, fields ...string) *TelegramChatHistoriesUpdateOne {
	tchuo.fields = append([]string{field}, fields...)
	return tchuo
}

// Save executes the query and returns the updated TelegramChatHistories entity.
func (tchuo *TelegramChatHistoriesUpdateOne) Save(ctx context.Context) (*TelegramChatHistories, error) {
	return withHooks[*TelegramChatHistories, TelegramChatHistoriesMutation](ctx, tchuo.sqlSave, tchuo.mutation, tchuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tchuo *TelegramChatHistoriesUpdateOne) SaveX(ctx context.Context) *TelegramChatHistories {
	node, err := tchuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tchuo *TelegramChatHistoriesUpdateOne) Exec(ctx context.Context) error {
	_, err := tchuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tchuo *TelegramChatHistoriesUpdateOne) ExecX(ctx context.Context) {
	if err := tchuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tchuo *TelegramChatHistoriesUpdateOne) sqlSave(ctx context.Context) (_node *TelegramChatHistories, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramchathistories.Table, telegramchathistories.Columns, sqlgraph.NewFieldSpec(telegramchathistories.FieldID, field.TypeUUID))
	id, ok := tchuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TelegramChatHistories.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tchuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telegramchathistories.FieldID)
		for _, f := range fields {
			if !telegramchathistories.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telegramchathistories.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tchuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tchuo.mutation.ChatID(); ok {
		_spec.SetField(telegramchathistories.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.AddedChatID(); ok {
		_spec.AddField(telegramchathistories.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.MessageID(); ok {
		_spec.SetField(telegramchathistories.FieldMessageID, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.AddedMessageID(); ok {
		_spec.AddField(telegramchathistories.FieldMessageID, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.UserID(); ok {
		_spec.SetField(telegramchathistories.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.AddedUserID(); ok {
		_spec.AddField(telegramchathistories.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.Username(); ok {
		_spec.SetField(telegramchathistories.FieldUsername, field.TypeString, value)
	}
	if value, ok := tchuo.mutation.FullName(); ok {
		_spec.SetField(telegramchathistories.FieldFullName, field.TypeString, value)
	}
	if value, ok := tchuo.mutation.Text(); ok {
		_spec.SetField(telegramchathistories.FieldText, field.TypeString, value)
	}
	if value, ok := tchuo.mutation.RepliedToMessageID(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToMessageID, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.AddedRepliedToMessageID(); ok {
		_spec.AddField(telegramchathistories.FieldRepliedToMessageID, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.RepliedToUserID(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToUserID, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.AddedRepliedToUserID(); ok {
		_spec.AddField(telegramchathistories.FieldRepliedToUserID, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.RepliedToFullName(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToFullName, field.TypeString, value)
	}
	if value, ok := tchuo.mutation.RepliedToUsername(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToUsername, field.TypeString, value)
	}
	if value, ok := tchuo.mutation.RepliedToText(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToText, field.TypeString, value)
	}
	if value, ok := tchuo.mutation.ChattedAt(); ok {
		_spec.SetField(telegramchathistories.FieldChattedAt, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.AddedChattedAt(); ok {
		_spec.AddField(telegramchathistories.FieldChattedAt, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.Embedded(); ok {
		_spec.SetField(telegramchathistories.FieldEmbedded, field.TypeBool, value)
	}
	if value, ok := tchuo.mutation.CreatedAt(); ok {
		_spec.SetField(telegramchathistories.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(telegramchathistories.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.UpdatedAt(); ok {
		_spec.SetField(telegramchathistories.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tchuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(telegramchathistories.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = tchuo.schemaConfig.TelegramChatHistories
	ctx = internal.NewSchemaConfigContext(ctx, tchuo.schemaConfig)
	_node = &TelegramChatHistories{config: tchuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tchuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramchathistories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tchuo.mutation.done = true
	return _node, nil
}

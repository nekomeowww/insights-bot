// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/feedbackchathistoriesrecapsreactions"
)

// FeedbackChatHistoriesRecapsReactionsCreate is the builder for creating a FeedbackChatHistoriesRecapsReactions entity.
type FeedbackChatHistoriesRecapsReactionsCreate struct {
	config
	mutation *FeedbackChatHistoriesRecapsReactionsMutation
	hooks    []Hook
}

// SetChatID sets the "chat_id" field.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetChatID(i int64) *FeedbackChatHistoriesRecapsReactionsCreate {
	fchrrc.mutation.SetChatID(i)
	return fchrrc
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetNillableChatID(i *int64) *FeedbackChatHistoriesRecapsReactionsCreate {
	if i != nil {
		fchrrc.SetChatID(*i)
	}
	return fchrrc
}

// SetLogID sets the "log_id" field.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetLogID(u uuid.UUID) *FeedbackChatHistoriesRecapsReactionsCreate {
	fchrrc.mutation.SetLogID(u)
	return fchrrc
}

// SetNillableLogID sets the "log_id" field if the given value is not nil.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetNillableLogID(u *uuid.UUID) *FeedbackChatHistoriesRecapsReactionsCreate {
	if u != nil {
		fchrrc.SetLogID(*u)
	}
	return fchrrc
}

// SetUserID sets the "user_id" field.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetUserID(i int64) *FeedbackChatHistoriesRecapsReactionsCreate {
	fchrrc.mutation.SetUserID(i)
	return fchrrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetNillableUserID(i *int64) *FeedbackChatHistoriesRecapsReactionsCreate {
	if i != nil {
		fchrrc.SetUserID(*i)
	}
	return fchrrc
}

// SetType sets the "type" field.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetType(f feedbackchathistoriesrecapsreactions.Type) *FeedbackChatHistoriesRecapsReactionsCreate {
	fchrrc.mutation.SetType(f)
	return fchrrc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetNillableType(f *feedbackchathistoriesrecapsreactions.Type) *FeedbackChatHistoriesRecapsReactionsCreate {
	if f != nil {
		fchrrc.SetType(*f)
	}
	return fchrrc
}

// SetCreatedAt sets the "created_at" field.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetCreatedAt(i int64) *FeedbackChatHistoriesRecapsReactionsCreate {
	fchrrc.mutation.SetCreatedAt(i)
	return fchrrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetNillableCreatedAt(i *int64) *FeedbackChatHistoriesRecapsReactionsCreate {
	if i != nil {
		fchrrc.SetCreatedAt(*i)
	}
	return fchrrc
}

// SetUpdatedAt sets the "updated_at" field.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetUpdatedAt(i int64) *FeedbackChatHistoriesRecapsReactionsCreate {
	fchrrc.mutation.SetUpdatedAt(i)
	return fchrrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetNillableUpdatedAt(i *int64) *FeedbackChatHistoriesRecapsReactionsCreate {
	if i != nil {
		fchrrc.SetUpdatedAt(*i)
	}
	return fchrrc
}

// SetID sets the "id" field.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetID(u uuid.UUID) *FeedbackChatHistoriesRecapsReactionsCreate {
	fchrrc.mutation.SetID(u)
	return fchrrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SetNillableID(u *uuid.UUID) *FeedbackChatHistoriesRecapsReactionsCreate {
	if u != nil {
		fchrrc.SetID(*u)
	}
	return fchrrc
}

// Mutation returns the FeedbackChatHistoriesRecapsReactionsMutation object of the builder.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) Mutation() *FeedbackChatHistoriesRecapsReactionsMutation {
	return fchrrc.mutation
}

// Save creates the FeedbackChatHistoriesRecapsReactions in the database.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) Save(ctx context.Context) (*FeedbackChatHistoriesRecapsReactions, error) {
	fchrrc.defaults()
	return withHooks(ctx, fchrrc.sqlSave, fchrrc.mutation, fchrrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) SaveX(ctx context.Context) *FeedbackChatHistoriesRecapsReactions {
	v, err := fchrrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) Exec(ctx context.Context) error {
	_, err := fchrrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) ExecX(ctx context.Context) {
	if err := fchrrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) defaults() {
	if _, ok := fchrrc.mutation.ChatID(); !ok {
		v := feedbackchathistoriesrecapsreactions.DefaultChatID
		fchrrc.mutation.SetChatID(v)
	}
	if _, ok := fchrrc.mutation.LogID(); !ok {
		v := feedbackchathistoriesrecapsreactions.DefaultLogID()
		fchrrc.mutation.SetLogID(v)
	}
	if _, ok := fchrrc.mutation.UserID(); !ok {
		v := feedbackchathistoriesrecapsreactions.DefaultUserID
		fchrrc.mutation.SetUserID(v)
	}
	if _, ok := fchrrc.mutation.GetType(); !ok {
		v := feedbackchathistoriesrecapsreactions.DefaultType
		fchrrc.mutation.SetType(v)
	}
	if _, ok := fchrrc.mutation.CreatedAt(); !ok {
		v := feedbackchathistoriesrecapsreactions.DefaultCreatedAt()
		fchrrc.mutation.SetCreatedAt(v)
	}
	if _, ok := fchrrc.mutation.UpdatedAt(); !ok {
		v := feedbackchathistoriesrecapsreactions.DefaultUpdatedAt()
		fchrrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fchrrc.mutation.ID(); !ok {
		v := feedbackchathistoriesrecapsreactions.DefaultID()
		fchrrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) check() error {
	if _, ok := fchrrc.mutation.ChatID(); !ok {
		return &ValidationError{Name: "chat_id", err: errors.New(`ent: missing required field "FeedbackChatHistoriesRecapsReactions.chat_id"`)}
	}
	if _, ok := fchrrc.mutation.LogID(); !ok {
		return &ValidationError{Name: "log_id", err: errors.New(`ent: missing required field "FeedbackChatHistoriesRecapsReactions.log_id"`)}
	}
	if _, ok := fchrrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "FeedbackChatHistoriesRecapsReactions.user_id"`)}
	}
	if _, ok := fchrrc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "FeedbackChatHistoriesRecapsReactions.type"`)}
	}
	if v, ok := fchrrc.mutation.GetType(); ok {
		if err := feedbackchathistoriesrecapsreactions.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "FeedbackChatHistoriesRecapsReactions.type": %w`, err)}
		}
	}
	if _, ok := fchrrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FeedbackChatHistoriesRecapsReactions.created_at"`)}
	}
	if _, ok := fchrrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FeedbackChatHistoriesRecapsReactions.updated_at"`)}
	}
	return nil
}

func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) sqlSave(ctx context.Context) (*FeedbackChatHistoriesRecapsReactions, error) {
	if err := fchrrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fchrrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fchrrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fchrrc.mutation.id = &_node.ID
	fchrrc.mutation.done = true
	return _node, nil
}

func (fchrrc *FeedbackChatHistoriesRecapsReactionsCreate) createSpec() (*FeedbackChatHistoriesRecapsReactions, *sqlgraph.CreateSpec) {
	var (
		_node = &FeedbackChatHistoriesRecapsReactions{config: fchrrc.config}
		_spec = sqlgraph.NewCreateSpec(feedbackchathistoriesrecapsreactions.Table, sqlgraph.NewFieldSpec(feedbackchathistoriesrecapsreactions.FieldID, field.TypeUUID))
	)
	_spec.Schema = fchrrc.schemaConfig.FeedbackChatHistoriesRecapsReactions
	if id, ok := fchrrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fchrrc.mutation.ChatID(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldChatID, field.TypeInt64, value)
		_node.ChatID = value
	}
	if value, ok := fchrrc.mutation.LogID(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldLogID, field.TypeUUID, value)
		_node.LogID = value
	}
	if value, ok := fchrrc.mutation.UserID(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := fchrrc.mutation.GetType(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := fchrrc.mutation.CreatedAt(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := fchrrc.mutation.UpdatedAt(); ok {
		_spec.SetField(feedbackchathistoriesrecapsreactions.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// FeedbackChatHistoriesRecapsReactionsCreateBulk is the builder for creating many FeedbackChatHistoriesRecapsReactions entities in bulk.
type FeedbackChatHistoriesRecapsReactionsCreateBulk struct {
	config
	builders []*FeedbackChatHistoriesRecapsReactionsCreate
}

// Save creates the FeedbackChatHistoriesRecapsReactions entities in the database.
func (fchrrcb *FeedbackChatHistoriesRecapsReactionsCreateBulk) Save(ctx context.Context) ([]*FeedbackChatHistoriesRecapsReactions, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fchrrcb.builders))
	nodes := make([]*FeedbackChatHistoriesRecapsReactions, len(fchrrcb.builders))
	mutators := make([]Mutator, len(fchrrcb.builders))
	for i := range fchrrcb.builders {
		func(i int, root context.Context) {
			builder := fchrrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedbackChatHistoriesRecapsReactionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fchrrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fchrrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fchrrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fchrrcb *FeedbackChatHistoriesRecapsReactionsCreateBulk) SaveX(ctx context.Context) []*FeedbackChatHistoriesRecapsReactions {
	v, err := fchrrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fchrrcb *FeedbackChatHistoriesRecapsReactionsCreateBulk) Exec(ctx context.Context) error {
	_, err := fchrrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fchrrcb *FeedbackChatHistoriesRecapsReactionsCreateBulk) ExecX(ctx context.Context) {
	if err := fchrrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/telegramchatautorecapssubscribers"
)

// TelegramChatAutoRecapsSubscribersCreate is the builder for creating a TelegramChatAutoRecapsSubscribers entity.
type TelegramChatAutoRecapsSubscribersCreate struct {
	config
	mutation *TelegramChatAutoRecapsSubscribersMutation
	hooks    []Hook
}

// SetChatID sets the "chat_id" field.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) SetChatID(i int64) *TelegramChatAutoRecapsSubscribersCreate {
	tcarsc.mutation.SetChatID(i)
	return tcarsc
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) SetNillableChatID(i *int64) *TelegramChatAutoRecapsSubscribersCreate {
	if i != nil {
		tcarsc.SetChatID(*i)
	}
	return tcarsc
}

// SetUserID sets the "user_id" field.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) SetUserID(i int64) *TelegramChatAutoRecapsSubscribersCreate {
	tcarsc.mutation.SetUserID(i)
	return tcarsc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) SetNillableUserID(i *int64) *TelegramChatAutoRecapsSubscribersCreate {
	if i != nil {
		tcarsc.SetUserID(*i)
	}
	return tcarsc
}

// SetCreatedAt sets the "created_at" field.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) SetCreatedAt(i int64) *TelegramChatAutoRecapsSubscribersCreate {
	tcarsc.mutation.SetCreatedAt(i)
	return tcarsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) SetNillableCreatedAt(i *int64) *TelegramChatAutoRecapsSubscribersCreate {
	if i != nil {
		tcarsc.SetCreatedAt(*i)
	}
	return tcarsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) SetUpdatedAt(i int64) *TelegramChatAutoRecapsSubscribersCreate {
	tcarsc.mutation.SetUpdatedAt(i)
	return tcarsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) SetNillableUpdatedAt(i *int64) *TelegramChatAutoRecapsSubscribersCreate {
	if i != nil {
		tcarsc.SetUpdatedAt(*i)
	}
	return tcarsc
}

// SetID sets the "id" field.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) SetID(u uuid.UUID) *TelegramChatAutoRecapsSubscribersCreate {
	tcarsc.mutation.SetID(u)
	return tcarsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) SetNillableID(u *uuid.UUID) *TelegramChatAutoRecapsSubscribersCreate {
	if u != nil {
		tcarsc.SetID(*u)
	}
	return tcarsc
}

// Mutation returns the TelegramChatAutoRecapsSubscribersMutation object of the builder.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) Mutation() *TelegramChatAutoRecapsSubscribersMutation {
	return tcarsc.mutation
}

// Save creates the TelegramChatAutoRecapsSubscribers in the database.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) Save(ctx context.Context) (*TelegramChatAutoRecapsSubscribers, error) {
	tcarsc.defaults()
	return withHooks(ctx, tcarsc.sqlSave, tcarsc.mutation, tcarsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) SaveX(ctx context.Context) *TelegramChatAutoRecapsSubscribers {
	v, err := tcarsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) Exec(ctx context.Context) error {
	_, err := tcarsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) ExecX(ctx context.Context) {
	if err := tcarsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) defaults() {
	if _, ok := tcarsc.mutation.ChatID(); !ok {
		v := telegramchatautorecapssubscribers.DefaultChatID
		tcarsc.mutation.SetChatID(v)
	}
	if _, ok := tcarsc.mutation.UserID(); !ok {
		v := telegramchatautorecapssubscribers.DefaultUserID
		tcarsc.mutation.SetUserID(v)
	}
	if _, ok := tcarsc.mutation.CreatedAt(); !ok {
		v := telegramchatautorecapssubscribers.DefaultCreatedAt()
		tcarsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcarsc.mutation.UpdatedAt(); !ok {
		v := telegramchatautorecapssubscribers.DefaultUpdatedAt()
		tcarsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcarsc.mutation.ID(); !ok {
		v := telegramchatautorecapssubscribers.DefaultID()
		tcarsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) check() error {
	if _, ok := tcarsc.mutation.ChatID(); !ok {
		return &ValidationError{Name: "chat_id", err: errors.New(`ent: missing required field "TelegramChatAutoRecapsSubscribers.chat_id"`)}
	}
	if _, ok := tcarsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TelegramChatAutoRecapsSubscribers.user_id"`)}
	}
	if _, ok := tcarsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TelegramChatAutoRecapsSubscribers.created_at"`)}
	}
	if _, ok := tcarsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TelegramChatAutoRecapsSubscribers.updated_at"`)}
	}
	return nil
}

func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) sqlSave(ctx context.Context) (*TelegramChatAutoRecapsSubscribers, error) {
	if err := tcarsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcarsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcarsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tcarsc.mutation.id = &_node.ID
	tcarsc.mutation.done = true
	return _node, nil
}

func (tcarsc *TelegramChatAutoRecapsSubscribersCreate) createSpec() (*TelegramChatAutoRecapsSubscribers, *sqlgraph.CreateSpec) {
	var (
		_node = &TelegramChatAutoRecapsSubscribers{config: tcarsc.config}
		_spec = sqlgraph.NewCreateSpec(telegramchatautorecapssubscribers.Table, sqlgraph.NewFieldSpec(telegramchatautorecapssubscribers.FieldID, field.TypeUUID))
	)
	_spec.Schema = tcarsc.schemaConfig.TelegramChatAutoRecapsSubscribers
	if id, ok := tcarsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tcarsc.mutation.ChatID(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldChatID, field.TypeInt64, value)
		_node.ChatID = value
	}
	if value, ok := tcarsc.mutation.UserID(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := tcarsc.mutation.CreatedAt(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tcarsc.mutation.UpdatedAt(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// TelegramChatAutoRecapsSubscribersCreateBulk is the builder for creating many TelegramChatAutoRecapsSubscribers entities in bulk.
type TelegramChatAutoRecapsSubscribersCreateBulk struct {
	config
	err      error
	builders []*TelegramChatAutoRecapsSubscribersCreate
}

// Save creates the TelegramChatAutoRecapsSubscribers entities in the database.
func (tcarscb *TelegramChatAutoRecapsSubscribersCreateBulk) Save(ctx context.Context) ([]*TelegramChatAutoRecapsSubscribers, error) {
	if tcarscb.err != nil {
		return nil, tcarscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcarscb.builders))
	nodes := make([]*TelegramChatAutoRecapsSubscribers, len(tcarscb.builders))
	mutators := make([]Mutator, len(tcarscb.builders))
	for i := range tcarscb.builders {
		func(i int, root context.Context) {
			builder := tcarscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TelegramChatAutoRecapsSubscribersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcarscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcarscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcarscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcarscb *TelegramChatAutoRecapsSubscribersCreateBulk) SaveX(ctx context.Context) []*TelegramChatAutoRecapsSubscribers {
	v, err := tcarscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcarscb *TelegramChatAutoRecapsSubscribersCreateBulk) Exec(ctx context.Context) error {
	_, err := tcarscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcarscb *TelegramChatAutoRecapsSubscribersCreateBulk) ExecX(ctx context.Context) {
	if err := tcarscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/metricopenaichatcompletiontokenusage"
	"github.com/nekomeowww/insights-bot/ent/predicate"
)

// MetricOpenAIChatCompletionTokenUsageUpdate is the builder for updating MetricOpenAIChatCompletionTokenUsage entities.
type MetricOpenAIChatCompletionTokenUsageUpdate struct {
	config
	hooks    []Hook
	mutation *MetricOpenAIChatCompletionTokenUsageMutation
}

// Where appends a list predicates to the MetricOpenAIChatCompletionTokenUsageUpdate builder.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) Where(ps ...predicate.MetricOpenAIChatCompletionTokenUsage) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.Where(ps...)
	return moacctuu
}

// SetPromptOperation sets the "prompt_operation" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetPromptOperation(s string) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.SetPromptOperation(s)
	return moacctuu
}

// SetNillablePromptOperation sets the "prompt_operation" field if the given value is not nil.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetNillablePromptOperation(s *string) *MetricOpenAIChatCompletionTokenUsageUpdate {
	if s != nil {
		moacctuu.SetPromptOperation(*s)
	}
	return moacctuu
}

// SetPromptCharacterLength sets the "prompt_character_length" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetPromptCharacterLength(i int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.ResetPromptCharacterLength()
	moacctuu.mutation.SetPromptCharacterLength(i)
	return moacctuu
}

// SetNillablePromptCharacterLength sets the "prompt_character_length" field if the given value is not nil.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetNillablePromptCharacterLength(i *int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	if i != nil {
		moacctuu.SetPromptCharacterLength(*i)
	}
	return moacctuu
}

// AddPromptCharacterLength adds i to the "prompt_character_length" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) AddPromptCharacterLength(i int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.AddPromptCharacterLength(i)
	return moacctuu
}

// SetPromptTokenUsage sets the "prompt_token_usage" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetPromptTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.ResetPromptTokenUsage()
	moacctuu.mutation.SetPromptTokenUsage(i)
	return moacctuu
}

// SetNillablePromptTokenUsage sets the "prompt_token_usage" field if the given value is not nil.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetNillablePromptTokenUsage(i *int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	if i != nil {
		moacctuu.SetPromptTokenUsage(*i)
	}
	return moacctuu
}

// AddPromptTokenUsage adds i to the "prompt_token_usage" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) AddPromptTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.AddPromptTokenUsage(i)
	return moacctuu
}

// SetCompletionCharacterLength sets the "completion_character_length" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetCompletionCharacterLength(i int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.ResetCompletionCharacterLength()
	moacctuu.mutation.SetCompletionCharacterLength(i)
	return moacctuu
}

// SetNillableCompletionCharacterLength sets the "completion_character_length" field if the given value is not nil.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetNillableCompletionCharacterLength(i *int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	if i != nil {
		moacctuu.SetCompletionCharacterLength(*i)
	}
	return moacctuu
}

// AddCompletionCharacterLength adds i to the "completion_character_length" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) AddCompletionCharacterLength(i int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.AddCompletionCharacterLength(i)
	return moacctuu
}

// SetCompletionTokenUsage sets the "completion_token_usage" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetCompletionTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.ResetCompletionTokenUsage()
	moacctuu.mutation.SetCompletionTokenUsage(i)
	return moacctuu
}

// SetNillableCompletionTokenUsage sets the "completion_token_usage" field if the given value is not nil.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetNillableCompletionTokenUsage(i *int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	if i != nil {
		moacctuu.SetCompletionTokenUsage(*i)
	}
	return moacctuu
}

// AddCompletionTokenUsage adds i to the "completion_token_usage" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) AddCompletionTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.AddCompletionTokenUsage(i)
	return moacctuu
}

// SetTotalTokenUsage sets the "total_token_usage" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetTotalTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.ResetTotalTokenUsage()
	moacctuu.mutation.SetTotalTokenUsage(i)
	return moacctuu
}

// SetNillableTotalTokenUsage sets the "total_token_usage" field if the given value is not nil.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetNillableTotalTokenUsage(i *int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	if i != nil {
		moacctuu.SetTotalTokenUsage(*i)
	}
	return moacctuu
}

// AddTotalTokenUsage adds i to the "total_token_usage" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) AddTotalTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.AddTotalTokenUsage(i)
	return moacctuu
}

// SetCreatedAt sets the "created_at" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetCreatedAt(i int64) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.ResetCreatedAt()
	moacctuu.mutation.SetCreatedAt(i)
	return moacctuu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SetNillableCreatedAt(i *int64) *MetricOpenAIChatCompletionTokenUsageUpdate {
	if i != nil {
		moacctuu.SetCreatedAt(*i)
	}
	return moacctuu
}

// AddCreatedAt adds i to the "created_at" field.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) AddCreatedAt(i int64) *MetricOpenAIChatCompletionTokenUsageUpdate {
	moacctuu.mutation.AddCreatedAt(i)
	return moacctuu
}

// Mutation returns the MetricOpenAIChatCompletionTokenUsageMutation object of the builder.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) Mutation() *MetricOpenAIChatCompletionTokenUsageMutation {
	return moacctuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, moacctuu.sqlSave, moacctuu.mutation, moacctuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) SaveX(ctx context.Context) int {
	affected, err := moacctuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) Exec(ctx context.Context) error {
	_, err := moacctuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) ExecX(ctx context.Context) {
	if err := moacctuu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (moacctuu *MetricOpenAIChatCompletionTokenUsageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(metricopenaichatcompletiontokenusage.Table, metricopenaichatcompletiontokenusage.Columns, sqlgraph.NewFieldSpec(metricopenaichatcompletiontokenusage.FieldID, field.TypeUUID))
	if ps := moacctuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := moacctuu.mutation.PromptOperation(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldPromptOperation, field.TypeString, value)
	}
	if value, ok := moacctuu.mutation.PromptCharacterLength(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldPromptCharacterLength, field.TypeInt, value)
	}
	if value, ok := moacctuu.mutation.AddedPromptCharacterLength(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldPromptCharacterLength, field.TypeInt, value)
	}
	if value, ok := moacctuu.mutation.PromptTokenUsage(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldPromptTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuu.mutation.AddedPromptTokenUsage(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldPromptTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuu.mutation.CompletionCharacterLength(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldCompletionCharacterLength, field.TypeInt, value)
	}
	if value, ok := moacctuu.mutation.AddedCompletionCharacterLength(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldCompletionCharacterLength, field.TypeInt, value)
	}
	if value, ok := moacctuu.mutation.CompletionTokenUsage(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldCompletionTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuu.mutation.AddedCompletionTokenUsage(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldCompletionTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuu.mutation.TotalTokenUsage(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldTotalTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuu.mutation.AddedTotalTokenUsage(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldTotalTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuu.mutation.CreatedAt(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := moacctuu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldCreatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = moacctuu.schemaConfig.MetricOpenAIChatCompletionTokenUsage
	ctx = internal.NewSchemaConfigContext(ctx, moacctuu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, moacctuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metricopenaichatcompletiontokenusage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	moacctuu.mutation.done = true
	return n, nil
}

// MetricOpenAIChatCompletionTokenUsageUpdateOne is the builder for updating a single MetricOpenAIChatCompletionTokenUsage entity.
type MetricOpenAIChatCompletionTokenUsageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetricOpenAIChatCompletionTokenUsageMutation
}

// SetPromptOperation sets the "prompt_operation" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetPromptOperation(s string) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.SetPromptOperation(s)
	return moacctuuo
}

// SetNillablePromptOperation sets the "prompt_operation" field if the given value is not nil.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetNillablePromptOperation(s *string) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	if s != nil {
		moacctuuo.SetPromptOperation(*s)
	}
	return moacctuuo
}

// SetPromptCharacterLength sets the "prompt_character_length" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetPromptCharacterLength(i int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.ResetPromptCharacterLength()
	moacctuuo.mutation.SetPromptCharacterLength(i)
	return moacctuuo
}

// SetNillablePromptCharacterLength sets the "prompt_character_length" field if the given value is not nil.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetNillablePromptCharacterLength(i *int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	if i != nil {
		moacctuuo.SetPromptCharacterLength(*i)
	}
	return moacctuuo
}

// AddPromptCharacterLength adds i to the "prompt_character_length" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) AddPromptCharacterLength(i int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.AddPromptCharacterLength(i)
	return moacctuuo
}

// SetPromptTokenUsage sets the "prompt_token_usage" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetPromptTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.ResetPromptTokenUsage()
	moacctuuo.mutation.SetPromptTokenUsage(i)
	return moacctuuo
}

// SetNillablePromptTokenUsage sets the "prompt_token_usage" field if the given value is not nil.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetNillablePromptTokenUsage(i *int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	if i != nil {
		moacctuuo.SetPromptTokenUsage(*i)
	}
	return moacctuuo
}

// AddPromptTokenUsage adds i to the "prompt_token_usage" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) AddPromptTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.AddPromptTokenUsage(i)
	return moacctuuo
}

// SetCompletionCharacterLength sets the "completion_character_length" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetCompletionCharacterLength(i int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.ResetCompletionCharacterLength()
	moacctuuo.mutation.SetCompletionCharacterLength(i)
	return moacctuuo
}

// SetNillableCompletionCharacterLength sets the "completion_character_length" field if the given value is not nil.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetNillableCompletionCharacterLength(i *int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	if i != nil {
		moacctuuo.SetCompletionCharacterLength(*i)
	}
	return moacctuuo
}

// AddCompletionCharacterLength adds i to the "completion_character_length" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) AddCompletionCharacterLength(i int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.AddCompletionCharacterLength(i)
	return moacctuuo
}

// SetCompletionTokenUsage sets the "completion_token_usage" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetCompletionTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.ResetCompletionTokenUsage()
	moacctuuo.mutation.SetCompletionTokenUsage(i)
	return moacctuuo
}

// SetNillableCompletionTokenUsage sets the "completion_token_usage" field if the given value is not nil.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetNillableCompletionTokenUsage(i *int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	if i != nil {
		moacctuuo.SetCompletionTokenUsage(*i)
	}
	return moacctuuo
}

// AddCompletionTokenUsage adds i to the "completion_token_usage" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) AddCompletionTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.AddCompletionTokenUsage(i)
	return moacctuuo
}

// SetTotalTokenUsage sets the "total_token_usage" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetTotalTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.ResetTotalTokenUsage()
	moacctuuo.mutation.SetTotalTokenUsage(i)
	return moacctuuo
}

// SetNillableTotalTokenUsage sets the "total_token_usage" field if the given value is not nil.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetNillableTotalTokenUsage(i *int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	if i != nil {
		moacctuuo.SetTotalTokenUsage(*i)
	}
	return moacctuuo
}

// AddTotalTokenUsage adds i to the "total_token_usage" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) AddTotalTokenUsage(i int) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.AddTotalTokenUsage(i)
	return moacctuuo
}

// SetCreatedAt sets the "created_at" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetCreatedAt(i int64) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.ResetCreatedAt()
	moacctuuo.mutation.SetCreatedAt(i)
	return moacctuuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SetNillableCreatedAt(i *int64) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	if i != nil {
		moacctuuo.SetCreatedAt(*i)
	}
	return moacctuuo
}

// AddCreatedAt adds i to the "created_at" field.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) AddCreatedAt(i int64) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.AddCreatedAt(i)
	return moacctuuo
}

// Mutation returns the MetricOpenAIChatCompletionTokenUsageMutation object of the builder.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) Mutation() *MetricOpenAIChatCompletionTokenUsageMutation {
	return moacctuuo.mutation
}

// Where appends a list predicates to the MetricOpenAIChatCompletionTokenUsageUpdate builder.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) Where(ps ...predicate.MetricOpenAIChatCompletionTokenUsage) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.mutation.Where(ps...)
	return moacctuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) Select(field string, fields ...string) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	moacctuuo.fields = append([]string{field}, fields...)
	return moacctuuo
}

// Save executes the query and returns the updated MetricOpenAIChatCompletionTokenUsage entity.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) Save(ctx context.Context) (*MetricOpenAIChatCompletionTokenUsage, error) {
	return withHooks(ctx, moacctuuo.sqlSave, moacctuuo.mutation, moacctuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) SaveX(ctx context.Context) *MetricOpenAIChatCompletionTokenUsage {
	node, err := moacctuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) Exec(ctx context.Context) error {
	_, err := moacctuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) ExecX(ctx context.Context) {
	if err := moacctuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (moacctuuo *MetricOpenAIChatCompletionTokenUsageUpdateOne) sqlSave(ctx context.Context) (_node *MetricOpenAIChatCompletionTokenUsage, err error) {
	_spec := sqlgraph.NewUpdateSpec(metricopenaichatcompletiontokenusage.Table, metricopenaichatcompletiontokenusage.Columns, sqlgraph.NewFieldSpec(metricopenaichatcompletiontokenusage.FieldID, field.TypeUUID))
	id, ok := moacctuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MetricOpenAIChatCompletionTokenUsage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := moacctuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metricopenaichatcompletiontokenusage.FieldID)
		for _, f := range fields {
			if !metricopenaichatcompletiontokenusage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metricopenaichatcompletiontokenusage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := moacctuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := moacctuuo.mutation.PromptOperation(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldPromptOperation, field.TypeString, value)
	}
	if value, ok := moacctuuo.mutation.PromptCharacterLength(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldPromptCharacterLength, field.TypeInt, value)
	}
	if value, ok := moacctuuo.mutation.AddedPromptCharacterLength(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldPromptCharacterLength, field.TypeInt, value)
	}
	if value, ok := moacctuuo.mutation.PromptTokenUsage(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldPromptTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuuo.mutation.AddedPromptTokenUsage(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldPromptTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuuo.mutation.CompletionCharacterLength(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldCompletionCharacterLength, field.TypeInt, value)
	}
	if value, ok := moacctuuo.mutation.AddedCompletionCharacterLength(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldCompletionCharacterLength, field.TypeInt, value)
	}
	if value, ok := moacctuuo.mutation.CompletionTokenUsage(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldCompletionTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuuo.mutation.AddedCompletionTokenUsage(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldCompletionTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuuo.mutation.TotalTokenUsage(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldTotalTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuuo.mutation.AddedTotalTokenUsage(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldTotalTokenUsage, field.TypeInt, value)
	}
	if value, ok := moacctuuo.mutation.CreatedAt(); ok {
		_spec.SetField(metricopenaichatcompletiontokenusage.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := moacctuuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(metricopenaichatcompletiontokenusage.FieldCreatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = moacctuuo.schemaConfig.MetricOpenAIChatCompletionTokenUsage
	ctx = internal.NewSchemaConfigContext(ctx, moacctuuo.schemaConfig)
	_node = &MetricOpenAIChatCompletionTokenUsage{config: moacctuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, moacctuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metricopenaichatcompletiontokenusage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	moacctuuo.mutation.done = true
	return _node, nil
}

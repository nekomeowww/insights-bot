// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/telegramchathistories"
)

// TelegramChatHistoriesCreate is the builder for creating a TelegramChatHistories entity.
type TelegramChatHistoriesCreate struct {
	config
	mutation *TelegramChatHistoriesMutation
	hooks    []Hook
}

// SetChatID sets the "chat_id" field.
func (tchc *TelegramChatHistoriesCreate) SetChatID(i int64) *TelegramChatHistoriesCreate {
	tchc.mutation.SetChatID(i)
	return tchc
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableChatID(i *int64) *TelegramChatHistoriesCreate {
	if i != nil {
		tchc.SetChatID(*i)
	}
	return tchc
}

// SetMessageID sets the "message_id" field.
func (tchc *TelegramChatHistoriesCreate) SetMessageID(i int64) *TelegramChatHistoriesCreate {
	tchc.mutation.SetMessageID(i)
	return tchc
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableMessageID(i *int64) *TelegramChatHistoriesCreate {
	if i != nil {
		tchc.SetMessageID(*i)
	}
	return tchc
}

// SetUserID sets the "user_id" field.
func (tchc *TelegramChatHistoriesCreate) SetUserID(i int64) *TelegramChatHistoriesCreate {
	tchc.mutation.SetUserID(i)
	return tchc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableUserID(i *int64) *TelegramChatHistoriesCreate {
	if i != nil {
		tchc.SetUserID(*i)
	}
	return tchc
}

// SetUsername sets the "username" field.
func (tchc *TelegramChatHistoriesCreate) SetUsername(s string) *TelegramChatHistoriesCreate {
	tchc.mutation.SetUsername(s)
	return tchc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableUsername(s *string) *TelegramChatHistoriesCreate {
	if s != nil {
		tchc.SetUsername(*s)
	}
	return tchc
}

// SetFullName sets the "full_name" field.
func (tchc *TelegramChatHistoriesCreate) SetFullName(s string) *TelegramChatHistoriesCreate {
	tchc.mutation.SetFullName(s)
	return tchc
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableFullName(s *string) *TelegramChatHistoriesCreate {
	if s != nil {
		tchc.SetFullName(*s)
	}
	return tchc
}

// SetText sets the "text" field.
func (tchc *TelegramChatHistoriesCreate) SetText(s string) *TelegramChatHistoriesCreate {
	tchc.mutation.SetText(s)
	return tchc
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableText(s *string) *TelegramChatHistoriesCreate {
	if s != nil {
		tchc.SetText(*s)
	}
	return tchc
}

// SetRepliedToMessageID sets the "replied_to_message_id" field.
func (tchc *TelegramChatHistoriesCreate) SetRepliedToMessageID(i int64) *TelegramChatHistoriesCreate {
	tchc.mutation.SetRepliedToMessageID(i)
	return tchc
}

// SetNillableRepliedToMessageID sets the "replied_to_message_id" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableRepliedToMessageID(i *int64) *TelegramChatHistoriesCreate {
	if i != nil {
		tchc.SetRepliedToMessageID(*i)
	}
	return tchc
}

// SetRepliedToUserID sets the "replied_to_user_id" field.
func (tchc *TelegramChatHistoriesCreate) SetRepliedToUserID(i int64) *TelegramChatHistoriesCreate {
	tchc.mutation.SetRepliedToUserID(i)
	return tchc
}

// SetNillableRepliedToUserID sets the "replied_to_user_id" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableRepliedToUserID(i *int64) *TelegramChatHistoriesCreate {
	if i != nil {
		tchc.SetRepliedToUserID(*i)
	}
	return tchc
}

// SetRepliedToFullName sets the "replied_to_full_name" field.
func (tchc *TelegramChatHistoriesCreate) SetRepliedToFullName(s string) *TelegramChatHistoriesCreate {
	tchc.mutation.SetRepliedToFullName(s)
	return tchc
}

// SetNillableRepliedToFullName sets the "replied_to_full_name" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableRepliedToFullName(s *string) *TelegramChatHistoriesCreate {
	if s != nil {
		tchc.SetRepliedToFullName(*s)
	}
	return tchc
}

// SetRepliedToUsername sets the "replied_to_username" field.
func (tchc *TelegramChatHistoriesCreate) SetRepliedToUsername(s string) *TelegramChatHistoriesCreate {
	tchc.mutation.SetRepliedToUsername(s)
	return tchc
}

// SetNillableRepliedToUsername sets the "replied_to_username" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableRepliedToUsername(s *string) *TelegramChatHistoriesCreate {
	if s != nil {
		tchc.SetRepliedToUsername(*s)
	}
	return tchc
}

// SetRepliedToText sets the "replied_to_text" field.
func (tchc *TelegramChatHistoriesCreate) SetRepliedToText(s string) *TelegramChatHistoriesCreate {
	tchc.mutation.SetRepliedToText(s)
	return tchc
}

// SetNillableRepliedToText sets the "replied_to_text" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableRepliedToText(s *string) *TelegramChatHistoriesCreate {
	if s != nil {
		tchc.SetRepliedToText(*s)
	}
	return tchc
}

// SetChattedAt sets the "chatted_at" field.
func (tchc *TelegramChatHistoriesCreate) SetChattedAt(i int64) *TelegramChatHistoriesCreate {
	tchc.mutation.SetChattedAt(i)
	return tchc
}

// SetNillableChattedAt sets the "chatted_at" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableChattedAt(i *int64) *TelegramChatHistoriesCreate {
	if i != nil {
		tchc.SetChattedAt(*i)
	}
	return tchc
}

// SetEmbedded sets the "embedded" field.
func (tchc *TelegramChatHistoriesCreate) SetEmbedded(b bool) *TelegramChatHistoriesCreate {
	tchc.mutation.SetEmbedded(b)
	return tchc
}

// SetNillableEmbedded sets the "embedded" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableEmbedded(b *bool) *TelegramChatHistoriesCreate {
	if b != nil {
		tchc.SetEmbedded(*b)
	}
	return tchc
}

// SetCreatedAt sets the "created_at" field.
func (tchc *TelegramChatHistoriesCreate) SetCreatedAt(i int64) *TelegramChatHistoriesCreate {
	tchc.mutation.SetCreatedAt(i)
	return tchc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableCreatedAt(i *int64) *TelegramChatHistoriesCreate {
	if i != nil {
		tchc.SetCreatedAt(*i)
	}
	return tchc
}

// SetUpdatedAt sets the "updated_at" field.
func (tchc *TelegramChatHistoriesCreate) SetUpdatedAt(i int64) *TelegramChatHistoriesCreate {
	tchc.mutation.SetUpdatedAt(i)
	return tchc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableUpdatedAt(i *int64) *TelegramChatHistoriesCreate {
	if i != nil {
		tchc.SetUpdatedAt(*i)
	}
	return tchc
}

// SetID sets the "id" field.
func (tchc *TelegramChatHistoriesCreate) SetID(u uuid.UUID) *TelegramChatHistoriesCreate {
	tchc.mutation.SetID(u)
	return tchc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tchc *TelegramChatHistoriesCreate) SetNillableID(u *uuid.UUID) *TelegramChatHistoriesCreate {
	if u != nil {
		tchc.SetID(*u)
	}
	return tchc
}

// Mutation returns the TelegramChatHistoriesMutation object of the builder.
func (tchc *TelegramChatHistoriesCreate) Mutation() *TelegramChatHistoriesMutation {
	return tchc.mutation
}

// Save creates the TelegramChatHistories in the database.
func (tchc *TelegramChatHistoriesCreate) Save(ctx context.Context) (*TelegramChatHistories, error) {
	tchc.defaults()
	return withHooks[*TelegramChatHistories, TelegramChatHistoriesMutation](ctx, tchc.sqlSave, tchc.mutation, tchc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tchc *TelegramChatHistoriesCreate) SaveX(ctx context.Context) *TelegramChatHistories {
	v, err := tchc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tchc *TelegramChatHistoriesCreate) Exec(ctx context.Context) error {
	_, err := tchc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tchc *TelegramChatHistoriesCreate) ExecX(ctx context.Context) {
	if err := tchc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tchc *TelegramChatHistoriesCreate) defaults() {
	if _, ok := tchc.mutation.ChatID(); !ok {
		v := telegramchathistories.DefaultChatID
		tchc.mutation.SetChatID(v)
	}
	if _, ok := tchc.mutation.MessageID(); !ok {
		v := telegramchathistories.DefaultMessageID
		tchc.mutation.SetMessageID(v)
	}
	if _, ok := tchc.mutation.UserID(); !ok {
		v := telegramchathistories.DefaultUserID
		tchc.mutation.SetUserID(v)
	}
	if _, ok := tchc.mutation.Username(); !ok {
		v := telegramchathistories.DefaultUsername
		tchc.mutation.SetUsername(v)
	}
	if _, ok := tchc.mutation.FullName(); !ok {
		v := telegramchathistories.DefaultFullName
		tchc.mutation.SetFullName(v)
	}
	if _, ok := tchc.mutation.Text(); !ok {
		v := telegramchathistories.DefaultText
		tchc.mutation.SetText(v)
	}
	if _, ok := tchc.mutation.RepliedToMessageID(); !ok {
		v := telegramchathistories.DefaultRepliedToMessageID
		tchc.mutation.SetRepliedToMessageID(v)
	}
	if _, ok := tchc.mutation.RepliedToUserID(); !ok {
		v := telegramchathistories.DefaultRepliedToUserID
		tchc.mutation.SetRepliedToUserID(v)
	}
	if _, ok := tchc.mutation.RepliedToFullName(); !ok {
		v := telegramchathistories.DefaultRepliedToFullName
		tchc.mutation.SetRepliedToFullName(v)
	}
	if _, ok := tchc.mutation.RepliedToUsername(); !ok {
		v := telegramchathistories.DefaultRepliedToUsername
		tchc.mutation.SetRepliedToUsername(v)
	}
	if _, ok := tchc.mutation.RepliedToText(); !ok {
		v := telegramchathistories.DefaultRepliedToText
		tchc.mutation.SetRepliedToText(v)
	}
	if _, ok := tchc.mutation.ChattedAt(); !ok {
		v := telegramchathistories.DefaultChattedAt
		tchc.mutation.SetChattedAt(v)
	}
	if _, ok := tchc.mutation.Embedded(); !ok {
		v := telegramchathistories.DefaultEmbedded
		tchc.mutation.SetEmbedded(v)
	}
	if _, ok := tchc.mutation.CreatedAt(); !ok {
		v := telegramchathistories.DefaultCreatedAt()
		tchc.mutation.SetCreatedAt(v)
	}
	if _, ok := tchc.mutation.UpdatedAt(); !ok {
		v := telegramchathistories.DefaultUpdatedAt()
		tchc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tchc.mutation.ID(); !ok {
		v := telegramchathistories.DefaultID()
		tchc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tchc *TelegramChatHistoriesCreate) check() error {
	if _, ok := tchc.mutation.ChatID(); !ok {
		return &ValidationError{Name: "chat_id", err: errors.New(`ent: missing required field "TelegramChatHistories.chat_id"`)}
	}
	if _, ok := tchc.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`ent: missing required field "TelegramChatHistories.message_id"`)}
	}
	if _, ok := tchc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TelegramChatHistories.user_id"`)}
	}
	if _, ok := tchc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "TelegramChatHistories.username"`)}
	}
	if _, ok := tchc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "TelegramChatHistories.full_name"`)}
	}
	if _, ok := tchc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "TelegramChatHistories.text"`)}
	}
	if _, ok := tchc.mutation.RepliedToMessageID(); !ok {
		return &ValidationError{Name: "replied_to_message_id", err: errors.New(`ent: missing required field "TelegramChatHistories.replied_to_message_id"`)}
	}
	if _, ok := tchc.mutation.RepliedToUserID(); !ok {
		return &ValidationError{Name: "replied_to_user_id", err: errors.New(`ent: missing required field "TelegramChatHistories.replied_to_user_id"`)}
	}
	if _, ok := tchc.mutation.RepliedToFullName(); !ok {
		return &ValidationError{Name: "replied_to_full_name", err: errors.New(`ent: missing required field "TelegramChatHistories.replied_to_full_name"`)}
	}
	if _, ok := tchc.mutation.RepliedToUsername(); !ok {
		return &ValidationError{Name: "replied_to_username", err: errors.New(`ent: missing required field "TelegramChatHistories.replied_to_username"`)}
	}
	if _, ok := tchc.mutation.RepliedToText(); !ok {
		return &ValidationError{Name: "replied_to_text", err: errors.New(`ent: missing required field "TelegramChatHistories.replied_to_text"`)}
	}
	if _, ok := tchc.mutation.ChattedAt(); !ok {
		return &ValidationError{Name: "chatted_at", err: errors.New(`ent: missing required field "TelegramChatHistories.chatted_at"`)}
	}
	if _, ok := tchc.mutation.Embedded(); !ok {
		return &ValidationError{Name: "embedded", err: errors.New(`ent: missing required field "TelegramChatHistories.embedded"`)}
	}
	if _, ok := tchc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TelegramChatHistories.created_at"`)}
	}
	if _, ok := tchc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TelegramChatHistories.updated_at"`)}
	}
	return nil
}

func (tchc *TelegramChatHistoriesCreate) sqlSave(ctx context.Context) (*TelegramChatHistories, error) {
	if err := tchc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tchc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tchc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tchc.mutation.id = &_node.ID
	tchc.mutation.done = true
	return _node, nil
}

func (tchc *TelegramChatHistoriesCreate) createSpec() (*TelegramChatHistories, *sqlgraph.CreateSpec) {
	var (
		_node = &TelegramChatHistories{config: tchc.config}
		_spec = sqlgraph.NewCreateSpec(telegramchathistories.Table, sqlgraph.NewFieldSpec(telegramchathistories.FieldID, field.TypeUUID))
	)
	_spec.Schema = tchc.schemaConfig.TelegramChatHistories
	if id, ok := tchc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tchc.mutation.ChatID(); ok {
		_spec.SetField(telegramchathistories.FieldChatID, field.TypeInt64, value)
		_node.ChatID = value
	}
	if value, ok := tchc.mutation.MessageID(); ok {
		_spec.SetField(telegramchathistories.FieldMessageID, field.TypeInt64, value)
		_node.MessageID = value
	}
	if value, ok := tchc.mutation.UserID(); ok {
		_spec.SetField(telegramchathistories.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := tchc.mutation.Username(); ok {
		_spec.SetField(telegramchathistories.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := tchc.mutation.FullName(); ok {
		_spec.SetField(telegramchathistories.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := tchc.mutation.Text(); ok {
		_spec.SetField(telegramchathistories.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := tchc.mutation.RepliedToMessageID(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToMessageID, field.TypeInt64, value)
		_node.RepliedToMessageID = value
	}
	if value, ok := tchc.mutation.RepliedToUserID(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToUserID, field.TypeInt64, value)
		_node.RepliedToUserID = value
	}
	if value, ok := tchc.mutation.RepliedToFullName(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToFullName, field.TypeString, value)
		_node.RepliedToFullName = value
	}
	if value, ok := tchc.mutation.RepliedToUsername(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToUsername, field.TypeString, value)
		_node.RepliedToUsername = value
	}
	if value, ok := tchc.mutation.RepliedToText(); ok {
		_spec.SetField(telegramchathistories.FieldRepliedToText, field.TypeString, value)
		_node.RepliedToText = value
	}
	if value, ok := tchc.mutation.ChattedAt(); ok {
		_spec.SetField(telegramchathistories.FieldChattedAt, field.TypeInt64, value)
		_node.ChattedAt = value
	}
	if value, ok := tchc.mutation.Embedded(); ok {
		_spec.SetField(telegramchathistories.FieldEmbedded, field.TypeBool, value)
		_node.Embedded = value
	}
	if value, ok := tchc.mutation.CreatedAt(); ok {
		_spec.SetField(telegramchathistories.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tchc.mutation.UpdatedAt(); ok {
		_spec.SetField(telegramchathistories.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// TelegramChatHistoriesCreateBulk is the builder for creating many TelegramChatHistories entities in bulk.
type TelegramChatHistoriesCreateBulk struct {
	config
	builders []*TelegramChatHistoriesCreate
}

// Save creates the TelegramChatHistories entities in the database.
func (tchcb *TelegramChatHistoriesCreateBulk) Save(ctx context.Context) ([]*TelegramChatHistories, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tchcb.builders))
	nodes := make([]*TelegramChatHistories, len(tchcb.builders))
	mutators := make([]Mutator, len(tchcb.builders))
	for i := range tchcb.builders {
		func(i int, root context.Context) {
			builder := tchcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TelegramChatHistoriesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tchcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tchcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tchcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tchcb *TelegramChatHistoriesCreateBulk) SaveX(ctx context.Context) []*TelegramChatHistories {
	v, err := tchcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tchcb *TelegramChatHistoriesCreateBulk) Exec(ctx context.Context) error {
	_, err := tchcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tchcb *TelegramChatHistoriesCreateBulk) ExecX(ctx context.Context) {
	if err := tchcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/telegramchatautorecapssubscribers"
)

// TelegramChatAutoRecapsSubscribersQuery is the builder for querying TelegramChatAutoRecapsSubscribers entities.
type TelegramChatAutoRecapsSubscribersQuery struct {
	config
	ctx        *QueryContext
	order      []telegramchatautorecapssubscribers.OrderOption
	inters     []Interceptor
	predicates []predicate.TelegramChatAutoRecapsSubscribers
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TelegramChatAutoRecapsSubscribersQuery builder.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) Where(ps ...predicate.TelegramChatAutoRecapsSubscribers) *TelegramChatAutoRecapsSubscribersQuery {
	tcarsq.predicates = append(tcarsq.predicates, ps...)
	return tcarsq
}

// Limit the number of records to be returned by this query.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) Limit(limit int) *TelegramChatAutoRecapsSubscribersQuery {
	tcarsq.ctx.Limit = &limit
	return tcarsq
}

// Offset to start from.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) Offset(offset int) *TelegramChatAutoRecapsSubscribersQuery {
	tcarsq.ctx.Offset = &offset
	return tcarsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) Unique(unique bool) *TelegramChatAutoRecapsSubscribersQuery {
	tcarsq.ctx.Unique = &unique
	return tcarsq
}

// Order specifies how the records should be ordered.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) Order(o ...telegramchatautorecapssubscribers.OrderOption) *TelegramChatAutoRecapsSubscribersQuery {
	tcarsq.order = append(tcarsq.order, o...)
	return tcarsq
}

// First returns the first TelegramChatAutoRecapsSubscribers entity from the query.
// Returns a *NotFoundError when no TelegramChatAutoRecapsSubscribers was found.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) First(ctx context.Context) (*TelegramChatAutoRecapsSubscribers, error) {
	nodes, err := tcarsq.Limit(1).All(setContextOp(ctx, tcarsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{telegramchatautorecapssubscribers.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) FirstX(ctx context.Context) *TelegramChatAutoRecapsSubscribers {
	node, err := tcarsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TelegramChatAutoRecapsSubscribers ID from the query.
// Returns a *NotFoundError when no TelegramChatAutoRecapsSubscribers ID was found.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tcarsq.Limit(1).IDs(setContextOp(ctx, tcarsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{telegramchatautorecapssubscribers.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := tcarsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TelegramChatAutoRecapsSubscribers entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TelegramChatAutoRecapsSubscribers entity is found.
// Returns a *NotFoundError when no TelegramChatAutoRecapsSubscribers entities are found.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) Only(ctx context.Context) (*TelegramChatAutoRecapsSubscribers, error) {
	nodes, err := tcarsq.Limit(2).All(setContextOp(ctx, tcarsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{telegramchatautorecapssubscribers.Label}
	default:
		return nil, &NotSingularError{telegramchatautorecapssubscribers.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) OnlyX(ctx context.Context) *TelegramChatAutoRecapsSubscribers {
	node, err := tcarsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TelegramChatAutoRecapsSubscribers ID in the query.
// Returns a *NotSingularError when more than one TelegramChatAutoRecapsSubscribers ID is found.
// Returns a *NotFoundError when no entities are found.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tcarsq.Limit(2).IDs(setContextOp(ctx, tcarsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{telegramchatautorecapssubscribers.Label}
	default:
		err = &NotSingularError{telegramchatautorecapssubscribers.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := tcarsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TelegramChatAutoRecapsSubscribersSlice.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) All(ctx context.Context) ([]*TelegramChatAutoRecapsSubscribers, error) {
	ctx = setContextOp(ctx, tcarsq.ctx, "All")
	if err := tcarsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TelegramChatAutoRecapsSubscribers, *TelegramChatAutoRecapsSubscribersQuery]()
	return withInterceptors[[]*TelegramChatAutoRecapsSubscribers](ctx, tcarsq, qr, tcarsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) AllX(ctx context.Context) []*TelegramChatAutoRecapsSubscribers {
	nodes, err := tcarsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TelegramChatAutoRecapsSubscribers IDs.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if tcarsq.ctx.Unique == nil && tcarsq.path != nil {
		tcarsq.Unique(true)
	}
	ctx = setContextOp(ctx, tcarsq.ctx, "IDs")
	if err = tcarsq.Select(telegramchatautorecapssubscribers.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := tcarsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tcarsq.ctx, "Count")
	if err := tcarsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tcarsq, querierCount[*TelegramChatAutoRecapsSubscribersQuery](), tcarsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) CountX(ctx context.Context) int {
	count, err := tcarsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tcarsq.ctx, "Exist")
	switch _, err := tcarsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) ExistX(ctx context.Context) bool {
	exist, err := tcarsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TelegramChatAutoRecapsSubscribersQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) Clone() *TelegramChatAutoRecapsSubscribersQuery {
	if tcarsq == nil {
		return nil
	}
	return &TelegramChatAutoRecapsSubscribersQuery{
		config:     tcarsq.config,
		ctx:        tcarsq.ctx.Clone(),
		order:      append([]telegramchatautorecapssubscribers.OrderOption{}, tcarsq.order...),
		inters:     append([]Interceptor{}, tcarsq.inters...),
		predicates: append([]predicate.TelegramChatAutoRecapsSubscribers{}, tcarsq.predicates...),
		// clone intermediate query.
		sql:  tcarsq.sql.Clone(),
		path: tcarsq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ChatID int64 `json:"chat_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TelegramChatAutoRecapsSubscribers.Query().
//		GroupBy(telegramchatautorecapssubscribers.FieldChatID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) GroupBy(field string, fields ...string) *TelegramChatAutoRecapsSubscribersGroupBy {
	tcarsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TelegramChatAutoRecapsSubscribersGroupBy{build: tcarsq}
	grbuild.flds = &tcarsq.ctx.Fields
	grbuild.label = telegramchatautorecapssubscribers.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ChatID int64 `json:"chat_id,omitempty"`
//	}
//
//	client.TelegramChatAutoRecapsSubscribers.Query().
//		Select(telegramchatautorecapssubscribers.FieldChatID).
//		Scan(ctx, &v)
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) Select(fields ...string) *TelegramChatAutoRecapsSubscribersSelect {
	tcarsq.ctx.Fields = append(tcarsq.ctx.Fields, fields...)
	sbuild := &TelegramChatAutoRecapsSubscribersSelect{TelegramChatAutoRecapsSubscribersQuery: tcarsq}
	sbuild.label = telegramchatautorecapssubscribers.Label
	sbuild.flds, sbuild.scan = &tcarsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TelegramChatAutoRecapsSubscribersSelect configured with the given aggregations.
func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) Aggregate(fns ...AggregateFunc) *TelegramChatAutoRecapsSubscribersSelect {
	return tcarsq.Select().Aggregate(fns...)
}

func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tcarsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tcarsq); err != nil {
				return err
			}
		}
	}
	for _, f := range tcarsq.ctx.Fields {
		if !telegramchatautorecapssubscribers.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tcarsq.path != nil {
		prev, err := tcarsq.path(ctx)
		if err != nil {
			return err
		}
		tcarsq.sql = prev
	}
	return nil
}

func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TelegramChatAutoRecapsSubscribers, error) {
	var (
		nodes = []*TelegramChatAutoRecapsSubscribers{}
		_spec = tcarsq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TelegramChatAutoRecapsSubscribers).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TelegramChatAutoRecapsSubscribers{config: tcarsq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = tcarsq.schemaConfig.TelegramChatAutoRecapsSubscribers
	ctx = internal.NewSchemaConfigContext(ctx, tcarsq.schemaConfig)
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tcarsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tcarsq.querySpec()
	_spec.Node.Schema = tcarsq.schemaConfig.TelegramChatAutoRecapsSubscribers
	ctx = internal.NewSchemaConfigContext(ctx, tcarsq.schemaConfig)
	_spec.Node.Columns = tcarsq.ctx.Fields
	if len(tcarsq.ctx.Fields) > 0 {
		_spec.Unique = tcarsq.ctx.Unique != nil && *tcarsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tcarsq.driver, _spec)
}

func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(telegramchatautorecapssubscribers.Table, telegramchatautorecapssubscribers.Columns, sqlgraph.NewFieldSpec(telegramchatautorecapssubscribers.FieldID, field.TypeUUID))
	_spec.From = tcarsq.sql
	if unique := tcarsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tcarsq.path != nil {
		_spec.Unique = true
	}
	if fields := tcarsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telegramchatautorecapssubscribers.FieldID)
		for i := range fields {
			if fields[i] != telegramchatautorecapssubscribers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tcarsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tcarsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tcarsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tcarsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tcarsq *TelegramChatAutoRecapsSubscribersQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tcarsq.driver.Dialect())
	t1 := builder.Table(telegramchatautorecapssubscribers.Table)
	columns := tcarsq.ctx.Fields
	if len(columns) == 0 {
		columns = telegramchatautorecapssubscribers.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tcarsq.sql != nil {
		selector = tcarsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tcarsq.ctx.Unique != nil && *tcarsq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(tcarsq.schemaConfig.TelegramChatAutoRecapsSubscribers)
	ctx = internal.NewSchemaConfigContext(ctx, tcarsq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range tcarsq.predicates {
		p(selector)
	}
	for _, p := range tcarsq.order {
		p(selector)
	}
	if offset := tcarsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tcarsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TelegramChatAutoRecapsSubscribersGroupBy is the group-by builder for TelegramChatAutoRecapsSubscribers entities.
type TelegramChatAutoRecapsSubscribersGroupBy struct {
	selector
	build *TelegramChatAutoRecapsSubscribersQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tcarsgb *TelegramChatAutoRecapsSubscribersGroupBy) Aggregate(fns ...AggregateFunc) *TelegramChatAutoRecapsSubscribersGroupBy {
	tcarsgb.fns = append(tcarsgb.fns, fns...)
	return tcarsgb
}

// Scan applies the selector query and scans the result into the given value.
func (tcarsgb *TelegramChatAutoRecapsSubscribersGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcarsgb.build.ctx, "GroupBy")
	if err := tcarsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TelegramChatAutoRecapsSubscribersQuery, *TelegramChatAutoRecapsSubscribersGroupBy](ctx, tcarsgb.build, tcarsgb, tcarsgb.build.inters, v)
}

func (tcarsgb *TelegramChatAutoRecapsSubscribersGroupBy) sqlScan(ctx context.Context, root *TelegramChatAutoRecapsSubscribersQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tcarsgb.fns))
	for _, fn := range tcarsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tcarsgb.flds)+len(tcarsgb.fns))
		for _, f := range *tcarsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tcarsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcarsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TelegramChatAutoRecapsSubscribersSelect is the builder for selecting fields of TelegramChatAutoRecapsSubscribers entities.
type TelegramChatAutoRecapsSubscribersSelect struct {
	*TelegramChatAutoRecapsSubscribersQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tcarss *TelegramChatAutoRecapsSubscribersSelect) Aggregate(fns ...AggregateFunc) *TelegramChatAutoRecapsSubscribersSelect {
	tcarss.fns = append(tcarss.fns, fns...)
	return tcarss
}

// Scan applies the selector query and scans the result into the given value.
func (tcarss *TelegramChatAutoRecapsSubscribersSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcarss.ctx, "Select")
	if err := tcarss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TelegramChatAutoRecapsSubscribersQuery, *TelegramChatAutoRecapsSubscribersSelect](ctx, tcarss.TelegramChatAutoRecapsSubscribersQuery, tcarss, tcarss.inters, v)
}

func (tcarss *TelegramChatAutoRecapsSubscribersSelect) sqlScan(ctx context.Context, root *TelegramChatAutoRecapsSubscribersQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tcarss.fns))
	for _, fn := range tcarss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tcarss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcarss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

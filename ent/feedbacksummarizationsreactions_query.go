// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/feedbacksummarizationsreactions"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
)

// FeedbackSummarizationsReactionsQuery is the builder for querying FeedbackSummarizationsReactions entities.
type FeedbackSummarizationsReactionsQuery struct {
	config
	ctx        *QueryContext
	order      []feedbacksummarizationsreactions.OrderOption
	inters     []Interceptor
	predicates []predicate.FeedbackSummarizationsReactions
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FeedbackSummarizationsReactionsQuery builder.
func (fsrq *FeedbackSummarizationsReactionsQuery) Where(ps ...predicate.FeedbackSummarizationsReactions) *FeedbackSummarizationsReactionsQuery {
	fsrq.predicates = append(fsrq.predicates, ps...)
	return fsrq
}

// Limit the number of records to be returned by this query.
func (fsrq *FeedbackSummarizationsReactionsQuery) Limit(limit int) *FeedbackSummarizationsReactionsQuery {
	fsrq.ctx.Limit = &limit
	return fsrq
}

// Offset to start from.
func (fsrq *FeedbackSummarizationsReactionsQuery) Offset(offset int) *FeedbackSummarizationsReactionsQuery {
	fsrq.ctx.Offset = &offset
	return fsrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fsrq *FeedbackSummarizationsReactionsQuery) Unique(unique bool) *FeedbackSummarizationsReactionsQuery {
	fsrq.ctx.Unique = &unique
	return fsrq
}

// Order specifies how the records should be ordered.
func (fsrq *FeedbackSummarizationsReactionsQuery) Order(o ...feedbacksummarizationsreactions.OrderOption) *FeedbackSummarizationsReactionsQuery {
	fsrq.order = append(fsrq.order, o...)
	return fsrq
}

// First returns the first FeedbackSummarizationsReactions entity from the query.
// Returns a *NotFoundError when no FeedbackSummarizationsReactions was found.
func (fsrq *FeedbackSummarizationsReactionsQuery) First(ctx context.Context) (*FeedbackSummarizationsReactions, error) {
	nodes, err := fsrq.Limit(1).All(setContextOp(ctx, fsrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{feedbacksummarizationsreactions.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fsrq *FeedbackSummarizationsReactionsQuery) FirstX(ctx context.Context) *FeedbackSummarizationsReactions {
	node, err := fsrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FeedbackSummarizationsReactions ID from the query.
// Returns a *NotFoundError when no FeedbackSummarizationsReactions ID was found.
func (fsrq *FeedbackSummarizationsReactionsQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fsrq.Limit(1).IDs(setContextOp(ctx, fsrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{feedbacksummarizationsreactions.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fsrq *FeedbackSummarizationsReactionsQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := fsrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FeedbackSummarizationsReactions entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FeedbackSummarizationsReactions entity is found.
// Returns a *NotFoundError when no FeedbackSummarizationsReactions entities are found.
func (fsrq *FeedbackSummarizationsReactionsQuery) Only(ctx context.Context) (*FeedbackSummarizationsReactions, error) {
	nodes, err := fsrq.Limit(2).All(setContextOp(ctx, fsrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{feedbacksummarizationsreactions.Label}
	default:
		return nil, &NotSingularError{feedbacksummarizationsreactions.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fsrq *FeedbackSummarizationsReactionsQuery) OnlyX(ctx context.Context) *FeedbackSummarizationsReactions {
	node, err := fsrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FeedbackSummarizationsReactions ID in the query.
// Returns a *NotSingularError when more than one FeedbackSummarizationsReactions ID is found.
// Returns a *NotFoundError when no entities are found.
func (fsrq *FeedbackSummarizationsReactionsQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fsrq.Limit(2).IDs(setContextOp(ctx, fsrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{feedbacksummarizationsreactions.Label}
	default:
		err = &NotSingularError{feedbacksummarizationsreactions.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fsrq *FeedbackSummarizationsReactionsQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := fsrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FeedbackSummarizationsReactionsSlice.
func (fsrq *FeedbackSummarizationsReactionsQuery) All(ctx context.Context) ([]*FeedbackSummarizationsReactions, error) {
	ctx = setContextOp(ctx, fsrq.ctx, "All")
	if err := fsrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FeedbackSummarizationsReactions, *FeedbackSummarizationsReactionsQuery]()
	return withInterceptors[[]*FeedbackSummarizationsReactions](ctx, fsrq, qr, fsrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fsrq *FeedbackSummarizationsReactionsQuery) AllX(ctx context.Context) []*FeedbackSummarizationsReactions {
	nodes, err := fsrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FeedbackSummarizationsReactions IDs.
func (fsrq *FeedbackSummarizationsReactionsQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if fsrq.ctx.Unique == nil && fsrq.path != nil {
		fsrq.Unique(true)
	}
	ctx = setContextOp(ctx, fsrq.ctx, "IDs")
	if err = fsrq.Select(feedbacksummarizationsreactions.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fsrq *FeedbackSummarizationsReactionsQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := fsrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fsrq *FeedbackSummarizationsReactionsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fsrq.ctx, "Count")
	if err := fsrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fsrq, querierCount[*FeedbackSummarizationsReactionsQuery](), fsrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fsrq *FeedbackSummarizationsReactionsQuery) CountX(ctx context.Context) int {
	count, err := fsrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fsrq *FeedbackSummarizationsReactionsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fsrq.ctx, "Exist")
	switch _, err := fsrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fsrq *FeedbackSummarizationsReactionsQuery) ExistX(ctx context.Context) bool {
	exist, err := fsrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FeedbackSummarizationsReactionsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fsrq *FeedbackSummarizationsReactionsQuery) Clone() *FeedbackSummarizationsReactionsQuery {
	if fsrq == nil {
		return nil
	}
	return &FeedbackSummarizationsReactionsQuery{
		config:     fsrq.config,
		ctx:        fsrq.ctx.Clone(),
		order:      append([]feedbacksummarizationsreactions.OrderOption{}, fsrq.order...),
		inters:     append([]Interceptor{}, fsrq.inters...),
		predicates: append([]predicate.FeedbackSummarizationsReactions{}, fsrq.predicates...),
		// clone intermediate query.
		sql:  fsrq.sql.Clone(),
		path: fsrq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ChatID int64 `json:"chat_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FeedbackSummarizationsReactions.Query().
//		GroupBy(feedbacksummarizationsreactions.FieldChatID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fsrq *FeedbackSummarizationsReactionsQuery) GroupBy(field string, fields ...string) *FeedbackSummarizationsReactionsGroupBy {
	fsrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FeedbackSummarizationsReactionsGroupBy{build: fsrq}
	grbuild.flds = &fsrq.ctx.Fields
	grbuild.label = feedbacksummarizationsreactions.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ChatID int64 `json:"chat_id,omitempty"`
//	}
//
//	client.FeedbackSummarizationsReactions.Query().
//		Select(feedbacksummarizationsreactions.FieldChatID).
//		Scan(ctx, &v)
func (fsrq *FeedbackSummarizationsReactionsQuery) Select(fields ...string) *FeedbackSummarizationsReactionsSelect {
	fsrq.ctx.Fields = append(fsrq.ctx.Fields, fields...)
	sbuild := &FeedbackSummarizationsReactionsSelect{FeedbackSummarizationsReactionsQuery: fsrq}
	sbuild.label = feedbacksummarizationsreactions.Label
	sbuild.flds, sbuild.scan = &fsrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FeedbackSummarizationsReactionsSelect configured with the given aggregations.
func (fsrq *FeedbackSummarizationsReactionsQuery) Aggregate(fns ...AggregateFunc) *FeedbackSummarizationsReactionsSelect {
	return fsrq.Select().Aggregate(fns...)
}

func (fsrq *FeedbackSummarizationsReactionsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fsrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fsrq); err != nil {
				return err
			}
		}
	}
	for _, f := range fsrq.ctx.Fields {
		if !feedbacksummarizationsreactions.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fsrq.path != nil {
		prev, err := fsrq.path(ctx)
		if err != nil {
			return err
		}
		fsrq.sql = prev
	}
	return nil
}

func (fsrq *FeedbackSummarizationsReactionsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FeedbackSummarizationsReactions, error) {
	var (
		nodes = []*FeedbackSummarizationsReactions{}
		_spec = fsrq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FeedbackSummarizationsReactions).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FeedbackSummarizationsReactions{config: fsrq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = fsrq.schemaConfig.FeedbackSummarizationsReactions
	ctx = internal.NewSchemaConfigContext(ctx, fsrq.schemaConfig)
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fsrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (fsrq *FeedbackSummarizationsReactionsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fsrq.querySpec()
	_spec.Node.Schema = fsrq.schemaConfig.FeedbackSummarizationsReactions
	ctx = internal.NewSchemaConfigContext(ctx, fsrq.schemaConfig)
	_spec.Node.Columns = fsrq.ctx.Fields
	if len(fsrq.ctx.Fields) > 0 {
		_spec.Unique = fsrq.ctx.Unique != nil && *fsrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fsrq.driver, _spec)
}

func (fsrq *FeedbackSummarizationsReactionsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(feedbacksummarizationsreactions.Table, feedbacksummarizationsreactions.Columns, sqlgraph.NewFieldSpec(feedbacksummarizationsreactions.FieldID, field.TypeUUID))
	_spec.From = fsrq.sql
	if unique := fsrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fsrq.path != nil {
		_spec.Unique = true
	}
	if fields := fsrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedbacksummarizationsreactions.FieldID)
		for i := range fields {
			if fields[i] != feedbacksummarizationsreactions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fsrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fsrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fsrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fsrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fsrq *FeedbackSummarizationsReactionsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fsrq.driver.Dialect())
	t1 := builder.Table(feedbacksummarizationsreactions.Table)
	columns := fsrq.ctx.Fields
	if len(columns) == 0 {
		columns = feedbacksummarizationsreactions.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fsrq.sql != nil {
		selector = fsrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fsrq.ctx.Unique != nil && *fsrq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(fsrq.schemaConfig.FeedbackSummarizationsReactions)
	ctx = internal.NewSchemaConfigContext(ctx, fsrq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range fsrq.predicates {
		p(selector)
	}
	for _, p := range fsrq.order {
		p(selector)
	}
	if offset := fsrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fsrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FeedbackSummarizationsReactionsGroupBy is the group-by builder for FeedbackSummarizationsReactions entities.
type FeedbackSummarizationsReactionsGroupBy struct {
	selector
	build *FeedbackSummarizationsReactionsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fsrgb *FeedbackSummarizationsReactionsGroupBy) Aggregate(fns ...AggregateFunc) *FeedbackSummarizationsReactionsGroupBy {
	fsrgb.fns = append(fsrgb.fns, fns...)
	return fsrgb
}

// Scan applies the selector query and scans the result into the given value.
func (fsrgb *FeedbackSummarizationsReactionsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fsrgb.build.ctx, "GroupBy")
	if err := fsrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeedbackSummarizationsReactionsQuery, *FeedbackSummarizationsReactionsGroupBy](ctx, fsrgb.build, fsrgb, fsrgb.build.inters, v)
}

func (fsrgb *FeedbackSummarizationsReactionsGroupBy) sqlScan(ctx context.Context, root *FeedbackSummarizationsReactionsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fsrgb.fns))
	for _, fn := range fsrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fsrgb.flds)+len(fsrgb.fns))
		for _, f := range *fsrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fsrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fsrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FeedbackSummarizationsReactionsSelect is the builder for selecting fields of FeedbackSummarizationsReactions entities.
type FeedbackSummarizationsReactionsSelect struct {
	*FeedbackSummarizationsReactionsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fsrs *FeedbackSummarizationsReactionsSelect) Aggregate(fns ...AggregateFunc) *FeedbackSummarizationsReactionsSelect {
	fsrs.fns = append(fsrs.fns, fns...)
	return fsrs
}

// Scan applies the selector query and scans the result into the given value.
func (fsrs *FeedbackSummarizationsReactionsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fsrs.ctx, "Select")
	if err := fsrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeedbackSummarizationsReactionsQuery, *FeedbackSummarizationsReactionsSelect](ctx, fsrs.FeedbackSummarizationsReactionsQuery, fsrs, fsrs.inters, v)
}

func (fsrs *FeedbackSummarizationsReactionsSelect) sqlScan(ctx context.Context, root *FeedbackSummarizationsReactionsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fsrs.fns))
	for _, fn := range fsrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fsrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fsrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

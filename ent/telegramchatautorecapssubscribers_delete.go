// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/telegramchatautorecapssubscribers"
)

// TelegramChatAutoRecapsSubscribersDelete is the builder for deleting a TelegramChatAutoRecapsSubscribers entity.
type TelegramChatAutoRecapsSubscribersDelete struct {
	config
	hooks    []Hook
	mutation *TelegramChatAutoRecapsSubscribersMutation
}

// Where appends a list predicates to the TelegramChatAutoRecapsSubscribersDelete builder.
func (tcarsd *TelegramChatAutoRecapsSubscribersDelete) Where(ps ...predicate.TelegramChatAutoRecapsSubscribers) *TelegramChatAutoRecapsSubscribersDelete {
	tcarsd.mutation.Where(ps...)
	return tcarsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tcarsd *TelegramChatAutoRecapsSubscribersDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tcarsd.sqlExec, tcarsd.mutation, tcarsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tcarsd *TelegramChatAutoRecapsSubscribersDelete) ExecX(ctx context.Context) int {
	n, err := tcarsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tcarsd *TelegramChatAutoRecapsSubscribersDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(telegramchatautorecapssubscribers.Table, sqlgraph.NewFieldSpec(telegramchatautorecapssubscribers.FieldID, field.TypeUUID))
	_spec.Node.Schema = tcarsd.schemaConfig.TelegramChatAutoRecapsSubscribers
	ctx = internal.NewSchemaConfigContext(ctx, tcarsd.schemaConfig)
	if ps := tcarsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tcarsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tcarsd.mutation.done = true
	return affected, err
}

// TelegramChatAutoRecapsSubscribersDeleteOne is the builder for deleting a single TelegramChatAutoRecapsSubscribers entity.
type TelegramChatAutoRecapsSubscribersDeleteOne struct {
	tcarsd *TelegramChatAutoRecapsSubscribersDelete
}

// Where appends a list predicates to the TelegramChatAutoRecapsSubscribersDelete builder.
func (tcarsdo *TelegramChatAutoRecapsSubscribersDeleteOne) Where(ps ...predicate.TelegramChatAutoRecapsSubscribers) *TelegramChatAutoRecapsSubscribersDeleteOne {
	tcarsdo.tcarsd.mutation.Where(ps...)
	return tcarsdo
}

// Exec executes the deletion query.
func (tcarsdo *TelegramChatAutoRecapsSubscribersDeleteOne) Exec(ctx context.Context) error {
	n, err := tcarsdo.tcarsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{telegramchatautorecapssubscribers.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tcarsdo *TelegramChatAutoRecapsSubscribersDeleteOne) ExecX(ctx context.Context) {
	if err := tcarsdo.Exec(ctx); err != nil {
		panic(err)
	}
}

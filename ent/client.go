// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/nekomeowww/insights-bot/ent/chathistories"
	"github.com/nekomeowww/insights-bot/ent/logchathistoriesrecap"
	"github.com/nekomeowww/insights-bot/ent/logsummarizations"
	"github.com/nekomeowww/insights-bot/ent/metricopenaichatcompletiontokenusage"
	"github.com/nekomeowww/insights-bot/ent/slackoauthcredentials"
	"github.com/nekomeowww/insights-bot/ent/telegramchatfeatureflags"

	"github.com/nekomeowww/insights-bot/ent/internal"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ChatHistories is the client for interacting with the ChatHistories builders.
	ChatHistories *ChatHistoriesClient
	// LogChatHistoriesRecap is the client for interacting with the LogChatHistoriesRecap builders.
	LogChatHistoriesRecap *LogChatHistoriesRecapClient
	// LogSummarizations is the client for interacting with the LogSummarizations builders.
	LogSummarizations *LogSummarizationsClient
	// MetricOpenAIChatCompletionTokenUsage is the client for interacting with the MetricOpenAIChatCompletionTokenUsage builders.
	MetricOpenAIChatCompletionTokenUsage *MetricOpenAIChatCompletionTokenUsageClient
	// SlackOAuthCredentials is the client for interacting with the SlackOAuthCredentials builders.
	SlackOAuthCredentials *SlackOAuthCredentialsClient
	// TelegramChatFeatureFlags is the client for interacting with the TelegramChatFeatureFlags builders.
	TelegramChatFeatureFlags *TelegramChatFeatureFlagsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ChatHistories = NewChatHistoriesClient(c.config)
	c.LogChatHistoriesRecap = NewLogChatHistoriesRecapClient(c.config)
	c.LogSummarizations = NewLogSummarizationsClient(c.config)
	c.MetricOpenAIChatCompletionTokenUsage = NewMetricOpenAIChatCompletionTokenUsageClient(c.config)
	c.SlackOAuthCredentials = NewSlackOAuthCredentialsClient(c.config)
	c.TelegramChatFeatureFlags = NewTelegramChatFeatureFlagsClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
		// schemaConfig contains alternative names for all tables.
		schemaConfig SchemaConfig
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                                  ctx,
		config:                               cfg,
		ChatHistories:                        NewChatHistoriesClient(cfg),
		LogChatHistoriesRecap:                NewLogChatHistoriesRecapClient(cfg),
		LogSummarizations:                    NewLogSummarizationsClient(cfg),
		MetricOpenAIChatCompletionTokenUsage: NewMetricOpenAIChatCompletionTokenUsageClient(cfg),
		SlackOAuthCredentials:                NewSlackOAuthCredentialsClient(cfg),
		TelegramChatFeatureFlags:             NewTelegramChatFeatureFlagsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                                  ctx,
		config:                               cfg,
		ChatHistories:                        NewChatHistoriesClient(cfg),
		LogChatHistoriesRecap:                NewLogChatHistoriesRecapClient(cfg),
		LogSummarizations:                    NewLogSummarizationsClient(cfg),
		MetricOpenAIChatCompletionTokenUsage: NewMetricOpenAIChatCompletionTokenUsageClient(cfg),
		SlackOAuthCredentials:                NewSlackOAuthCredentialsClient(cfg),
		TelegramChatFeatureFlags:             NewTelegramChatFeatureFlagsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ChatHistories.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ChatHistories, c.LogChatHistoriesRecap, c.LogSummarizations,
		c.MetricOpenAIChatCompletionTokenUsage, c.SlackOAuthCredentials,
		c.TelegramChatFeatureFlags,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ChatHistories, c.LogChatHistoriesRecap, c.LogSummarizations,
		c.MetricOpenAIChatCompletionTokenUsage, c.SlackOAuthCredentials,
		c.TelegramChatFeatureFlags,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ChatHistoriesMutation:
		return c.ChatHistories.mutate(ctx, m)
	case *LogChatHistoriesRecapMutation:
		return c.LogChatHistoriesRecap.mutate(ctx, m)
	case *LogSummarizationsMutation:
		return c.LogSummarizations.mutate(ctx, m)
	case *MetricOpenAIChatCompletionTokenUsageMutation:
		return c.MetricOpenAIChatCompletionTokenUsage.mutate(ctx, m)
	case *SlackOAuthCredentialsMutation:
		return c.SlackOAuthCredentials.mutate(ctx, m)
	case *TelegramChatFeatureFlagsMutation:
		return c.TelegramChatFeatureFlags.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ChatHistoriesClient is a client for the ChatHistories schema.
type ChatHistoriesClient struct {
	config
}

// NewChatHistoriesClient returns a client for the ChatHistories from the given config.
func NewChatHistoriesClient(c config) *ChatHistoriesClient {
	return &ChatHistoriesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chathistories.Hooks(f(g(h())))`.
func (c *ChatHistoriesClient) Use(hooks ...Hook) {
	c.hooks.ChatHistories = append(c.hooks.ChatHistories, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chathistories.Intercept(f(g(h())))`.
func (c *ChatHistoriesClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChatHistories = append(c.inters.ChatHistories, interceptors...)
}

// Create returns a builder for creating a ChatHistories entity.
func (c *ChatHistoriesClient) Create() *ChatHistoriesCreate {
	mutation := newChatHistoriesMutation(c.config, OpCreate)
	return &ChatHistoriesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChatHistories entities.
func (c *ChatHistoriesClient) CreateBulk(builders ...*ChatHistoriesCreate) *ChatHistoriesCreateBulk {
	return &ChatHistoriesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChatHistories.
func (c *ChatHistoriesClient) Update() *ChatHistoriesUpdate {
	mutation := newChatHistoriesMutation(c.config, OpUpdate)
	return &ChatHistoriesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChatHistoriesClient) UpdateOne(ch *ChatHistories) *ChatHistoriesUpdateOne {
	mutation := newChatHistoriesMutation(c.config, OpUpdateOne, withChatHistories(ch))
	return &ChatHistoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChatHistoriesClient) UpdateOneID(id uuid.UUID) *ChatHistoriesUpdateOne {
	mutation := newChatHistoriesMutation(c.config, OpUpdateOne, withChatHistoriesID(id))
	return &ChatHistoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChatHistories.
func (c *ChatHistoriesClient) Delete() *ChatHistoriesDelete {
	mutation := newChatHistoriesMutation(c.config, OpDelete)
	return &ChatHistoriesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChatHistoriesClient) DeleteOne(ch *ChatHistories) *ChatHistoriesDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChatHistoriesClient) DeleteOneID(id uuid.UUID) *ChatHistoriesDeleteOne {
	builder := c.Delete().Where(chathistories.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChatHistoriesDeleteOne{builder}
}

// Query returns a query builder for ChatHistories.
func (c *ChatHistoriesClient) Query() *ChatHistoriesQuery {
	return &ChatHistoriesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChatHistories},
		inters: c.Interceptors(),
	}
}

// Get returns a ChatHistories entity by its id.
func (c *ChatHistoriesClient) Get(ctx context.Context, id uuid.UUID) (*ChatHistories, error) {
	return c.Query().Where(chathistories.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChatHistoriesClient) GetX(ctx context.Context, id uuid.UUID) *ChatHistories {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChatHistoriesClient) Hooks() []Hook {
	return c.hooks.ChatHistories
}

// Interceptors returns the client interceptors.
func (c *ChatHistoriesClient) Interceptors() []Interceptor {
	return c.inters.ChatHistories
}

func (c *ChatHistoriesClient) mutate(ctx context.Context, m *ChatHistoriesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChatHistoriesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChatHistoriesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChatHistoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChatHistoriesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChatHistories mutation op: %q", m.Op())
	}
}

// LogChatHistoriesRecapClient is a client for the LogChatHistoriesRecap schema.
type LogChatHistoriesRecapClient struct {
	config
}

// NewLogChatHistoriesRecapClient returns a client for the LogChatHistoriesRecap from the given config.
func NewLogChatHistoriesRecapClient(c config) *LogChatHistoriesRecapClient {
	return &LogChatHistoriesRecapClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `logchathistoriesrecap.Hooks(f(g(h())))`.
func (c *LogChatHistoriesRecapClient) Use(hooks ...Hook) {
	c.hooks.LogChatHistoriesRecap = append(c.hooks.LogChatHistoriesRecap, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `logchathistoriesrecap.Intercept(f(g(h())))`.
func (c *LogChatHistoriesRecapClient) Intercept(interceptors ...Interceptor) {
	c.inters.LogChatHistoriesRecap = append(c.inters.LogChatHistoriesRecap, interceptors...)
}

// Create returns a builder for creating a LogChatHistoriesRecap entity.
func (c *LogChatHistoriesRecapClient) Create() *LogChatHistoriesRecapCreate {
	mutation := newLogChatHistoriesRecapMutation(c.config, OpCreate)
	return &LogChatHistoriesRecapCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LogChatHistoriesRecap entities.
func (c *LogChatHistoriesRecapClient) CreateBulk(builders ...*LogChatHistoriesRecapCreate) *LogChatHistoriesRecapCreateBulk {
	return &LogChatHistoriesRecapCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LogChatHistoriesRecap.
func (c *LogChatHistoriesRecapClient) Update() *LogChatHistoriesRecapUpdate {
	mutation := newLogChatHistoriesRecapMutation(c.config, OpUpdate)
	return &LogChatHistoriesRecapUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LogChatHistoriesRecapClient) UpdateOne(lchr *LogChatHistoriesRecap) *LogChatHistoriesRecapUpdateOne {
	mutation := newLogChatHistoriesRecapMutation(c.config, OpUpdateOne, withLogChatHistoriesRecap(lchr))
	return &LogChatHistoriesRecapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LogChatHistoriesRecapClient) UpdateOneID(id uuid.UUID) *LogChatHistoriesRecapUpdateOne {
	mutation := newLogChatHistoriesRecapMutation(c.config, OpUpdateOne, withLogChatHistoriesRecapID(id))
	return &LogChatHistoriesRecapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LogChatHistoriesRecap.
func (c *LogChatHistoriesRecapClient) Delete() *LogChatHistoriesRecapDelete {
	mutation := newLogChatHistoriesRecapMutation(c.config, OpDelete)
	return &LogChatHistoriesRecapDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LogChatHistoriesRecapClient) DeleteOne(lchr *LogChatHistoriesRecap) *LogChatHistoriesRecapDeleteOne {
	return c.DeleteOneID(lchr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LogChatHistoriesRecapClient) DeleteOneID(id uuid.UUID) *LogChatHistoriesRecapDeleteOne {
	builder := c.Delete().Where(logchathistoriesrecap.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LogChatHistoriesRecapDeleteOne{builder}
}

// Query returns a query builder for LogChatHistoriesRecap.
func (c *LogChatHistoriesRecapClient) Query() *LogChatHistoriesRecapQuery {
	return &LogChatHistoriesRecapQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLogChatHistoriesRecap},
		inters: c.Interceptors(),
	}
}

// Get returns a LogChatHistoriesRecap entity by its id.
func (c *LogChatHistoriesRecapClient) Get(ctx context.Context, id uuid.UUID) (*LogChatHistoriesRecap, error) {
	return c.Query().Where(logchathistoriesrecap.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LogChatHistoriesRecapClient) GetX(ctx context.Context, id uuid.UUID) *LogChatHistoriesRecap {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LogChatHistoriesRecapClient) Hooks() []Hook {
	return c.hooks.LogChatHistoriesRecap
}

// Interceptors returns the client interceptors.
func (c *LogChatHistoriesRecapClient) Interceptors() []Interceptor {
	return c.inters.LogChatHistoriesRecap
}

func (c *LogChatHistoriesRecapClient) mutate(ctx context.Context, m *LogChatHistoriesRecapMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LogChatHistoriesRecapCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LogChatHistoriesRecapUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LogChatHistoriesRecapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LogChatHistoriesRecapDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LogChatHistoriesRecap mutation op: %q", m.Op())
	}
}

// LogSummarizationsClient is a client for the LogSummarizations schema.
type LogSummarizationsClient struct {
	config
}

// NewLogSummarizationsClient returns a client for the LogSummarizations from the given config.
func NewLogSummarizationsClient(c config) *LogSummarizationsClient {
	return &LogSummarizationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `logsummarizations.Hooks(f(g(h())))`.
func (c *LogSummarizationsClient) Use(hooks ...Hook) {
	c.hooks.LogSummarizations = append(c.hooks.LogSummarizations, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `logsummarizations.Intercept(f(g(h())))`.
func (c *LogSummarizationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.LogSummarizations = append(c.inters.LogSummarizations, interceptors...)
}

// Create returns a builder for creating a LogSummarizations entity.
func (c *LogSummarizationsClient) Create() *LogSummarizationsCreate {
	mutation := newLogSummarizationsMutation(c.config, OpCreate)
	return &LogSummarizationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LogSummarizations entities.
func (c *LogSummarizationsClient) CreateBulk(builders ...*LogSummarizationsCreate) *LogSummarizationsCreateBulk {
	return &LogSummarizationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LogSummarizations.
func (c *LogSummarizationsClient) Update() *LogSummarizationsUpdate {
	mutation := newLogSummarizationsMutation(c.config, OpUpdate)
	return &LogSummarizationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LogSummarizationsClient) UpdateOne(ls *LogSummarizations) *LogSummarizationsUpdateOne {
	mutation := newLogSummarizationsMutation(c.config, OpUpdateOne, withLogSummarizations(ls))
	return &LogSummarizationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LogSummarizationsClient) UpdateOneID(id uuid.UUID) *LogSummarizationsUpdateOne {
	mutation := newLogSummarizationsMutation(c.config, OpUpdateOne, withLogSummarizationsID(id))
	return &LogSummarizationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LogSummarizations.
func (c *LogSummarizationsClient) Delete() *LogSummarizationsDelete {
	mutation := newLogSummarizationsMutation(c.config, OpDelete)
	return &LogSummarizationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LogSummarizationsClient) DeleteOne(ls *LogSummarizations) *LogSummarizationsDeleteOne {
	return c.DeleteOneID(ls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LogSummarizationsClient) DeleteOneID(id uuid.UUID) *LogSummarizationsDeleteOne {
	builder := c.Delete().Where(logsummarizations.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LogSummarizationsDeleteOne{builder}
}

// Query returns a query builder for LogSummarizations.
func (c *LogSummarizationsClient) Query() *LogSummarizationsQuery {
	return &LogSummarizationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLogSummarizations},
		inters: c.Interceptors(),
	}
}

// Get returns a LogSummarizations entity by its id.
func (c *LogSummarizationsClient) Get(ctx context.Context, id uuid.UUID) (*LogSummarizations, error) {
	return c.Query().Where(logsummarizations.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LogSummarizationsClient) GetX(ctx context.Context, id uuid.UUID) *LogSummarizations {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LogSummarizationsClient) Hooks() []Hook {
	return c.hooks.LogSummarizations
}

// Interceptors returns the client interceptors.
func (c *LogSummarizationsClient) Interceptors() []Interceptor {
	return c.inters.LogSummarizations
}

func (c *LogSummarizationsClient) mutate(ctx context.Context, m *LogSummarizationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LogSummarizationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LogSummarizationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LogSummarizationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LogSummarizationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LogSummarizations mutation op: %q", m.Op())
	}
}

// MetricOpenAIChatCompletionTokenUsageClient is a client for the MetricOpenAIChatCompletionTokenUsage schema.
type MetricOpenAIChatCompletionTokenUsageClient struct {
	config
}

// NewMetricOpenAIChatCompletionTokenUsageClient returns a client for the MetricOpenAIChatCompletionTokenUsage from the given config.
func NewMetricOpenAIChatCompletionTokenUsageClient(c config) *MetricOpenAIChatCompletionTokenUsageClient {
	return &MetricOpenAIChatCompletionTokenUsageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `metricopenaichatcompletiontokenusage.Hooks(f(g(h())))`.
func (c *MetricOpenAIChatCompletionTokenUsageClient) Use(hooks ...Hook) {
	c.hooks.MetricOpenAIChatCompletionTokenUsage = append(c.hooks.MetricOpenAIChatCompletionTokenUsage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `metricopenaichatcompletiontokenusage.Intercept(f(g(h())))`.
func (c *MetricOpenAIChatCompletionTokenUsageClient) Intercept(interceptors ...Interceptor) {
	c.inters.MetricOpenAIChatCompletionTokenUsage = append(c.inters.MetricOpenAIChatCompletionTokenUsage, interceptors...)
}

// Create returns a builder for creating a MetricOpenAIChatCompletionTokenUsage entity.
func (c *MetricOpenAIChatCompletionTokenUsageClient) Create() *MetricOpenAIChatCompletionTokenUsageCreate {
	mutation := newMetricOpenAIChatCompletionTokenUsageMutation(c.config, OpCreate)
	return &MetricOpenAIChatCompletionTokenUsageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MetricOpenAIChatCompletionTokenUsage entities.
func (c *MetricOpenAIChatCompletionTokenUsageClient) CreateBulk(builders ...*MetricOpenAIChatCompletionTokenUsageCreate) *MetricOpenAIChatCompletionTokenUsageCreateBulk {
	return &MetricOpenAIChatCompletionTokenUsageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MetricOpenAIChatCompletionTokenUsage.
func (c *MetricOpenAIChatCompletionTokenUsageClient) Update() *MetricOpenAIChatCompletionTokenUsageUpdate {
	mutation := newMetricOpenAIChatCompletionTokenUsageMutation(c.config, OpUpdate)
	return &MetricOpenAIChatCompletionTokenUsageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetricOpenAIChatCompletionTokenUsageClient) UpdateOne(moacctu *MetricOpenAIChatCompletionTokenUsage) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	mutation := newMetricOpenAIChatCompletionTokenUsageMutation(c.config, OpUpdateOne, withMetricOpenAIChatCompletionTokenUsage(moacctu))
	return &MetricOpenAIChatCompletionTokenUsageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MetricOpenAIChatCompletionTokenUsageClient) UpdateOneID(id uuid.UUID) *MetricOpenAIChatCompletionTokenUsageUpdateOne {
	mutation := newMetricOpenAIChatCompletionTokenUsageMutation(c.config, OpUpdateOne, withMetricOpenAIChatCompletionTokenUsageID(id))
	return &MetricOpenAIChatCompletionTokenUsageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MetricOpenAIChatCompletionTokenUsage.
func (c *MetricOpenAIChatCompletionTokenUsageClient) Delete() *MetricOpenAIChatCompletionTokenUsageDelete {
	mutation := newMetricOpenAIChatCompletionTokenUsageMutation(c.config, OpDelete)
	return &MetricOpenAIChatCompletionTokenUsageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MetricOpenAIChatCompletionTokenUsageClient) DeleteOne(moacctu *MetricOpenAIChatCompletionTokenUsage) *MetricOpenAIChatCompletionTokenUsageDeleteOne {
	return c.DeleteOneID(moacctu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MetricOpenAIChatCompletionTokenUsageClient) DeleteOneID(id uuid.UUID) *MetricOpenAIChatCompletionTokenUsageDeleteOne {
	builder := c.Delete().Where(metricopenaichatcompletiontokenusage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MetricOpenAIChatCompletionTokenUsageDeleteOne{builder}
}

// Query returns a query builder for MetricOpenAIChatCompletionTokenUsage.
func (c *MetricOpenAIChatCompletionTokenUsageClient) Query() *MetricOpenAIChatCompletionTokenUsageQuery {
	return &MetricOpenAIChatCompletionTokenUsageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMetricOpenAIChatCompletionTokenUsage},
		inters: c.Interceptors(),
	}
}

// Get returns a MetricOpenAIChatCompletionTokenUsage entity by its id.
func (c *MetricOpenAIChatCompletionTokenUsageClient) Get(ctx context.Context, id uuid.UUID) (*MetricOpenAIChatCompletionTokenUsage, error) {
	return c.Query().Where(metricopenaichatcompletiontokenusage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetricOpenAIChatCompletionTokenUsageClient) GetX(ctx context.Context, id uuid.UUID) *MetricOpenAIChatCompletionTokenUsage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MetricOpenAIChatCompletionTokenUsageClient) Hooks() []Hook {
	return c.hooks.MetricOpenAIChatCompletionTokenUsage
}

// Interceptors returns the client interceptors.
func (c *MetricOpenAIChatCompletionTokenUsageClient) Interceptors() []Interceptor {
	return c.inters.MetricOpenAIChatCompletionTokenUsage
}

func (c *MetricOpenAIChatCompletionTokenUsageClient) mutate(ctx context.Context, m *MetricOpenAIChatCompletionTokenUsageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MetricOpenAIChatCompletionTokenUsageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MetricOpenAIChatCompletionTokenUsageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MetricOpenAIChatCompletionTokenUsageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MetricOpenAIChatCompletionTokenUsageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MetricOpenAIChatCompletionTokenUsage mutation op: %q", m.Op())
	}
}

// SlackOAuthCredentialsClient is a client for the SlackOAuthCredentials schema.
type SlackOAuthCredentialsClient struct {
	config
}

// NewSlackOAuthCredentialsClient returns a client for the SlackOAuthCredentials from the given config.
func NewSlackOAuthCredentialsClient(c config) *SlackOAuthCredentialsClient {
	return &SlackOAuthCredentialsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `slackoauthcredentials.Hooks(f(g(h())))`.
func (c *SlackOAuthCredentialsClient) Use(hooks ...Hook) {
	c.hooks.SlackOAuthCredentials = append(c.hooks.SlackOAuthCredentials, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `slackoauthcredentials.Intercept(f(g(h())))`.
func (c *SlackOAuthCredentialsClient) Intercept(interceptors ...Interceptor) {
	c.inters.SlackOAuthCredentials = append(c.inters.SlackOAuthCredentials, interceptors...)
}

// Create returns a builder for creating a SlackOAuthCredentials entity.
func (c *SlackOAuthCredentialsClient) Create() *SlackOAuthCredentialsCreate {
	mutation := newSlackOAuthCredentialsMutation(c.config, OpCreate)
	return &SlackOAuthCredentialsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SlackOAuthCredentials entities.
func (c *SlackOAuthCredentialsClient) CreateBulk(builders ...*SlackOAuthCredentialsCreate) *SlackOAuthCredentialsCreateBulk {
	return &SlackOAuthCredentialsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SlackOAuthCredentials.
func (c *SlackOAuthCredentialsClient) Update() *SlackOAuthCredentialsUpdate {
	mutation := newSlackOAuthCredentialsMutation(c.config, OpUpdate)
	return &SlackOAuthCredentialsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SlackOAuthCredentialsClient) UpdateOne(soc *SlackOAuthCredentials) *SlackOAuthCredentialsUpdateOne {
	mutation := newSlackOAuthCredentialsMutation(c.config, OpUpdateOne, withSlackOAuthCredentials(soc))
	return &SlackOAuthCredentialsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SlackOAuthCredentialsClient) UpdateOneID(id uuid.UUID) *SlackOAuthCredentialsUpdateOne {
	mutation := newSlackOAuthCredentialsMutation(c.config, OpUpdateOne, withSlackOAuthCredentialsID(id))
	return &SlackOAuthCredentialsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SlackOAuthCredentials.
func (c *SlackOAuthCredentialsClient) Delete() *SlackOAuthCredentialsDelete {
	mutation := newSlackOAuthCredentialsMutation(c.config, OpDelete)
	return &SlackOAuthCredentialsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SlackOAuthCredentialsClient) DeleteOne(soc *SlackOAuthCredentials) *SlackOAuthCredentialsDeleteOne {
	return c.DeleteOneID(soc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SlackOAuthCredentialsClient) DeleteOneID(id uuid.UUID) *SlackOAuthCredentialsDeleteOne {
	builder := c.Delete().Where(slackoauthcredentials.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SlackOAuthCredentialsDeleteOne{builder}
}

// Query returns a query builder for SlackOAuthCredentials.
func (c *SlackOAuthCredentialsClient) Query() *SlackOAuthCredentialsQuery {
	return &SlackOAuthCredentialsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSlackOAuthCredentials},
		inters: c.Interceptors(),
	}
}

// Get returns a SlackOAuthCredentials entity by its id.
func (c *SlackOAuthCredentialsClient) Get(ctx context.Context, id uuid.UUID) (*SlackOAuthCredentials, error) {
	return c.Query().Where(slackoauthcredentials.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SlackOAuthCredentialsClient) GetX(ctx context.Context, id uuid.UUID) *SlackOAuthCredentials {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SlackOAuthCredentialsClient) Hooks() []Hook {
	return c.hooks.SlackOAuthCredentials
}

// Interceptors returns the client interceptors.
func (c *SlackOAuthCredentialsClient) Interceptors() []Interceptor {
	return c.inters.SlackOAuthCredentials
}

func (c *SlackOAuthCredentialsClient) mutate(ctx context.Context, m *SlackOAuthCredentialsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SlackOAuthCredentialsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SlackOAuthCredentialsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SlackOAuthCredentialsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SlackOAuthCredentialsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SlackOAuthCredentials mutation op: %q", m.Op())
	}
}

// TelegramChatFeatureFlagsClient is a client for the TelegramChatFeatureFlags schema.
type TelegramChatFeatureFlagsClient struct {
	config
}

// NewTelegramChatFeatureFlagsClient returns a client for the TelegramChatFeatureFlags from the given config.
func NewTelegramChatFeatureFlagsClient(c config) *TelegramChatFeatureFlagsClient {
	return &TelegramChatFeatureFlagsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `telegramchatfeatureflags.Hooks(f(g(h())))`.
func (c *TelegramChatFeatureFlagsClient) Use(hooks ...Hook) {
	c.hooks.TelegramChatFeatureFlags = append(c.hooks.TelegramChatFeatureFlags, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `telegramchatfeatureflags.Intercept(f(g(h())))`.
func (c *TelegramChatFeatureFlagsClient) Intercept(interceptors ...Interceptor) {
	c.inters.TelegramChatFeatureFlags = append(c.inters.TelegramChatFeatureFlags, interceptors...)
}

// Create returns a builder for creating a TelegramChatFeatureFlags entity.
func (c *TelegramChatFeatureFlagsClient) Create() *TelegramChatFeatureFlagsCreate {
	mutation := newTelegramChatFeatureFlagsMutation(c.config, OpCreate)
	return &TelegramChatFeatureFlagsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TelegramChatFeatureFlags entities.
func (c *TelegramChatFeatureFlagsClient) CreateBulk(builders ...*TelegramChatFeatureFlagsCreate) *TelegramChatFeatureFlagsCreateBulk {
	return &TelegramChatFeatureFlagsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TelegramChatFeatureFlags.
func (c *TelegramChatFeatureFlagsClient) Update() *TelegramChatFeatureFlagsUpdate {
	mutation := newTelegramChatFeatureFlagsMutation(c.config, OpUpdate)
	return &TelegramChatFeatureFlagsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TelegramChatFeatureFlagsClient) UpdateOne(tcff *TelegramChatFeatureFlags) *TelegramChatFeatureFlagsUpdateOne {
	mutation := newTelegramChatFeatureFlagsMutation(c.config, OpUpdateOne, withTelegramChatFeatureFlags(tcff))
	return &TelegramChatFeatureFlagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TelegramChatFeatureFlagsClient) UpdateOneID(id uuid.UUID) *TelegramChatFeatureFlagsUpdateOne {
	mutation := newTelegramChatFeatureFlagsMutation(c.config, OpUpdateOne, withTelegramChatFeatureFlagsID(id))
	return &TelegramChatFeatureFlagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TelegramChatFeatureFlags.
func (c *TelegramChatFeatureFlagsClient) Delete() *TelegramChatFeatureFlagsDelete {
	mutation := newTelegramChatFeatureFlagsMutation(c.config, OpDelete)
	return &TelegramChatFeatureFlagsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TelegramChatFeatureFlagsClient) DeleteOne(tcff *TelegramChatFeatureFlags) *TelegramChatFeatureFlagsDeleteOne {
	return c.DeleteOneID(tcff.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TelegramChatFeatureFlagsClient) DeleteOneID(id uuid.UUID) *TelegramChatFeatureFlagsDeleteOne {
	builder := c.Delete().Where(telegramchatfeatureflags.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TelegramChatFeatureFlagsDeleteOne{builder}
}

// Query returns a query builder for TelegramChatFeatureFlags.
func (c *TelegramChatFeatureFlagsClient) Query() *TelegramChatFeatureFlagsQuery {
	return &TelegramChatFeatureFlagsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTelegramChatFeatureFlags},
		inters: c.Interceptors(),
	}
}

// Get returns a TelegramChatFeatureFlags entity by its id.
func (c *TelegramChatFeatureFlagsClient) Get(ctx context.Context, id uuid.UUID) (*TelegramChatFeatureFlags, error) {
	return c.Query().Where(telegramchatfeatureflags.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TelegramChatFeatureFlagsClient) GetX(ctx context.Context, id uuid.UUID) *TelegramChatFeatureFlags {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TelegramChatFeatureFlagsClient) Hooks() []Hook {
	return c.hooks.TelegramChatFeatureFlags
}

// Interceptors returns the client interceptors.
func (c *TelegramChatFeatureFlagsClient) Interceptors() []Interceptor {
	return c.inters.TelegramChatFeatureFlags
}

func (c *TelegramChatFeatureFlagsClient) mutate(ctx context.Context, m *TelegramChatFeatureFlagsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TelegramChatFeatureFlagsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TelegramChatFeatureFlagsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TelegramChatFeatureFlagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TelegramChatFeatureFlagsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TelegramChatFeatureFlags mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ChatHistories, LogChatHistoriesRecap, LogSummarizations,
		MetricOpenAIChatCompletionTokenUsage, SlackOAuthCredentials,
		TelegramChatFeatureFlags []ent.Hook
	}
	inters struct {
		ChatHistories, LogChatHistoriesRecap, LogSummarizations,
		MetricOpenAIChatCompletionTokenUsage, SlackOAuthCredentials,
		TelegramChatFeatureFlags []ent.Interceptor
	}
)

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig = internal.SchemaConfig

// AlternateSchemas allows alternate schema names to be
// passed into ent operations.
func AlternateSchema(schemaConfig SchemaConfig) Option {
	return func(c *config) {
		c.schemaConfig = schemaConfig
	}
}

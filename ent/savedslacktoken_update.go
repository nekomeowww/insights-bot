// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/savedslacktoken"
)

// SavedSlackTokenUpdate is the builder for updating SavedSlackToken entities.
type SavedSlackTokenUpdate struct {
	config
	hooks    []Hook
	mutation *SavedSlackTokenMutation
}

// Where appends a list predicates to the SavedSlackTokenUpdate builder.
func (sstu *SavedSlackTokenUpdate) Where(ps ...predicate.SavedSlackToken) *SavedSlackTokenUpdate {
	sstu.mutation.Where(ps...)
	return sstu
}

// SetAccessToken sets the "access_token" field.
func (sstu *SavedSlackTokenUpdate) SetAccessToken(s string) *SavedSlackTokenUpdate {
	sstu.mutation.SetAccessToken(s)
	return sstu
}

// SetCreatedAt sets the "created_at" field.
func (sstu *SavedSlackTokenUpdate) SetCreatedAt(i int64) *SavedSlackTokenUpdate {
	sstu.mutation.ResetCreatedAt()
	sstu.mutation.SetCreatedAt(i)
	return sstu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sstu *SavedSlackTokenUpdate) SetNillableCreatedAt(i *int64) *SavedSlackTokenUpdate {
	if i != nil {
		sstu.SetCreatedAt(*i)
	}
	return sstu
}

// AddCreatedAt adds i to the "created_at" field.
func (sstu *SavedSlackTokenUpdate) AddCreatedAt(i int64) *SavedSlackTokenUpdate {
	sstu.mutation.AddCreatedAt(i)
	return sstu
}

// SetUpdatedAt sets the "updated_at" field.
func (sstu *SavedSlackTokenUpdate) SetUpdatedAt(i int64) *SavedSlackTokenUpdate {
	sstu.mutation.ResetUpdatedAt()
	sstu.mutation.SetUpdatedAt(i)
	return sstu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sstu *SavedSlackTokenUpdate) SetNillableUpdatedAt(i *int64) *SavedSlackTokenUpdate {
	if i != nil {
		sstu.SetUpdatedAt(*i)
	}
	return sstu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (sstu *SavedSlackTokenUpdate) AddUpdatedAt(i int64) *SavedSlackTokenUpdate {
	sstu.mutation.AddUpdatedAt(i)
	return sstu
}

// Mutation returns the SavedSlackTokenMutation object of the builder.
func (sstu *SavedSlackTokenUpdate) Mutation() *SavedSlackTokenMutation {
	return sstu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sstu *SavedSlackTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SavedSlackTokenMutation](ctx, sstu.sqlSave, sstu.mutation, sstu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sstu *SavedSlackTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := sstu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sstu *SavedSlackTokenUpdate) Exec(ctx context.Context) error {
	_, err := sstu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sstu *SavedSlackTokenUpdate) ExecX(ctx context.Context) {
	if err := sstu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sstu *SavedSlackTokenUpdate) check() error {
	if v, ok := sstu.mutation.AccessToken(); ok {
		if err := savedslacktoken.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "SavedSlackToken.access_token": %w`, err)}
		}
	}
	return nil
}

func (sstu *SavedSlackTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sstu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(savedslacktoken.Table, savedslacktoken.Columns, sqlgraph.NewFieldSpec(savedslacktoken.FieldID, field.TypeUUID))
	if ps := sstu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sstu.mutation.AccessToken(); ok {
		_spec.SetField(savedslacktoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := sstu.mutation.CreatedAt(); ok {
		_spec.SetField(savedslacktoken.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := sstu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(savedslacktoken.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := sstu.mutation.UpdatedAt(); ok {
		_spec.SetField(savedslacktoken.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := sstu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(savedslacktoken.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = sstu.schemaConfig.SavedSlackToken
	ctx = internal.NewSchemaConfigContext(ctx, sstu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, sstu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{savedslacktoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sstu.mutation.done = true
	return n, nil
}

// SavedSlackTokenUpdateOne is the builder for updating a single SavedSlackToken entity.
type SavedSlackTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SavedSlackTokenMutation
}

// SetAccessToken sets the "access_token" field.
func (sstuo *SavedSlackTokenUpdateOne) SetAccessToken(s string) *SavedSlackTokenUpdateOne {
	sstuo.mutation.SetAccessToken(s)
	return sstuo
}

// SetCreatedAt sets the "created_at" field.
func (sstuo *SavedSlackTokenUpdateOne) SetCreatedAt(i int64) *SavedSlackTokenUpdateOne {
	sstuo.mutation.ResetCreatedAt()
	sstuo.mutation.SetCreatedAt(i)
	return sstuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sstuo *SavedSlackTokenUpdateOne) SetNillableCreatedAt(i *int64) *SavedSlackTokenUpdateOne {
	if i != nil {
		sstuo.SetCreatedAt(*i)
	}
	return sstuo
}

// AddCreatedAt adds i to the "created_at" field.
func (sstuo *SavedSlackTokenUpdateOne) AddCreatedAt(i int64) *SavedSlackTokenUpdateOne {
	sstuo.mutation.AddCreatedAt(i)
	return sstuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sstuo *SavedSlackTokenUpdateOne) SetUpdatedAt(i int64) *SavedSlackTokenUpdateOne {
	sstuo.mutation.ResetUpdatedAt()
	sstuo.mutation.SetUpdatedAt(i)
	return sstuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sstuo *SavedSlackTokenUpdateOne) SetNillableUpdatedAt(i *int64) *SavedSlackTokenUpdateOne {
	if i != nil {
		sstuo.SetUpdatedAt(*i)
	}
	return sstuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (sstuo *SavedSlackTokenUpdateOne) AddUpdatedAt(i int64) *SavedSlackTokenUpdateOne {
	sstuo.mutation.AddUpdatedAt(i)
	return sstuo
}

// Mutation returns the SavedSlackTokenMutation object of the builder.
func (sstuo *SavedSlackTokenUpdateOne) Mutation() *SavedSlackTokenMutation {
	return sstuo.mutation
}

// Where appends a list predicates to the SavedSlackTokenUpdate builder.
func (sstuo *SavedSlackTokenUpdateOne) Where(ps ...predicate.SavedSlackToken) *SavedSlackTokenUpdateOne {
	sstuo.mutation.Where(ps...)
	return sstuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sstuo *SavedSlackTokenUpdateOne) Select(field string, fields ...string) *SavedSlackTokenUpdateOne {
	sstuo.fields = append([]string{field}, fields...)
	return sstuo
}

// Save executes the query and returns the updated SavedSlackToken entity.
func (sstuo *SavedSlackTokenUpdateOne) Save(ctx context.Context) (*SavedSlackToken, error) {
	return withHooks[*SavedSlackToken, SavedSlackTokenMutation](ctx, sstuo.sqlSave, sstuo.mutation, sstuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sstuo *SavedSlackTokenUpdateOne) SaveX(ctx context.Context) *SavedSlackToken {
	node, err := sstuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sstuo *SavedSlackTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := sstuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sstuo *SavedSlackTokenUpdateOne) ExecX(ctx context.Context) {
	if err := sstuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sstuo *SavedSlackTokenUpdateOne) check() error {
	if v, ok := sstuo.mutation.AccessToken(); ok {
		if err := savedslacktoken.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "SavedSlackToken.access_token": %w`, err)}
		}
	}
	return nil
}

func (sstuo *SavedSlackTokenUpdateOne) sqlSave(ctx context.Context) (_node *SavedSlackToken, err error) {
	if err := sstuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(savedslacktoken.Table, savedslacktoken.Columns, sqlgraph.NewFieldSpec(savedslacktoken.FieldID, field.TypeUUID))
	id, ok := sstuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SavedSlackToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sstuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, savedslacktoken.FieldID)
		for _, f := range fields {
			if !savedslacktoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != savedslacktoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sstuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sstuo.mutation.AccessToken(); ok {
		_spec.SetField(savedslacktoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := sstuo.mutation.CreatedAt(); ok {
		_spec.SetField(savedslacktoken.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := sstuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(savedslacktoken.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := sstuo.mutation.UpdatedAt(); ok {
		_spec.SetField(savedslacktoken.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := sstuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(savedslacktoken.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = sstuo.schemaConfig.SavedSlackToken
	ctx = internal.NewSchemaConfigContext(ctx, sstuo.schemaConfig)
	_node = &SavedSlackToken{config: sstuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sstuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{savedslacktoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sstuo.mutation.done = true
	return _node, nil
}

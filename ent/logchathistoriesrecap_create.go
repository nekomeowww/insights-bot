// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/logchathistoriesrecap"
)

// LogChatHistoriesRecapCreate is the builder for creating a LogChatHistoriesRecap entity.
type LogChatHistoriesRecapCreate struct {
	config
	mutation *LogChatHistoriesRecapMutation
	hooks    []Hook
}

// SetChatID sets the "chat_id" field.
func (lchrc *LogChatHistoriesRecapCreate) SetChatID(i int64) *LogChatHistoriesRecapCreate {
	lchrc.mutation.SetChatID(i)
	return lchrc
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (lchrc *LogChatHistoriesRecapCreate) SetNillableChatID(i *int64) *LogChatHistoriesRecapCreate {
	if i != nil {
		lchrc.SetChatID(*i)
	}
	return lchrc
}

// SetRecapInputs sets the "recap_inputs" field.
func (lchrc *LogChatHistoriesRecapCreate) SetRecapInputs(s string) *LogChatHistoriesRecapCreate {
	lchrc.mutation.SetRecapInputs(s)
	return lchrc
}

// SetNillableRecapInputs sets the "recap_inputs" field if the given value is not nil.
func (lchrc *LogChatHistoriesRecapCreate) SetNillableRecapInputs(s *string) *LogChatHistoriesRecapCreate {
	if s != nil {
		lchrc.SetRecapInputs(*s)
	}
	return lchrc
}

// SetRecapOutputs sets the "recap_outputs" field.
func (lchrc *LogChatHistoriesRecapCreate) SetRecapOutputs(s string) *LogChatHistoriesRecapCreate {
	lchrc.mutation.SetRecapOutputs(s)
	return lchrc
}

// SetNillableRecapOutputs sets the "recap_outputs" field if the given value is not nil.
func (lchrc *LogChatHistoriesRecapCreate) SetNillableRecapOutputs(s *string) *LogChatHistoriesRecapCreate {
	if s != nil {
		lchrc.SetRecapOutputs(*s)
	}
	return lchrc
}

// SetFromPlatform sets the "from_platform" field.
func (lchrc *LogChatHistoriesRecapCreate) SetFromPlatform(i int) *LogChatHistoriesRecapCreate {
	lchrc.mutation.SetFromPlatform(i)
	return lchrc
}

// SetNillableFromPlatform sets the "from_platform" field if the given value is not nil.
func (lchrc *LogChatHistoriesRecapCreate) SetNillableFromPlatform(i *int) *LogChatHistoriesRecapCreate {
	if i != nil {
		lchrc.SetFromPlatform(*i)
	}
	return lchrc
}

// SetCreatedAt sets the "created_at" field.
func (lchrc *LogChatHistoriesRecapCreate) SetCreatedAt(i int64) *LogChatHistoriesRecapCreate {
	lchrc.mutation.SetCreatedAt(i)
	return lchrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lchrc *LogChatHistoriesRecapCreate) SetNillableCreatedAt(i *int64) *LogChatHistoriesRecapCreate {
	if i != nil {
		lchrc.SetCreatedAt(*i)
	}
	return lchrc
}

// SetUpdatedAt sets the "updated_at" field.
func (lchrc *LogChatHistoriesRecapCreate) SetUpdatedAt(i int64) *LogChatHistoriesRecapCreate {
	lchrc.mutation.SetUpdatedAt(i)
	return lchrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lchrc *LogChatHistoriesRecapCreate) SetNillableUpdatedAt(i *int64) *LogChatHistoriesRecapCreate {
	if i != nil {
		lchrc.SetUpdatedAt(*i)
	}
	return lchrc
}

// SetID sets the "id" field.
func (lchrc *LogChatHistoriesRecapCreate) SetID(u uuid.UUID) *LogChatHistoriesRecapCreate {
	lchrc.mutation.SetID(u)
	return lchrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lchrc *LogChatHistoriesRecapCreate) SetNillableID(u *uuid.UUID) *LogChatHistoriesRecapCreate {
	if u != nil {
		lchrc.SetID(*u)
	}
	return lchrc
}

// Mutation returns the LogChatHistoriesRecapMutation object of the builder.
func (lchrc *LogChatHistoriesRecapCreate) Mutation() *LogChatHistoriesRecapMutation {
	return lchrc.mutation
}

// Save creates the LogChatHistoriesRecap in the database.
func (lchrc *LogChatHistoriesRecapCreate) Save(ctx context.Context) (*LogChatHistoriesRecap, error) {
	lchrc.defaults()
	return withHooks(ctx, lchrc.sqlSave, lchrc.mutation, lchrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lchrc *LogChatHistoriesRecapCreate) SaveX(ctx context.Context) *LogChatHistoriesRecap {
	v, err := lchrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lchrc *LogChatHistoriesRecapCreate) Exec(ctx context.Context) error {
	_, err := lchrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lchrc *LogChatHistoriesRecapCreate) ExecX(ctx context.Context) {
	if err := lchrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lchrc *LogChatHistoriesRecapCreate) defaults() {
	if _, ok := lchrc.mutation.ChatID(); !ok {
		v := logchathistoriesrecap.DefaultChatID
		lchrc.mutation.SetChatID(v)
	}
	if _, ok := lchrc.mutation.RecapInputs(); !ok {
		v := logchathistoriesrecap.DefaultRecapInputs
		lchrc.mutation.SetRecapInputs(v)
	}
	if _, ok := lchrc.mutation.RecapOutputs(); !ok {
		v := logchathistoriesrecap.DefaultRecapOutputs
		lchrc.mutation.SetRecapOutputs(v)
	}
	if _, ok := lchrc.mutation.FromPlatform(); !ok {
		v := logchathistoriesrecap.DefaultFromPlatform
		lchrc.mutation.SetFromPlatform(v)
	}
	if _, ok := lchrc.mutation.CreatedAt(); !ok {
		v := logchathistoriesrecap.DefaultCreatedAt()
		lchrc.mutation.SetCreatedAt(v)
	}
	if _, ok := lchrc.mutation.UpdatedAt(); !ok {
		v := logchathistoriesrecap.DefaultUpdatedAt()
		lchrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lchrc.mutation.ID(); !ok {
		v := logchathistoriesrecap.DefaultID()
		lchrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lchrc *LogChatHistoriesRecapCreate) check() error {
	if _, ok := lchrc.mutation.ChatID(); !ok {
		return &ValidationError{Name: "chat_id", err: errors.New(`ent: missing required field "LogChatHistoriesRecap.chat_id"`)}
	}
	if _, ok := lchrc.mutation.RecapInputs(); !ok {
		return &ValidationError{Name: "recap_inputs", err: errors.New(`ent: missing required field "LogChatHistoriesRecap.recap_inputs"`)}
	}
	if _, ok := lchrc.mutation.RecapOutputs(); !ok {
		return &ValidationError{Name: "recap_outputs", err: errors.New(`ent: missing required field "LogChatHistoriesRecap.recap_outputs"`)}
	}
	if _, ok := lchrc.mutation.FromPlatform(); !ok {
		return &ValidationError{Name: "from_platform", err: errors.New(`ent: missing required field "LogChatHistoriesRecap.from_platform"`)}
	}
	if _, ok := lchrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LogChatHistoriesRecap.created_at"`)}
	}
	if _, ok := lchrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LogChatHistoriesRecap.updated_at"`)}
	}
	return nil
}

func (lchrc *LogChatHistoriesRecapCreate) sqlSave(ctx context.Context) (*LogChatHistoriesRecap, error) {
	if err := lchrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lchrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lchrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lchrc.mutation.id = &_node.ID
	lchrc.mutation.done = true
	return _node, nil
}

func (lchrc *LogChatHistoriesRecapCreate) createSpec() (*LogChatHistoriesRecap, *sqlgraph.CreateSpec) {
	var (
		_node = &LogChatHistoriesRecap{config: lchrc.config}
		_spec = sqlgraph.NewCreateSpec(logchathistoriesrecap.Table, sqlgraph.NewFieldSpec(logchathistoriesrecap.FieldID, field.TypeUUID))
	)
	_spec.Schema = lchrc.schemaConfig.LogChatHistoriesRecap
	if id, ok := lchrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lchrc.mutation.ChatID(); ok {
		_spec.SetField(logchathistoriesrecap.FieldChatID, field.TypeInt64, value)
		_node.ChatID = value
	}
	if value, ok := lchrc.mutation.RecapInputs(); ok {
		_spec.SetField(logchathistoriesrecap.FieldRecapInputs, field.TypeString, value)
		_node.RecapInputs = value
	}
	if value, ok := lchrc.mutation.RecapOutputs(); ok {
		_spec.SetField(logchathistoriesrecap.FieldRecapOutputs, field.TypeString, value)
		_node.RecapOutputs = value
	}
	if value, ok := lchrc.mutation.FromPlatform(); ok {
		_spec.SetField(logchathistoriesrecap.FieldFromPlatform, field.TypeInt, value)
		_node.FromPlatform = value
	}
	if value, ok := lchrc.mutation.CreatedAt(); ok {
		_spec.SetField(logchathistoriesrecap.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := lchrc.mutation.UpdatedAt(); ok {
		_spec.SetField(logchathistoriesrecap.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// LogChatHistoriesRecapCreateBulk is the builder for creating many LogChatHistoriesRecap entities in bulk.
type LogChatHistoriesRecapCreateBulk struct {
	config
	builders []*LogChatHistoriesRecapCreate
}

// Save creates the LogChatHistoriesRecap entities in the database.
func (lchrcb *LogChatHistoriesRecapCreateBulk) Save(ctx context.Context) ([]*LogChatHistoriesRecap, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lchrcb.builders))
	nodes := make([]*LogChatHistoriesRecap, len(lchrcb.builders))
	mutators := make([]Mutator, len(lchrcb.builders))
	for i := range lchrcb.builders {
		func(i int, root context.Context) {
			builder := lchrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogChatHistoriesRecapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lchrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lchrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lchrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lchrcb *LogChatHistoriesRecapCreateBulk) SaveX(ctx context.Context) []*LogChatHistoriesRecap {
	v, err := lchrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lchrcb *LogChatHistoriesRecapCreateBulk) Exec(ctx context.Context) error {
	_, err := lchrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lchrcb *LogChatHistoriesRecapCreateBulk) ExecX(ctx context.Context) {
	if err := lchrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

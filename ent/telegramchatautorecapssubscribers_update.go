// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/telegramchatautorecapssubscribers"
)

// TelegramChatAutoRecapsSubscribersUpdate is the builder for updating TelegramChatAutoRecapsSubscribers entities.
type TelegramChatAutoRecapsSubscribersUpdate struct {
	config
	hooks    []Hook
	mutation *TelegramChatAutoRecapsSubscribersMutation
}

// Where appends a list predicates to the TelegramChatAutoRecapsSubscribersUpdate builder.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) Where(ps ...predicate.TelegramChatAutoRecapsSubscribers) *TelegramChatAutoRecapsSubscribersUpdate {
	tcarsu.mutation.Where(ps...)
	return tcarsu
}

// SetChatID sets the "chat_id" field.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) SetChatID(i int64) *TelegramChatAutoRecapsSubscribersUpdate {
	tcarsu.mutation.ResetChatID()
	tcarsu.mutation.SetChatID(i)
	return tcarsu
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) SetNillableChatID(i *int64) *TelegramChatAutoRecapsSubscribersUpdate {
	if i != nil {
		tcarsu.SetChatID(*i)
	}
	return tcarsu
}

// AddChatID adds i to the "chat_id" field.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) AddChatID(i int64) *TelegramChatAutoRecapsSubscribersUpdate {
	tcarsu.mutation.AddChatID(i)
	return tcarsu
}

// SetUserID sets the "user_id" field.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) SetUserID(i int64) *TelegramChatAutoRecapsSubscribersUpdate {
	tcarsu.mutation.ResetUserID()
	tcarsu.mutation.SetUserID(i)
	return tcarsu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) SetNillableUserID(i *int64) *TelegramChatAutoRecapsSubscribersUpdate {
	if i != nil {
		tcarsu.SetUserID(*i)
	}
	return tcarsu
}

// AddUserID adds i to the "user_id" field.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) AddUserID(i int64) *TelegramChatAutoRecapsSubscribersUpdate {
	tcarsu.mutation.AddUserID(i)
	return tcarsu
}

// SetCreatedAt sets the "created_at" field.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) SetCreatedAt(i int64) *TelegramChatAutoRecapsSubscribersUpdate {
	tcarsu.mutation.ResetCreatedAt()
	tcarsu.mutation.SetCreatedAt(i)
	return tcarsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) SetNillableCreatedAt(i *int64) *TelegramChatAutoRecapsSubscribersUpdate {
	if i != nil {
		tcarsu.SetCreatedAt(*i)
	}
	return tcarsu
}

// AddCreatedAt adds i to the "created_at" field.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) AddCreatedAt(i int64) *TelegramChatAutoRecapsSubscribersUpdate {
	tcarsu.mutation.AddCreatedAt(i)
	return tcarsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) SetUpdatedAt(i int64) *TelegramChatAutoRecapsSubscribersUpdate {
	tcarsu.mutation.ResetUpdatedAt()
	tcarsu.mutation.SetUpdatedAt(i)
	return tcarsu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) SetNillableUpdatedAt(i *int64) *TelegramChatAutoRecapsSubscribersUpdate {
	if i != nil {
		tcarsu.SetUpdatedAt(*i)
	}
	return tcarsu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) AddUpdatedAt(i int64) *TelegramChatAutoRecapsSubscribersUpdate {
	tcarsu.mutation.AddUpdatedAt(i)
	return tcarsu
}

// Mutation returns the TelegramChatAutoRecapsSubscribersMutation object of the builder.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) Mutation() *TelegramChatAutoRecapsSubscribersMutation {
	return tcarsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tcarsu.sqlSave, tcarsu.mutation, tcarsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) SaveX(ctx context.Context) int {
	affected, err := tcarsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) Exec(ctx context.Context) error {
	_, err := tcarsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) ExecX(ctx context.Context) {
	if err := tcarsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcarsu *TelegramChatAutoRecapsSubscribersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramchatautorecapssubscribers.Table, telegramchatautorecapssubscribers.Columns, sqlgraph.NewFieldSpec(telegramchatautorecapssubscribers.FieldID, field.TypeUUID))
	if ps := tcarsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcarsu.mutation.ChatID(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := tcarsu.mutation.AddedChatID(); ok {
		_spec.AddField(telegramchatautorecapssubscribers.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := tcarsu.mutation.UserID(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tcarsu.mutation.AddedUserID(); ok {
		_spec.AddField(telegramchatautorecapssubscribers.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tcarsu.mutation.CreatedAt(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := tcarsu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(telegramchatautorecapssubscribers.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := tcarsu.mutation.UpdatedAt(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tcarsu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(telegramchatautorecapssubscribers.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = tcarsu.schemaConfig.TelegramChatAutoRecapsSubscribers
	ctx = internal.NewSchemaConfigContext(ctx, tcarsu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, tcarsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramchatautorecapssubscribers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcarsu.mutation.done = true
	return n, nil
}

// TelegramChatAutoRecapsSubscribersUpdateOne is the builder for updating a single TelegramChatAutoRecapsSubscribers entity.
type TelegramChatAutoRecapsSubscribersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelegramChatAutoRecapsSubscribersMutation
}

// SetChatID sets the "chat_id" field.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) SetChatID(i int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	tcarsuo.mutation.ResetChatID()
	tcarsuo.mutation.SetChatID(i)
	return tcarsuo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) SetNillableChatID(i *int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	if i != nil {
		tcarsuo.SetChatID(*i)
	}
	return tcarsuo
}

// AddChatID adds i to the "chat_id" field.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) AddChatID(i int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	tcarsuo.mutation.AddChatID(i)
	return tcarsuo
}

// SetUserID sets the "user_id" field.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) SetUserID(i int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	tcarsuo.mutation.ResetUserID()
	tcarsuo.mutation.SetUserID(i)
	return tcarsuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) SetNillableUserID(i *int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	if i != nil {
		tcarsuo.SetUserID(*i)
	}
	return tcarsuo
}

// AddUserID adds i to the "user_id" field.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) AddUserID(i int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	tcarsuo.mutation.AddUserID(i)
	return tcarsuo
}

// SetCreatedAt sets the "created_at" field.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) SetCreatedAt(i int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	tcarsuo.mutation.ResetCreatedAt()
	tcarsuo.mutation.SetCreatedAt(i)
	return tcarsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) SetNillableCreatedAt(i *int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	if i != nil {
		tcarsuo.SetCreatedAt(*i)
	}
	return tcarsuo
}

// AddCreatedAt adds i to the "created_at" field.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) AddCreatedAt(i int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	tcarsuo.mutation.AddCreatedAt(i)
	return tcarsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) SetUpdatedAt(i int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	tcarsuo.mutation.ResetUpdatedAt()
	tcarsuo.mutation.SetUpdatedAt(i)
	return tcarsuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) SetNillableUpdatedAt(i *int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	if i != nil {
		tcarsuo.SetUpdatedAt(*i)
	}
	return tcarsuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) AddUpdatedAt(i int64) *TelegramChatAutoRecapsSubscribersUpdateOne {
	tcarsuo.mutation.AddUpdatedAt(i)
	return tcarsuo
}

// Mutation returns the TelegramChatAutoRecapsSubscribersMutation object of the builder.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) Mutation() *TelegramChatAutoRecapsSubscribersMutation {
	return tcarsuo.mutation
}

// Where appends a list predicates to the TelegramChatAutoRecapsSubscribersUpdate builder.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) Where(ps ...predicate.TelegramChatAutoRecapsSubscribers) *TelegramChatAutoRecapsSubscribersUpdateOne {
	tcarsuo.mutation.Where(ps...)
	return tcarsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) Select(field string, fields ...string) *TelegramChatAutoRecapsSubscribersUpdateOne {
	tcarsuo.fields = append([]string{field}, fields...)
	return tcarsuo
}

// Save executes the query and returns the updated TelegramChatAutoRecapsSubscribers entity.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) Save(ctx context.Context) (*TelegramChatAutoRecapsSubscribers, error) {
	return withHooks(ctx, tcarsuo.sqlSave, tcarsuo.mutation, tcarsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) SaveX(ctx context.Context) *TelegramChatAutoRecapsSubscribers {
	node, err := tcarsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) Exec(ctx context.Context) error {
	_, err := tcarsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) ExecX(ctx context.Context) {
	if err := tcarsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcarsuo *TelegramChatAutoRecapsSubscribersUpdateOne) sqlSave(ctx context.Context) (_node *TelegramChatAutoRecapsSubscribers, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramchatautorecapssubscribers.Table, telegramchatautorecapssubscribers.Columns, sqlgraph.NewFieldSpec(telegramchatautorecapssubscribers.FieldID, field.TypeUUID))
	id, ok := tcarsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TelegramChatAutoRecapsSubscribers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcarsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telegramchatautorecapssubscribers.FieldID)
		for _, f := range fields {
			if !telegramchatautorecapssubscribers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telegramchatautorecapssubscribers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcarsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcarsuo.mutation.ChatID(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := tcarsuo.mutation.AddedChatID(); ok {
		_spec.AddField(telegramchatautorecapssubscribers.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := tcarsuo.mutation.UserID(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tcarsuo.mutation.AddedUserID(); ok {
		_spec.AddField(telegramchatautorecapssubscribers.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tcarsuo.mutation.CreatedAt(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := tcarsuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(telegramchatautorecapssubscribers.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := tcarsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(telegramchatautorecapssubscribers.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tcarsuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(telegramchatautorecapssubscribers.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = tcarsuo.schemaConfig.TelegramChatAutoRecapsSubscribers
	ctx = internal.NewSchemaConfigContext(ctx, tcarsuo.schemaConfig)
	_node = &TelegramChatAutoRecapsSubscribers{config: tcarsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcarsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramchatautorecapssubscribers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcarsuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/savedslacktoken"
)

// SavedSlackToken is the model entity for the SavedSlackToken schema.
type SavedSlackToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TeamID holds the value of the "team_id" field.
	TeamID string `json:"team_id,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SavedSlackToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case savedslacktoken.FieldCreatedAt, savedslacktoken.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case savedslacktoken.FieldTeamID, savedslacktoken.FieldAccessToken:
			values[i] = new(sql.NullString)
		case savedslacktoken.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SavedSlackToken fields.
func (sst *SavedSlackToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case savedslacktoken.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sst.ID = *value
			}
		case savedslacktoken.FieldTeamID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value.Valid {
				sst.TeamID = value.String
			}
		case savedslacktoken.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				sst.AccessToken = value.String
			}
		case savedslacktoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sst.CreatedAt = value.Int64
			}
		case savedslacktoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sst.UpdatedAt = value.Int64
			}
		default:
			sst.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SavedSlackToken.
// This includes values selected through modifiers, order, etc.
func (sst *SavedSlackToken) Value(name string) (ent.Value, error) {
	return sst.selectValues.Get(name)
}

// Update returns a builder for updating this SavedSlackToken.
// Note that you need to call SavedSlackToken.Unwrap() before calling this method if this SavedSlackToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (sst *SavedSlackToken) Update() *SavedSlackTokenUpdateOne {
	return NewSavedSlackTokenClient(sst.config).UpdateOne(sst)
}

// Unwrap unwraps the SavedSlackToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sst *SavedSlackToken) Unwrap() *SavedSlackToken {
	_tx, ok := sst.config.driver.(*txDriver)
	if !ok {
		panic("ent: SavedSlackToken is not a transactional entity")
	}
	sst.config.driver = _tx.drv
	return sst
}

// String implements the fmt.Stringer.
func (sst *SavedSlackToken) String() string {
	var builder strings.Builder
	builder.WriteString("SavedSlackToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sst.ID))
	builder.WriteString("team_id=")
	builder.WriteString(sst.TeamID)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(sst.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sst.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", sst.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// SavedSlackTokens is a parsable slice of SavedSlackToken.
type SavedSlackTokens []*SavedSlackToken

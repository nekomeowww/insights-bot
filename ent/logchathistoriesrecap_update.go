// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/logchathistoriesrecap"
	"github.com/nekomeowww/insights-bot/ent/predicate"
)

// LogChatHistoriesRecapUpdate is the builder for updating LogChatHistoriesRecap entities.
type LogChatHistoriesRecapUpdate struct {
	config
	hooks    []Hook
	mutation *LogChatHistoriesRecapMutation
}

// Where appends a list predicates to the LogChatHistoriesRecapUpdate builder.
func (lchru *LogChatHistoriesRecapUpdate) Where(ps ...predicate.LogChatHistoriesRecap) *LogChatHistoriesRecapUpdate {
	lchru.mutation.Where(ps...)
	return lchru
}

// SetChatID sets the "chat_id" field.
func (lchru *LogChatHistoriesRecapUpdate) SetChatID(i int64) *LogChatHistoriesRecapUpdate {
	lchru.mutation.ResetChatID()
	lchru.mutation.SetChatID(i)
	return lchru
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (lchru *LogChatHistoriesRecapUpdate) SetNillableChatID(i *int64) *LogChatHistoriesRecapUpdate {
	if i != nil {
		lchru.SetChatID(*i)
	}
	return lchru
}

// AddChatID adds i to the "chat_id" field.
func (lchru *LogChatHistoriesRecapUpdate) AddChatID(i int64) *LogChatHistoriesRecapUpdate {
	lchru.mutation.AddChatID(i)
	return lchru
}

// SetRecapInputs sets the "recap_inputs" field.
func (lchru *LogChatHistoriesRecapUpdate) SetRecapInputs(s string) *LogChatHistoriesRecapUpdate {
	lchru.mutation.SetRecapInputs(s)
	return lchru
}

// SetNillableRecapInputs sets the "recap_inputs" field if the given value is not nil.
func (lchru *LogChatHistoriesRecapUpdate) SetNillableRecapInputs(s *string) *LogChatHistoriesRecapUpdate {
	if s != nil {
		lchru.SetRecapInputs(*s)
	}
	return lchru
}

// SetRecapOutputs sets the "recap_outputs" field.
func (lchru *LogChatHistoriesRecapUpdate) SetRecapOutputs(s string) *LogChatHistoriesRecapUpdate {
	lchru.mutation.SetRecapOutputs(s)
	return lchru
}

// SetNillableRecapOutputs sets the "recap_outputs" field if the given value is not nil.
func (lchru *LogChatHistoriesRecapUpdate) SetNillableRecapOutputs(s *string) *LogChatHistoriesRecapUpdate {
	if s != nil {
		lchru.SetRecapOutputs(*s)
	}
	return lchru
}

// SetFromPlatform sets the "from_platform" field.
func (lchru *LogChatHistoriesRecapUpdate) SetFromPlatform(i int) *LogChatHistoriesRecapUpdate {
	lchru.mutation.ResetFromPlatform()
	lchru.mutation.SetFromPlatform(i)
	return lchru
}

// SetNillableFromPlatform sets the "from_platform" field if the given value is not nil.
func (lchru *LogChatHistoriesRecapUpdate) SetNillableFromPlatform(i *int) *LogChatHistoriesRecapUpdate {
	if i != nil {
		lchru.SetFromPlatform(*i)
	}
	return lchru
}

// AddFromPlatform adds i to the "from_platform" field.
func (lchru *LogChatHistoriesRecapUpdate) AddFromPlatform(i int) *LogChatHistoriesRecapUpdate {
	lchru.mutation.AddFromPlatform(i)
	return lchru
}

// SetPromptTokenUsage sets the "prompt_token_usage" field.
func (lchru *LogChatHistoriesRecapUpdate) SetPromptTokenUsage(i int) *LogChatHistoriesRecapUpdate {
	lchru.mutation.ResetPromptTokenUsage()
	lchru.mutation.SetPromptTokenUsage(i)
	return lchru
}

// SetNillablePromptTokenUsage sets the "prompt_token_usage" field if the given value is not nil.
func (lchru *LogChatHistoriesRecapUpdate) SetNillablePromptTokenUsage(i *int) *LogChatHistoriesRecapUpdate {
	if i != nil {
		lchru.SetPromptTokenUsage(*i)
	}
	return lchru
}

// AddPromptTokenUsage adds i to the "prompt_token_usage" field.
func (lchru *LogChatHistoriesRecapUpdate) AddPromptTokenUsage(i int) *LogChatHistoriesRecapUpdate {
	lchru.mutation.AddPromptTokenUsage(i)
	return lchru
}

// SetCompletionTokenUsage sets the "completion_token_usage" field.
func (lchru *LogChatHistoriesRecapUpdate) SetCompletionTokenUsage(i int) *LogChatHistoriesRecapUpdate {
	lchru.mutation.ResetCompletionTokenUsage()
	lchru.mutation.SetCompletionTokenUsage(i)
	return lchru
}

// SetNillableCompletionTokenUsage sets the "completion_token_usage" field if the given value is not nil.
func (lchru *LogChatHistoriesRecapUpdate) SetNillableCompletionTokenUsage(i *int) *LogChatHistoriesRecapUpdate {
	if i != nil {
		lchru.SetCompletionTokenUsage(*i)
	}
	return lchru
}

// AddCompletionTokenUsage adds i to the "completion_token_usage" field.
func (lchru *LogChatHistoriesRecapUpdate) AddCompletionTokenUsage(i int) *LogChatHistoriesRecapUpdate {
	lchru.mutation.AddCompletionTokenUsage(i)
	return lchru
}

// SetTotalTokenUsage sets the "total_token_usage" field.
func (lchru *LogChatHistoriesRecapUpdate) SetTotalTokenUsage(i int) *LogChatHistoriesRecapUpdate {
	lchru.mutation.ResetTotalTokenUsage()
	lchru.mutation.SetTotalTokenUsage(i)
	return lchru
}

// SetNillableTotalTokenUsage sets the "total_token_usage" field if the given value is not nil.
func (lchru *LogChatHistoriesRecapUpdate) SetNillableTotalTokenUsage(i *int) *LogChatHistoriesRecapUpdate {
	if i != nil {
		lchru.SetTotalTokenUsage(*i)
	}
	return lchru
}

// AddTotalTokenUsage adds i to the "total_token_usage" field.
func (lchru *LogChatHistoriesRecapUpdate) AddTotalTokenUsage(i int) *LogChatHistoriesRecapUpdate {
	lchru.mutation.AddTotalTokenUsage(i)
	return lchru
}

// SetRecapType sets the "recap_type" field.
func (lchru *LogChatHistoriesRecapUpdate) SetRecapType(i int) *LogChatHistoriesRecapUpdate {
	lchru.mutation.ResetRecapType()
	lchru.mutation.SetRecapType(i)
	return lchru
}

// SetNillableRecapType sets the "recap_type" field if the given value is not nil.
func (lchru *LogChatHistoriesRecapUpdate) SetNillableRecapType(i *int) *LogChatHistoriesRecapUpdate {
	if i != nil {
		lchru.SetRecapType(*i)
	}
	return lchru
}

// AddRecapType adds i to the "recap_type" field.
func (lchru *LogChatHistoriesRecapUpdate) AddRecapType(i int) *LogChatHistoriesRecapUpdate {
	lchru.mutation.AddRecapType(i)
	return lchru
}

// SetCreatedAt sets the "created_at" field.
func (lchru *LogChatHistoriesRecapUpdate) SetCreatedAt(i int64) *LogChatHistoriesRecapUpdate {
	lchru.mutation.ResetCreatedAt()
	lchru.mutation.SetCreatedAt(i)
	return lchru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lchru *LogChatHistoriesRecapUpdate) SetNillableCreatedAt(i *int64) *LogChatHistoriesRecapUpdate {
	if i != nil {
		lchru.SetCreatedAt(*i)
	}
	return lchru
}

// AddCreatedAt adds i to the "created_at" field.
func (lchru *LogChatHistoriesRecapUpdate) AddCreatedAt(i int64) *LogChatHistoriesRecapUpdate {
	lchru.mutation.AddCreatedAt(i)
	return lchru
}

// SetUpdatedAt sets the "updated_at" field.
func (lchru *LogChatHistoriesRecapUpdate) SetUpdatedAt(i int64) *LogChatHistoriesRecapUpdate {
	lchru.mutation.ResetUpdatedAt()
	lchru.mutation.SetUpdatedAt(i)
	return lchru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lchru *LogChatHistoriesRecapUpdate) SetNillableUpdatedAt(i *int64) *LogChatHistoriesRecapUpdate {
	if i != nil {
		lchru.SetUpdatedAt(*i)
	}
	return lchru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (lchru *LogChatHistoriesRecapUpdate) AddUpdatedAt(i int64) *LogChatHistoriesRecapUpdate {
	lchru.mutation.AddUpdatedAt(i)
	return lchru
}

// Mutation returns the LogChatHistoriesRecapMutation object of the builder.
func (lchru *LogChatHistoriesRecapUpdate) Mutation() *LogChatHistoriesRecapMutation {
	return lchru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lchru *LogChatHistoriesRecapUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lchru.sqlSave, lchru.mutation, lchru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lchru *LogChatHistoriesRecapUpdate) SaveX(ctx context.Context) int {
	affected, err := lchru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lchru *LogChatHistoriesRecapUpdate) Exec(ctx context.Context) error {
	_, err := lchru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lchru *LogChatHistoriesRecapUpdate) ExecX(ctx context.Context) {
	if err := lchru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lchru *LogChatHistoriesRecapUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(logchathistoriesrecap.Table, logchathistoriesrecap.Columns, sqlgraph.NewFieldSpec(logchathistoriesrecap.FieldID, field.TypeUUID))
	if ps := lchru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lchru.mutation.ChatID(); ok {
		_spec.SetField(logchathistoriesrecap.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := lchru.mutation.AddedChatID(); ok {
		_spec.AddField(logchathistoriesrecap.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := lchru.mutation.RecapInputs(); ok {
		_spec.SetField(logchathistoriesrecap.FieldRecapInputs, field.TypeString, value)
	}
	if value, ok := lchru.mutation.RecapOutputs(); ok {
		_spec.SetField(logchathistoriesrecap.FieldRecapOutputs, field.TypeString, value)
	}
	if value, ok := lchru.mutation.FromPlatform(); ok {
		_spec.SetField(logchathistoriesrecap.FieldFromPlatform, field.TypeInt, value)
	}
	if value, ok := lchru.mutation.AddedFromPlatform(); ok {
		_spec.AddField(logchathistoriesrecap.FieldFromPlatform, field.TypeInt, value)
	}
	if value, ok := lchru.mutation.PromptTokenUsage(); ok {
		_spec.SetField(logchathistoriesrecap.FieldPromptTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchru.mutation.AddedPromptTokenUsage(); ok {
		_spec.AddField(logchathistoriesrecap.FieldPromptTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchru.mutation.CompletionTokenUsage(); ok {
		_spec.SetField(logchathistoriesrecap.FieldCompletionTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchru.mutation.AddedCompletionTokenUsage(); ok {
		_spec.AddField(logchathistoriesrecap.FieldCompletionTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchru.mutation.TotalTokenUsage(); ok {
		_spec.SetField(logchathistoriesrecap.FieldTotalTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchru.mutation.AddedTotalTokenUsage(); ok {
		_spec.AddField(logchathistoriesrecap.FieldTotalTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchru.mutation.RecapType(); ok {
		_spec.SetField(logchathistoriesrecap.FieldRecapType, field.TypeInt, value)
	}
	if value, ok := lchru.mutation.AddedRecapType(); ok {
		_spec.AddField(logchathistoriesrecap.FieldRecapType, field.TypeInt, value)
	}
	if value, ok := lchru.mutation.CreatedAt(); ok {
		_spec.SetField(logchathistoriesrecap.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := lchru.mutation.AddedCreatedAt(); ok {
		_spec.AddField(logchathistoriesrecap.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := lchru.mutation.UpdatedAt(); ok {
		_spec.SetField(logchathistoriesrecap.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := lchru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(logchathistoriesrecap.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = lchru.schemaConfig.LogChatHistoriesRecap
	ctx = internal.NewSchemaConfigContext(ctx, lchru.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, lchru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logchathistoriesrecap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lchru.mutation.done = true
	return n, nil
}

// LogChatHistoriesRecapUpdateOne is the builder for updating a single LogChatHistoriesRecap entity.
type LogChatHistoriesRecapUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LogChatHistoriesRecapMutation
}

// SetChatID sets the "chat_id" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetChatID(i int64) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.ResetChatID()
	lchruo.mutation.SetChatID(i)
	return lchruo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetNillableChatID(i *int64) *LogChatHistoriesRecapUpdateOne {
	if i != nil {
		lchruo.SetChatID(*i)
	}
	return lchruo
}

// AddChatID adds i to the "chat_id" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) AddChatID(i int64) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.AddChatID(i)
	return lchruo
}

// SetRecapInputs sets the "recap_inputs" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetRecapInputs(s string) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.SetRecapInputs(s)
	return lchruo
}

// SetNillableRecapInputs sets the "recap_inputs" field if the given value is not nil.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetNillableRecapInputs(s *string) *LogChatHistoriesRecapUpdateOne {
	if s != nil {
		lchruo.SetRecapInputs(*s)
	}
	return lchruo
}

// SetRecapOutputs sets the "recap_outputs" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetRecapOutputs(s string) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.SetRecapOutputs(s)
	return lchruo
}

// SetNillableRecapOutputs sets the "recap_outputs" field if the given value is not nil.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetNillableRecapOutputs(s *string) *LogChatHistoriesRecapUpdateOne {
	if s != nil {
		lchruo.SetRecapOutputs(*s)
	}
	return lchruo
}

// SetFromPlatform sets the "from_platform" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetFromPlatform(i int) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.ResetFromPlatform()
	lchruo.mutation.SetFromPlatform(i)
	return lchruo
}

// SetNillableFromPlatform sets the "from_platform" field if the given value is not nil.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetNillableFromPlatform(i *int) *LogChatHistoriesRecapUpdateOne {
	if i != nil {
		lchruo.SetFromPlatform(*i)
	}
	return lchruo
}

// AddFromPlatform adds i to the "from_platform" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) AddFromPlatform(i int) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.AddFromPlatform(i)
	return lchruo
}

// SetPromptTokenUsage sets the "prompt_token_usage" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetPromptTokenUsage(i int) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.ResetPromptTokenUsage()
	lchruo.mutation.SetPromptTokenUsage(i)
	return lchruo
}

// SetNillablePromptTokenUsage sets the "prompt_token_usage" field if the given value is not nil.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetNillablePromptTokenUsage(i *int) *LogChatHistoriesRecapUpdateOne {
	if i != nil {
		lchruo.SetPromptTokenUsage(*i)
	}
	return lchruo
}

// AddPromptTokenUsage adds i to the "prompt_token_usage" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) AddPromptTokenUsage(i int) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.AddPromptTokenUsage(i)
	return lchruo
}

// SetCompletionTokenUsage sets the "completion_token_usage" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetCompletionTokenUsage(i int) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.ResetCompletionTokenUsage()
	lchruo.mutation.SetCompletionTokenUsage(i)
	return lchruo
}

// SetNillableCompletionTokenUsage sets the "completion_token_usage" field if the given value is not nil.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetNillableCompletionTokenUsage(i *int) *LogChatHistoriesRecapUpdateOne {
	if i != nil {
		lchruo.SetCompletionTokenUsage(*i)
	}
	return lchruo
}

// AddCompletionTokenUsage adds i to the "completion_token_usage" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) AddCompletionTokenUsage(i int) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.AddCompletionTokenUsage(i)
	return lchruo
}

// SetTotalTokenUsage sets the "total_token_usage" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetTotalTokenUsage(i int) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.ResetTotalTokenUsage()
	lchruo.mutation.SetTotalTokenUsage(i)
	return lchruo
}

// SetNillableTotalTokenUsage sets the "total_token_usage" field if the given value is not nil.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetNillableTotalTokenUsage(i *int) *LogChatHistoriesRecapUpdateOne {
	if i != nil {
		lchruo.SetTotalTokenUsage(*i)
	}
	return lchruo
}

// AddTotalTokenUsage adds i to the "total_token_usage" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) AddTotalTokenUsage(i int) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.AddTotalTokenUsage(i)
	return lchruo
}

// SetRecapType sets the "recap_type" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetRecapType(i int) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.ResetRecapType()
	lchruo.mutation.SetRecapType(i)
	return lchruo
}

// SetNillableRecapType sets the "recap_type" field if the given value is not nil.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetNillableRecapType(i *int) *LogChatHistoriesRecapUpdateOne {
	if i != nil {
		lchruo.SetRecapType(*i)
	}
	return lchruo
}

// AddRecapType adds i to the "recap_type" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) AddRecapType(i int) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.AddRecapType(i)
	return lchruo
}

// SetCreatedAt sets the "created_at" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetCreatedAt(i int64) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.ResetCreatedAt()
	lchruo.mutation.SetCreatedAt(i)
	return lchruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetNillableCreatedAt(i *int64) *LogChatHistoriesRecapUpdateOne {
	if i != nil {
		lchruo.SetCreatedAt(*i)
	}
	return lchruo
}

// AddCreatedAt adds i to the "created_at" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) AddCreatedAt(i int64) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.AddCreatedAt(i)
	return lchruo
}

// SetUpdatedAt sets the "updated_at" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetUpdatedAt(i int64) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.ResetUpdatedAt()
	lchruo.mutation.SetUpdatedAt(i)
	return lchruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lchruo *LogChatHistoriesRecapUpdateOne) SetNillableUpdatedAt(i *int64) *LogChatHistoriesRecapUpdateOne {
	if i != nil {
		lchruo.SetUpdatedAt(*i)
	}
	return lchruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (lchruo *LogChatHistoriesRecapUpdateOne) AddUpdatedAt(i int64) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.AddUpdatedAt(i)
	return lchruo
}

// Mutation returns the LogChatHistoriesRecapMutation object of the builder.
func (lchruo *LogChatHistoriesRecapUpdateOne) Mutation() *LogChatHistoriesRecapMutation {
	return lchruo.mutation
}

// Where appends a list predicates to the LogChatHistoriesRecapUpdate builder.
func (lchruo *LogChatHistoriesRecapUpdateOne) Where(ps ...predicate.LogChatHistoriesRecap) *LogChatHistoriesRecapUpdateOne {
	lchruo.mutation.Where(ps...)
	return lchruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lchruo *LogChatHistoriesRecapUpdateOne) Select(field string, fields ...string) *LogChatHistoriesRecapUpdateOne {
	lchruo.fields = append([]string{field}, fields...)
	return lchruo
}

// Save executes the query and returns the updated LogChatHistoriesRecap entity.
func (lchruo *LogChatHistoriesRecapUpdateOne) Save(ctx context.Context) (*LogChatHistoriesRecap, error) {
	return withHooks(ctx, lchruo.sqlSave, lchruo.mutation, lchruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lchruo *LogChatHistoriesRecapUpdateOne) SaveX(ctx context.Context) *LogChatHistoriesRecap {
	node, err := lchruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lchruo *LogChatHistoriesRecapUpdateOne) Exec(ctx context.Context) error {
	_, err := lchruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lchruo *LogChatHistoriesRecapUpdateOne) ExecX(ctx context.Context) {
	if err := lchruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lchruo *LogChatHistoriesRecapUpdateOne) sqlSave(ctx context.Context) (_node *LogChatHistoriesRecap, err error) {
	_spec := sqlgraph.NewUpdateSpec(logchathistoriesrecap.Table, logchathistoriesrecap.Columns, sqlgraph.NewFieldSpec(logchathistoriesrecap.FieldID, field.TypeUUID))
	id, ok := lchruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LogChatHistoriesRecap.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lchruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logchathistoriesrecap.FieldID)
		for _, f := range fields {
			if !logchathistoriesrecap.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logchathistoriesrecap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lchruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lchruo.mutation.ChatID(); ok {
		_spec.SetField(logchathistoriesrecap.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := lchruo.mutation.AddedChatID(); ok {
		_spec.AddField(logchathistoriesrecap.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := lchruo.mutation.RecapInputs(); ok {
		_spec.SetField(logchathistoriesrecap.FieldRecapInputs, field.TypeString, value)
	}
	if value, ok := lchruo.mutation.RecapOutputs(); ok {
		_spec.SetField(logchathistoriesrecap.FieldRecapOutputs, field.TypeString, value)
	}
	if value, ok := lchruo.mutation.FromPlatform(); ok {
		_spec.SetField(logchathistoriesrecap.FieldFromPlatform, field.TypeInt, value)
	}
	if value, ok := lchruo.mutation.AddedFromPlatform(); ok {
		_spec.AddField(logchathistoriesrecap.FieldFromPlatform, field.TypeInt, value)
	}
	if value, ok := lchruo.mutation.PromptTokenUsage(); ok {
		_spec.SetField(logchathistoriesrecap.FieldPromptTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchruo.mutation.AddedPromptTokenUsage(); ok {
		_spec.AddField(logchathistoriesrecap.FieldPromptTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchruo.mutation.CompletionTokenUsage(); ok {
		_spec.SetField(logchathistoriesrecap.FieldCompletionTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchruo.mutation.AddedCompletionTokenUsage(); ok {
		_spec.AddField(logchathistoriesrecap.FieldCompletionTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchruo.mutation.TotalTokenUsage(); ok {
		_spec.SetField(logchathistoriesrecap.FieldTotalTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchruo.mutation.AddedTotalTokenUsage(); ok {
		_spec.AddField(logchathistoriesrecap.FieldTotalTokenUsage, field.TypeInt, value)
	}
	if value, ok := lchruo.mutation.RecapType(); ok {
		_spec.SetField(logchathistoriesrecap.FieldRecapType, field.TypeInt, value)
	}
	if value, ok := lchruo.mutation.AddedRecapType(); ok {
		_spec.AddField(logchathistoriesrecap.FieldRecapType, field.TypeInt, value)
	}
	if value, ok := lchruo.mutation.CreatedAt(); ok {
		_spec.SetField(logchathistoriesrecap.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := lchruo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(logchathistoriesrecap.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := lchruo.mutation.UpdatedAt(); ok {
		_spec.SetField(logchathistoriesrecap.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := lchruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(logchathistoriesrecap.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = lchruo.schemaConfig.LogChatHistoriesRecap
	ctx = internal.NewSchemaConfigContext(ctx, lchruo.schemaConfig)
	_node = &LogChatHistoriesRecap{config: lchruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lchruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logchathistoriesrecap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lchruo.mutation.done = true
	return _node, nil
}

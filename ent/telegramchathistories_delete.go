// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/telegramchathistories"
)

// TelegramChatHistoriesDelete is the builder for deleting a TelegramChatHistories entity.
type TelegramChatHistoriesDelete struct {
	config
	hooks    []Hook
	mutation *TelegramChatHistoriesMutation
}

// Where appends a list predicates to the TelegramChatHistoriesDelete builder.
func (tchd *TelegramChatHistoriesDelete) Where(ps ...predicate.TelegramChatHistories) *TelegramChatHistoriesDelete {
	tchd.mutation.Where(ps...)
	return tchd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tchd *TelegramChatHistoriesDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, TelegramChatHistoriesMutation](ctx, tchd.sqlExec, tchd.mutation, tchd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tchd *TelegramChatHistoriesDelete) ExecX(ctx context.Context) int {
	n, err := tchd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tchd *TelegramChatHistoriesDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(telegramchathistories.Table, sqlgraph.NewFieldSpec(telegramchathistories.FieldID, field.TypeUUID))
	_spec.Node.Schema = tchd.schemaConfig.TelegramChatHistories
	ctx = internal.NewSchemaConfigContext(ctx, tchd.schemaConfig)
	if ps := tchd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tchd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tchd.mutation.done = true
	return affected, err
}

// TelegramChatHistoriesDeleteOne is the builder for deleting a single TelegramChatHistories entity.
type TelegramChatHistoriesDeleteOne struct {
	tchd *TelegramChatHistoriesDelete
}

// Where appends a list predicates to the TelegramChatHistoriesDelete builder.
func (tchdo *TelegramChatHistoriesDeleteOne) Where(ps ...predicate.TelegramChatHistories) *TelegramChatHistoriesDeleteOne {
	tchdo.tchd.mutation.Where(ps...)
	return tchdo
}

// Exec executes the deletion query.
func (tchdo *TelegramChatHistoriesDeleteOne) Exec(ctx context.Context) error {
	n, err := tchdo.tchd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{telegramchathistories.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tchdo *TelegramChatHistoriesDeleteOne) ExecX(ctx context.Context) {
	if err := tchdo.Exec(ctx); err != nil {
		panic(err)
	}
}

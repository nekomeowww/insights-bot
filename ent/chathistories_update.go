// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/chathistories"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
)

// ChatHistoriesUpdate is the builder for updating ChatHistories entities.
type ChatHistoriesUpdate struct {
	config
	hooks    []Hook
	mutation *ChatHistoriesMutation
}

// Where appends a list predicates to the ChatHistoriesUpdate builder.
func (chu *ChatHistoriesUpdate) Where(ps ...predicate.ChatHistories) *ChatHistoriesUpdate {
	chu.mutation.Where(ps...)
	return chu
}

// SetChatID sets the "chat_id" field.
func (chu *ChatHistoriesUpdate) SetChatID(i int64) *ChatHistoriesUpdate {
	chu.mutation.ResetChatID()
	chu.mutation.SetChatID(i)
	return chu
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableChatID(i *int64) *ChatHistoriesUpdate {
	if i != nil {
		chu.SetChatID(*i)
	}
	return chu
}

// AddChatID adds i to the "chat_id" field.
func (chu *ChatHistoriesUpdate) AddChatID(i int64) *ChatHistoriesUpdate {
	chu.mutation.AddChatID(i)
	return chu
}

// SetChatTitle sets the "chat_title" field.
func (chu *ChatHistoriesUpdate) SetChatTitle(s string) *ChatHistoriesUpdate {
	chu.mutation.SetChatTitle(s)
	return chu
}

// SetNillableChatTitle sets the "chat_title" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableChatTitle(s *string) *ChatHistoriesUpdate {
	if s != nil {
		chu.SetChatTitle(*s)
	}
	return chu
}

// SetMessageID sets the "message_id" field.
func (chu *ChatHistoriesUpdate) SetMessageID(i int64) *ChatHistoriesUpdate {
	chu.mutation.ResetMessageID()
	chu.mutation.SetMessageID(i)
	return chu
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableMessageID(i *int64) *ChatHistoriesUpdate {
	if i != nil {
		chu.SetMessageID(*i)
	}
	return chu
}

// AddMessageID adds i to the "message_id" field.
func (chu *ChatHistoriesUpdate) AddMessageID(i int64) *ChatHistoriesUpdate {
	chu.mutation.AddMessageID(i)
	return chu
}

// SetUserID sets the "user_id" field.
func (chu *ChatHistoriesUpdate) SetUserID(i int64) *ChatHistoriesUpdate {
	chu.mutation.ResetUserID()
	chu.mutation.SetUserID(i)
	return chu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableUserID(i *int64) *ChatHistoriesUpdate {
	if i != nil {
		chu.SetUserID(*i)
	}
	return chu
}

// AddUserID adds i to the "user_id" field.
func (chu *ChatHistoriesUpdate) AddUserID(i int64) *ChatHistoriesUpdate {
	chu.mutation.AddUserID(i)
	return chu
}

// SetUsername sets the "username" field.
func (chu *ChatHistoriesUpdate) SetUsername(s string) *ChatHistoriesUpdate {
	chu.mutation.SetUsername(s)
	return chu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableUsername(s *string) *ChatHistoriesUpdate {
	if s != nil {
		chu.SetUsername(*s)
	}
	return chu
}

// SetFullName sets the "full_name" field.
func (chu *ChatHistoriesUpdate) SetFullName(s string) *ChatHistoriesUpdate {
	chu.mutation.SetFullName(s)
	return chu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableFullName(s *string) *ChatHistoriesUpdate {
	if s != nil {
		chu.SetFullName(*s)
	}
	return chu
}

// SetText sets the "text" field.
func (chu *ChatHistoriesUpdate) SetText(s string) *ChatHistoriesUpdate {
	chu.mutation.SetText(s)
	return chu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableText(s *string) *ChatHistoriesUpdate {
	if s != nil {
		chu.SetText(*s)
	}
	return chu
}

// SetRepliedToMessageID sets the "replied_to_message_id" field.
func (chu *ChatHistoriesUpdate) SetRepliedToMessageID(i int64) *ChatHistoriesUpdate {
	chu.mutation.ResetRepliedToMessageID()
	chu.mutation.SetRepliedToMessageID(i)
	return chu
}

// SetNillableRepliedToMessageID sets the "replied_to_message_id" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableRepliedToMessageID(i *int64) *ChatHistoriesUpdate {
	if i != nil {
		chu.SetRepliedToMessageID(*i)
	}
	return chu
}

// AddRepliedToMessageID adds i to the "replied_to_message_id" field.
func (chu *ChatHistoriesUpdate) AddRepliedToMessageID(i int64) *ChatHistoriesUpdate {
	chu.mutation.AddRepliedToMessageID(i)
	return chu
}

// SetRepliedToUserID sets the "replied_to_user_id" field.
func (chu *ChatHistoriesUpdate) SetRepliedToUserID(i int64) *ChatHistoriesUpdate {
	chu.mutation.ResetRepliedToUserID()
	chu.mutation.SetRepliedToUserID(i)
	return chu
}

// SetNillableRepliedToUserID sets the "replied_to_user_id" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableRepliedToUserID(i *int64) *ChatHistoriesUpdate {
	if i != nil {
		chu.SetRepliedToUserID(*i)
	}
	return chu
}

// AddRepliedToUserID adds i to the "replied_to_user_id" field.
func (chu *ChatHistoriesUpdate) AddRepliedToUserID(i int64) *ChatHistoriesUpdate {
	chu.mutation.AddRepliedToUserID(i)
	return chu
}

// SetRepliedToFullName sets the "replied_to_full_name" field.
func (chu *ChatHistoriesUpdate) SetRepliedToFullName(s string) *ChatHistoriesUpdate {
	chu.mutation.SetRepliedToFullName(s)
	return chu
}

// SetNillableRepliedToFullName sets the "replied_to_full_name" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableRepliedToFullName(s *string) *ChatHistoriesUpdate {
	if s != nil {
		chu.SetRepliedToFullName(*s)
	}
	return chu
}

// SetRepliedToUsername sets the "replied_to_username" field.
func (chu *ChatHistoriesUpdate) SetRepliedToUsername(s string) *ChatHistoriesUpdate {
	chu.mutation.SetRepliedToUsername(s)
	return chu
}

// SetNillableRepliedToUsername sets the "replied_to_username" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableRepliedToUsername(s *string) *ChatHistoriesUpdate {
	if s != nil {
		chu.SetRepliedToUsername(*s)
	}
	return chu
}

// SetRepliedToText sets the "replied_to_text" field.
func (chu *ChatHistoriesUpdate) SetRepliedToText(s string) *ChatHistoriesUpdate {
	chu.mutation.SetRepliedToText(s)
	return chu
}

// SetNillableRepliedToText sets the "replied_to_text" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableRepliedToText(s *string) *ChatHistoriesUpdate {
	if s != nil {
		chu.SetRepliedToText(*s)
	}
	return chu
}

// SetChattedAt sets the "chatted_at" field.
func (chu *ChatHistoriesUpdate) SetChattedAt(i int64) *ChatHistoriesUpdate {
	chu.mutation.ResetChattedAt()
	chu.mutation.SetChattedAt(i)
	return chu
}

// SetNillableChattedAt sets the "chatted_at" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableChattedAt(i *int64) *ChatHistoriesUpdate {
	if i != nil {
		chu.SetChattedAt(*i)
	}
	return chu
}

// AddChattedAt adds i to the "chatted_at" field.
func (chu *ChatHistoriesUpdate) AddChattedAt(i int64) *ChatHistoriesUpdate {
	chu.mutation.AddChattedAt(i)
	return chu
}

// SetEmbedded sets the "embedded" field.
func (chu *ChatHistoriesUpdate) SetEmbedded(b bool) *ChatHistoriesUpdate {
	chu.mutation.SetEmbedded(b)
	return chu
}

// SetNillableEmbedded sets the "embedded" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableEmbedded(b *bool) *ChatHistoriesUpdate {
	if b != nil {
		chu.SetEmbedded(*b)
	}
	return chu
}

// SetCreatedAt sets the "created_at" field.
func (chu *ChatHistoriesUpdate) SetCreatedAt(i int64) *ChatHistoriesUpdate {
	chu.mutation.ResetCreatedAt()
	chu.mutation.SetCreatedAt(i)
	return chu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableCreatedAt(i *int64) *ChatHistoriesUpdate {
	if i != nil {
		chu.SetCreatedAt(*i)
	}
	return chu
}

// AddCreatedAt adds i to the "created_at" field.
func (chu *ChatHistoriesUpdate) AddCreatedAt(i int64) *ChatHistoriesUpdate {
	chu.mutation.AddCreatedAt(i)
	return chu
}

// SetUpdatedAt sets the "updated_at" field.
func (chu *ChatHistoriesUpdate) SetUpdatedAt(i int64) *ChatHistoriesUpdate {
	chu.mutation.ResetUpdatedAt()
	chu.mutation.SetUpdatedAt(i)
	return chu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (chu *ChatHistoriesUpdate) SetNillableUpdatedAt(i *int64) *ChatHistoriesUpdate {
	if i != nil {
		chu.SetUpdatedAt(*i)
	}
	return chu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (chu *ChatHistoriesUpdate) AddUpdatedAt(i int64) *ChatHistoriesUpdate {
	chu.mutation.AddUpdatedAt(i)
	return chu
}

// Mutation returns the ChatHistoriesMutation object of the builder.
func (chu *ChatHistoriesUpdate) Mutation() *ChatHistoriesMutation {
	return chu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (chu *ChatHistoriesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ChatHistoriesMutation](ctx, chu.sqlSave, chu.mutation, chu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chu *ChatHistoriesUpdate) SaveX(ctx context.Context) int {
	affected, err := chu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chu *ChatHistoriesUpdate) Exec(ctx context.Context) error {
	_, err := chu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chu *ChatHistoriesUpdate) ExecX(ctx context.Context) {
	if err := chu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (chu *ChatHistoriesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chathistories.Table, chathistories.Columns, sqlgraph.NewFieldSpec(chathistories.FieldID, field.TypeUUID))
	if ps := chu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chu.mutation.ChatID(); ok {
		_spec.SetField(chathistories.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.AddedChatID(); ok {
		_spec.AddField(chathistories.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.ChatTitle(); ok {
		_spec.SetField(chathistories.FieldChatTitle, field.TypeString, value)
	}
	if value, ok := chu.mutation.MessageID(); ok {
		_spec.SetField(chathistories.FieldMessageID, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.AddedMessageID(); ok {
		_spec.AddField(chathistories.FieldMessageID, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.UserID(); ok {
		_spec.SetField(chathistories.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.AddedUserID(); ok {
		_spec.AddField(chathistories.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.Username(); ok {
		_spec.SetField(chathistories.FieldUsername, field.TypeString, value)
	}
	if value, ok := chu.mutation.FullName(); ok {
		_spec.SetField(chathistories.FieldFullName, field.TypeString, value)
	}
	if value, ok := chu.mutation.Text(); ok {
		_spec.SetField(chathistories.FieldText, field.TypeString, value)
	}
	if value, ok := chu.mutation.RepliedToMessageID(); ok {
		_spec.SetField(chathistories.FieldRepliedToMessageID, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.AddedRepliedToMessageID(); ok {
		_spec.AddField(chathistories.FieldRepliedToMessageID, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.RepliedToUserID(); ok {
		_spec.SetField(chathistories.FieldRepliedToUserID, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.AddedRepliedToUserID(); ok {
		_spec.AddField(chathistories.FieldRepliedToUserID, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.RepliedToFullName(); ok {
		_spec.SetField(chathistories.FieldRepliedToFullName, field.TypeString, value)
	}
	if value, ok := chu.mutation.RepliedToUsername(); ok {
		_spec.SetField(chathistories.FieldRepliedToUsername, field.TypeString, value)
	}
	if value, ok := chu.mutation.RepliedToText(); ok {
		_spec.SetField(chathistories.FieldRepliedToText, field.TypeString, value)
	}
	if value, ok := chu.mutation.ChattedAt(); ok {
		_spec.SetField(chathistories.FieldChattedAt, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.AddedChattedAt(); ok {
		_spec.AddField(chathistories.FieldChattedAt, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.Embedded(); ok {
		_spec.SetField(chathistories.FieldEmbedded, field.TypeBool, value)
	}
	if value, ok := chu.mutation.CreatedAt(); ok {
		_spec.SetField(chathistories.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(chathistories.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.UpdatedAt(); ok {
		_spec.SetField(chathistories.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := chu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(chathistories.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = chu.schemaConfig.ChatHistories
	ctx = internal.NewSchemaConfigContext(ctx, chu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, chu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chathistories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	chu.mutation.done = true
	return n, nil
}

// ChatHistoriesUpdateOne is the builder for updating a single ChatHistories entity.
type ChatHistoriesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatHistoriesMutation
}

// SetChatID sets the "chat_id" field.
func (chuo *ChatHistoriesUpdateOne) SetChatID(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.ResetChatID()
	chuo.mutation.SetChatID(i)
	return chuo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableChatID(i *int64) *ChatHistoriesUpdateOne {
	if i != nil {
		chuo.SetChatID(*i)
	}
	return chuo
}

// AddChatID adds i to the "chat_id" field.
func (chuo *ChatHistoriesUpdateOne) AddChatID(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.AddChatID(i)
	return chuo
}

// SetChatTitle sets the "chat_title" field.
func (chuo *ChatHistoriesUpdateOne) SetChatTitle(s string) *ChatHistoriesUpdateOne {
	chuo.mutation.SetChatTitle(s)
	return chuo
}

// SetNillableChatTitle sets the "chat_title" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableChatTitle(s *string) *ChatHistoriesUpdateOne {
	if s != nil {
		chuo.SetChatTitle(*s)
	}
	return chuo
}

// SetMessageID sets the "message_id" field.
func (chuo *ChatHistoriesUpdateOne) SetMessageID(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.ResetMessageID()
	chuo.mutation.SetMessageID(i)
	return chuo
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableMessageID(i *int64) *ChatHistoriesUpdateOne {
	if i != nil {
		chuo.SetMessageID(*i)
	}
	return chuo
}

// AddMessageID adds i to the "message_id" field.
func (chuo *ChatHistoriesUpdateOne) AddMessageID(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.AddMessageID(i)
	return chuo
}

// SetUserID sets the "user_id" field.
func (chuo *ChatHistoriesUpdateOne) SetUserID(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.ResetUserID()
	chuo.mutation.SetUserID(i)
	return chuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableUserID(i *int64) *ChatHistoriesUpdateOne {
	if i != nil {
		chuo.SetUserID(*i)
	}
	return chuo
}

// AddUserID adds i to the "user_id" field.
func (chuo *ChatHistoriesUpdateOne) AddUserID(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.AddUserID(i)
	return chuo
}

// SetUsername sets the "username" field.
func (chuo *ChatHistoriesUpdateOne) SetUsername(s string) *ChatHistoriesUpdateOne {
	chuo.mutation.SetUsername(s)
	return chuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableUsername(s *string) *ChatHistoriesUpdateOne {
	if s != nil {
		chuo.SetUsername(*s)
	}
	return chuo
}

// SetFullName sets the "full_name" field.
func (chuo *ChatHistoriesUpdateOne) SetFullName(s string) *ChatHistoriesUpdateOne {
	chuo.mutation.SetFullName(s)
	return chuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableFullName(s *string) *ChatHistoriesUpdateOne {
	if s != nil {
		chuo.SetFullName(*s)
	}
	return chuo
}

// SetText sets the "text" field.
func (chuo *ChatHistoriesUpdateOne) SetText(s string) *ChatHistoriesUpdateOne {
	chuo.mutation.SetText(s)
	return chuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableText(s *string) *ChatHistoriesUpdateOne {
	if s != nil {
		chuo.SetText(*s)
	}
	return chuo
}

// SetRepliedToMessageID sets the "replied_to_message_id" field.
func (chuo *ChatHistoriesUpdateOne) SetRepliedToMessageID(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.ResetRepliedToMessageID()
	chuo.mutation.SetRepliedToMessageID(i)
	return chuo
}

// SetNillableRepliedToMessageID sets the "replied_to_message_id" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableRepliedToMessageID(i *int64) *ChatHistoriesUpdateOne {
	if i != nil {
		chuo.SetRepliedToMessageID(*i)
	}
	return chuo
}

// AddRepliedToMessageID adds i to the "replied_to_message_id" field.
func (chuo *ChatHistoriesUpdateOne) AddRepliedToMessageID(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.AddRepliedToMessageID(i)
	return chuo
}

// SetRepliedToUserID sets the "replied_to_user_id" field.
func (chuo *ChatHistoriesUpdateOne) SetRepliedToUserID(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.ResetRepliedToUserID()
	chuo.mutation.SetRepliedToUserID(i)
	return chuo
}

// SetNillableRepliedToUserID sets the "replied_to_user_id" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableRepliedToUserID(i *int64) *ChatHistoriesUpdateOne {
	if i != nil {
		chuo.SetRepliedToUserID(*i)
	}
	return chuo
}

// AddRepliedToUserID adds i to the "replied_to_user_id" field.
func (chuo *ChatHistoriesUpdateOne) AddRepliedToUserID(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.AddRepliedToUserID(i)
	return chuo
}

// SetRepliedToFullName sets the "replied_to_full_name" field.
func (chuo *ChatHistoriesUpdateOne) SetRepliedToFullName(s string) *ChatHistoriesUpdateOne {
	chuo.mutation.SetRepliedToFullName(s)
	return chuo
}

// SetNillableRepliedToFullName sets the "replied_to_full_name" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableRepliedToFullName(s *string) *ChatHistoriesUpdateOne {
	if s != nil {
		chuo.SetRepliedToFullName(*s)
	}
	return chuo
}

// SetRepliedToUsername sets the "replied_to_username" field.
func (chuo *ChatHistoriesUpdateOne) SetRepliedToUsername(s string) *ChatHistoriesUpdateOne {
	chuo.mutation.SetRepliedToUsername(s)
	return chuo
}

// SetNillableRepliedToUsername sets the "replied_to_username" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableRepliedToUsername(s *string) *ChatHistoriesUpdateOne {
	if s != nil {
		chuo.SetRepliedToUsername(*s)
	}
	return chuo
}

// SetRepliedToText sets the "replied_to_text" field.
func (chuo *ChatHistoriesUpdateOne) SetRepliedToText(s string) *ChatHistoriesUpdateOne {
	chuo.mutation.SetRepliedToText(s)
	return chuo
}

// SetNillableRepliedToText sets the "replied_to_text" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableRepliedToText(s *string) *ChatHistoriesUpdateOne {
	if s != nil {
		chuo.SetRepliedToText(*s)
	}
	return chuo
}

// SetChattedAt sets the "chatted_at" field.
func (chuo *ChatHistoriesUpdateOne) SetChattedAt(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.ResetChattedAt()
	chuo.mutation.SetChattedAt(i)
	return chuo
}

// SetNillableChattedAt sets the "chatted_at" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableChattedAt(i *int64) *ChatHistoriesUpdateOne {
	if i != nil {
		chuo.SetChattedAt(*i)
	}
	return chuo
}

// AddChattedAt adds i to the "chatted_at" field.
func (chuo *ChatHistoriesUpdateOne) AddChattedAt(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.AddChattedAt(i)
	return chuo
}

// SetEmbedded sets the "embedded" field.
func (chuo *ChatHistoriesUpdateOne) SetEmbedded(b bool) *ChatHistoriesUpdateOne {
	chuo.mutation.SetEmbedded(b)
	return chuo
}

// SetNillableEmbedded sets the "embedded" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableEmbedded(b *bool) *ChatHistoriesUpdateOne {
	if b != nil {
		chuo.SetEmbedded(*b)
	}
	return chuo
}

// SetCreatedAt sets the "created_at" field.
func (chuo *ChatHistoriesUpdateOne) SetCreatedAt(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.ResetCreatedAt()
	chuo.mutation.SetCreatedAt(i)
	return chuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableCreatedAt(i *int64) *ChatHistoriesUpdateOne {
	if i != nil {
		chuo.SetCreatedAt(*i)
	}
	return chuo
}

// AddCreatedAt adds i to the "created_at" field.
func (chuo *ChatHistoriesUpdateOne) AddCreatedAt(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.AddCreatedAt(i)
	return chuo
}

// SetUpdatedAt sets the "updated_at" field.
func (chuo *ChatHistoriesUpdateOne) SetUpdatedAt(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.ResetUpdatedAt()
	chuo.mutation.SetUpdatedAt(i)
	return chuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (chuo *ChatHistoriesUpdateOne) SetNillableUpdatedAt(i *int64) *ChatHistoriesUpdateOne {
	if i != nil {
		chuo.SetUpdatedAt(*i)
	}
	return chuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (chuo *ChatHistoriesUpdateOne) AddUpdatedAt(i int64) *ChatHistoriesUpdateOne {
	chuo.mutation.AddUpdatedAt(i)
	return chuo
}

// Mutation returns the ChatHistoriesMutation object of the builder.
func (chuo *ChatHistoriesUpdateOne) Mutation() *ChatHistoriesMutation {
	return chuo.mutation
}

// Where appends a list predicates to the ChatHistoriesUpdate builder.
func (chuo *ChatHistoriesUpdateOne) Where(ps ...predicate.ChatHistories) *ChatHistoriesUpdateOne {
	chuo.mutation.Where(ps...)
	return chuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (chuo *ChatHistoriesUpdateOne) Select(field string, fields ...string) *ChatHistoriesUpdateOne {
	chuo.fields = append([]string{field}, fields...)
	return chuo
}

// Save executes the query and returns the updated ChatHistories entity.
func (chuo *ChatHistoriesUpdateOne) Save(ctx context.Context) (*ChatHistories, error) {
	return withHooks[*ChatHistories, ChatHistoriesMutation](ctx, chuo.sqlSave, chuo.mutation, chuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chuo *ChatHistoriesUpdateOne) SaveX(ctx context.Context) *ChatHistories {
	node, err := chuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chuo *ChatHistoriesUpdateOne) Exec(ctx context.Context) error {
	_, err := chuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chuo *ChatHistoriesUpdateOne) ExecX(ctx context.Context) {
	if err := chuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (chuo *ChatHistoriesUpdateOne) sqlSave(ctx context.Context) (_node *ChatHistories, err error) {
	_spec := sqlgraph.NewUpdateSpec(chathistories.Table, chathistories.Columns, sqlgraph.NewFieldSpec(chathistories.FieldID, field.TypeUUID))
	id, ok := chuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatHistories.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := chuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chathistories.FieldID)
		for _, f := range fields {
			if !chathistories.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chathistories.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := chuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chuo.mutation.ChatID(); ok {
		_spec.SetField(chathistories.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.AddedChatID(); ok {
		_spec.AddField(chathistories.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.ChatTitle(); ok {
		_spec.SetField(chathistories.FieldChatTitle, field.TypeString, value)
	}
	if value, ok := chuo.mutation.MessageID(); ok {
		_spec.SetField(chathistories.FieldMessageID, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.AddedMessageID(); ok {
		_spec.AddField(chathistories.FieldMessageID, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.UserID(); ok {
		_spec.SetField(chathistories.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.AddedUserID(); ok {
		_spec.AddField(chathistories.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.Username(); ok {
		_spec.SetField(chathistories.FieldUsername, field.TypeString, value)
	}
	if value, ok := chuo.mutation.FullName(); ok {
		_spec.SetField(chathistories.FieldFullName, field.TypeString, value)
	}
	if value, ok := chuo.mutation.Text(); ok {
		_spec.SetField(chathistories.FieldText, field.TypeString, value)
	}
	if value, ok := chuo.mutation.RepliedToMessageID(); ok {
		_spec.SetField(chathistories.FieldRepliedToMessageID, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.AddedRepliedToMessageID(); ok {
		_spec.AddField(chathistories.FieldRepliedToMessageID, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.RepliedToUserID(); ok {
		_spec.SetField(chathistories.FieldRepliedToUserID, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.AddedRepliedToUserID(); ok {
		_spec.AddField(chathistories.FieldRepliedToUserID, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.RepliedToFullName(); ok {
		_spec.SetField(chathistories.FieldRepliedToFullName, field.TypeString, value)
	}
	if value, ok := chuo.mutation.RepliedToUsername(); ok {
		_spec.SetField(chathistories.FieldRepliedToUsername, field.TypeString, value)
	}
	if value, ok := chuo.mutation.RepliedToText(); ok {
		_spec.SetField(chathistories.FieldRepliedToText, field.TypeString, value)
	}
	if value, ok := chuo.mutation.ChattedAt(); ok {
		_spec.SetField(chathistories.FieldChattedAt, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.AddedChattedAt(); ok {
		_spec.AddField(chathistories.FieldChattedAt, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.Embedded(); ok {
		_spec.SetField(chathistories.FieldEmbedded, field.TypeBool, value)
	}
	if value, ok := chuo.mutation.CreatedAt(); ok {
		_spec.SetField(chathistories.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(chathistories.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.UpdatedAt(); ok {
		_spec.SetField(chathistories.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := chuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(chathistories.FieldUpdatedAt, field.TypeInt64, value)
	}
	_spec.Node.Schema = chuo.schemaConfig.ChatHistories
	ctx = internal.NewSchemaConfigContext(ctx, chuo.schemaConfig)
	_node = &ChatHistories{config: chuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, chuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chathistories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	chuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package logchathistoriesrecap

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nekomeowww/insights-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLTE(FieldID, id))
}

// ChatID applies equality check predicate on the "chat_id" field. It's identical to ChatIDEQ.
func ChatID(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldChatID, v))
}

// RecapInputs applies equality check predicate on the "recap_inputs" field. It's identical to RecapInputsEQ.
func RecapInputs(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldRecapInputs, v))
}

// RecapOutputs applies equality check predicate on the "recap_outputs" field. It's identical to RecapOutputsEQ.
func RecapOutputs(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldRecapOutputs, v))
}

// FromPlatform applies equality check predicate on the "from_platform" field. It's identical to FromPlatformEQ.
func FromPlatform(v int) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldFromPlatform, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldUpdatedAt, v))
}

// ChatIDEQ applies the EQ predicate on the "chat_id" field.
func ChatIDEQ(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldChatID, v))
}

// ChatIDNEQ applies the NEQ predicate on the "chat_id" field.
func ChatIDNEQ(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNEQ(FieldChatID, v))
}

// ChatIDIn applies the In predicate on the "chat_id" field.
func ChatIDIn(vs ...int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldIn(FieldChatID, vs...))
}

// ChatIDNotIn applies the NotIn predicate on the "chat_id" field.
func ChatIDNotIn(vs ...int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNotIn(FieldChatID, vs...))
}

// ChatIDGT applies the GT predicate on the "chat_id" field.
func ChatIDGT(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGT(FieldChatID, v))
}

// ChatIDGTE applies the GTE predicate on the "chat_id" field.
func ChatIDGTE(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGTE(FieldChatID, v))
}

// ChatIDLT applies the LT predicate on the "chat_id" field.
func ChatIDLT(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLT(FieldChatID, v))
}

// ChatIDLTE applies the LTE predicate on the "chat_id" field.
func ChatIDLTE(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLTE(FieldChatID, v))
}

// RecapInputsEQ applies the EQ predicate on the "recap_inputs" field.
func RecapInputsEQ(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldRecapInputs, v))
}

// RecapInputsNEQ applies the NEQ predicate on the "recap_inputs" field.
func RecapInputsNEQ(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNEQ(FieldRecapInputs, v))
}

// RecapInputsIn applies the In predicate on the "recap_inputs" field.
func RecapInputsIn(vs ...string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldIn(FieldRecapInputs, vs...))
}

// RecapInputsNotIn applies the NotIn predicate on the "recap_inputs" field.
func RecapInputsNotIn(vs ...string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNotIn(FieldRecapInputs, vs...))
}

// RecapInputsGT applies the GT predicate on the "recap_inputs" field.
func RecapInputsGT(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGT(FieldRecapInputs, v))
}

// RecapInputsGTE applies the GTE predicate on the "recap_inputs" field.
func RecapInputsGTE(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGTE(FieldRecapInputs, v))
}

// RecapInputsLT applies the LT predicate on the "recap_inputs" field.
func RecapInputsLT(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLT(FieldRecapInputs, v))
}

// RecapInputsLTE applies the LTE predicate on the "recap_inputs" field.
func RecapInputsLTE(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLTE(FieldRecapInputs, v))
}

// RecapInputsContains applies the Contains predicate on the "recap_inputs" field.
func RecapInputsContains(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldContains(FieldRecapInputs, v))
}

// RecapInputsHasPrefix applies the HasPrefix predicate on the "recap_inputs" field.
func RecapInputsHasPrefix(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldHasPrefix(FieldRecapInputs, v))
}

// RecapInputsHasSuffix applies the HasSuffix predicate on the "recap_inputs" field.
func RecapInputsHasSuffix(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldHasSuffix(FieldRecapInputs, v))
}

// RecapInputsEqualFold applies the EqualFold predicate on the "recap_inputs" field.
func RecapInputsEqualFold(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEqualFold(FieldRecapInputs, v))
}

// RecapInputsContainsFold applies the ContainsFold predicate on the "recap_inputs" field.
func RecapInputsContainsFold(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldContainsFold(FieldRecapInputs, v))
}

// RecapOutputsEQ applies the EQ predicate on the "recap_outputs" field.
func RecapOutputsEQ(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldRecapOutputs, v))
}

// RecapOutputsNEQ applies the NEQ predicate on the "recap_outputs" field.
func RecapOutputsNEQ(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNEQ(FieldRecapOutputs, v))
}

// RecapOutputsIn applies the In predicate on the "recap_outputs" field.
func RecapOutputsIn(vs ...string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldIn(FieldRecapOutputs, vs...))
}

// RecapOutputsNotIn applies the NotIn predicate on the "recap_outputs" field.
func RecapOutputsNotIn(vs ...string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNotIn(FieldRecapOutputs, vs...))
}

// RecapOutputsGT applies the GT predicate on the "recap_outputs" field.
func RecapOutputsGT(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGT(FieldRecapOutputs, v))
}

// RecapOutputsGTE applies the GTE predicate on the "recap_outputs" field.
func RecapOutputsGTE(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGTE(FieldRecapOutputs, v))
}

// RecapOutputsLT applies the LT predicate on the "recap_outputs" field.
func RecapOutputsLT(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLT(FieldRecapOutputs, v))
}

// RecapOutputsLTE applies the LTE predicate on the "recap_outputs" field.
func RecapOutputsLTE(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLTE(FieldRecapOutputs, v))
}

// RecapOutputsContains applies the Contains predicate on the "recap_outputs" field.
func RecapOutputsContains(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldContains(FieldRecapOutputs, v))
}

// RecapOutputsHasPrefix applies the HasPrefix predicate on the "recap_outputs" field.
func RecapOutputsHasPrefix(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldHasPrefix(FieldRecapOutputs, v))
}

// RecapOutputsHasSuffix applies the HasSuffix predicate on the "recap_outputs" field.
func RecapOutputsHasSuffix(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldHasSuffix(FieldRecapOutputs, v))
}

// RecapOutputsEqualFold applies the EqualFold predicate on the "recap_outputs" field.
func RecapOutputsEqualFold(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEqualFold(FieldRecapOutputs, v))
}

// RecapOutputsContainsFold applies the ContainsFold predicate on the "recap_outputs" field.
func RecapOutputsContainsFold(v string) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldContainsFold(FieldRecapOutputs, v))
}

// FromPlatformEQ applies the EQ predicate on the "from_platform" field.
func FromPlatformEQ(v int) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldFromPlatform, v))
}

// FromPlatformNEQ applies the NEQ predicate on the "from_platform" field.
func FromPlatformNEQ(v int) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNEQ(FieldFromPlatform, v))
}

// FromPlatformIn applies the In predicate on the "from_platform" field.
func FromPlatformIn(vs ...int) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldIn(FieldFromPlatform, vs...))
}

// FromPlatformNotIn applies the NotIn predicate on the "from_platform" field.
func FromPlatformNotIn(vs ...int) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNotIn(FieldFromPlatform, vs...))
}

// FromPlatformGT applies the GT predicate on the "from_platform" field.
func FromPlatformGT(v int) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGT(FieldFromPlatform, v))
}

// FromPlatformGTE applies the GTE predicate on the "from_platform" field.
func FromPlatformGTE(v int) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGTE(FieldFromPlatform, v))
}

// FromPlatformLT applies the LT predicate on the "from_platform" field.
func FromPlatformLT(v int) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLT(FieldFromPlatform, v))
}

// FromPlatformLTE applies the LTE predicate on the "from_platform" field.
func FromPlatformLTE(v int) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLTE(FieldFromPlatform, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LogChatHistoriesRecap) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LogChatHistoriesRecap) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LogChatHistoriesRecap) predicate.LogChatHistoriesRecap {
	return predicate.LogChatHistoriesRecap(func(s *sql.Selector) {
		p(s.Not())
	})
}

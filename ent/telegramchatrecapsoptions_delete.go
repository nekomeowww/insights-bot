// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nekomeowww/insights-bot/ent/internal"
	"github.com/nekomeowww/insights-bot/ent/predicate"
	"github.com/nekomeowww/insights-bot/ent/telegramchatrecapsoptions"
)

// TelegramChatRecapsOptionsDelete is the builder for deleting a TelegramChatRecapsOptions entity.
type TelegramChatRecapsOptionsDelete struct {
	config
	hooks    []Hook
	mutation *TelegramChatRecapsOptionsMutation
}

// Where appends a list predicates to the TelegramChatRecapsOptionsDelete builder.
func (tcrod *TelegramChatRecapsOptionsDelete) Where(ps ...predicate.TelegramChatRecapsOptions) *TelegramChatRecapsOptionsDelete {
	tcrod.mutation.Where(ps...)
	return tcrod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tcrod *TelegramChatRecapsOptionsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tcrod.sqlExec, tcrod.mutation, tcrod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tcrod *TelegramChatRecapsOptionsDelete) ExecX(ctx context.Context) int {
	n, err := tcrod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tcrod *TelegramChatRecapsOptionsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(telegramchatrecapsoptions.Table, sqlgraph.NewFieldSpec(telegramchatrecapsoptions.FieldID, field.TypeUUID))
	_spec.Node.Schema = tcrod.schemaConfig.TelegramChatRecapsOptions
	ctx = internal.NewSchemaConfigContext(ctx, tcrod.schemaConfig)
	if ps := tcrod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tcrod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tcrod.mutation.done = true
	return affected, err
}

// TelegramChatRecapsOptionsDeleteOne is the builder for deleting a single TelegramChatRecapsOptions entity.
type TelegramChatRecapsOptionsDeleteOne struct {
	tcrod *TelegramChatRecapsOptionsDelete
}

// Where appends a list predicates to the TelegramChatRecapsOptionsDelete builder.
func (tcrodo *TelegramChatRecapsOptionsDeleteOne) Where(ps ...predicate.TelegramChatRecapsOptions) *TelegramChatRecapsOptionsDeleteOne {
	tcrodo.tcrod.mutation.Where(ps...)
	return tcrodo
}

// Exec executes the deletion query.
func (tcrodo *TelegramChatRecapsOptionsDeleteOne) Exec(ctx context.Context) error {
	n, err := tcrodo.tcrod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{telegramchatrecapsoptions.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tcrodo *TelegramChatRecapsOptionsDeleteOne) ExecX(ctx context.Context) {
	if err := tcrodo.Exec(ctx); err != nil {
		panic(err)
	}
}
